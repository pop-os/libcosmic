searchState.loadedDescShard("usvg", 0, "<code>usvg</code> (micro SVG) is an SVG parser that tries to solve most …\nAn alignment baseline property.\nIndicates that the alpha values of the mask should be used.\nApproxEqUlps is a trait for approximate equality …\nApproximate zero equality comparisons.\nA generic gradient.\nA baseline shift property.\nA blending mode property.\nA clip-path element.\nA 8-bit RGB color.\nA cursive font.\nA dominant baseline property.\nWe do not allow SVG with more than 1_000_000 elements for …\nList of all errors.\nA shorthand for FontResolver’s fallback selection …\nA fantasy font.\nA fill style.\nA fill rule.\nText font properties.\nA type of font family.\nA font resolver for <code>&lt;text&gt;</code> elements.\nA shorthand for FontResolver’s font selection function.\nA font stretch property.\nA font style property.\nA reference to raw GIF data. Should be decoded by the …\nA group container.\nA raster image element.\nA shorthand for ImageHrefResolver’s data function.\nAn <code>xlink:href</code> resolver for <code>&lt;image&gt;</code> elements.\nA shorthand for ImageHrefResolver’s string function.\nAn embedded image kind.\nAn image rendering method.\nAn XML node indention.\nSVG doesn’t have a valid size.\nA form that is generally cursive in nature.\nA reference to raw JPEG data. Should be decoded by the …\nA length adjust property.\nA line cap.\nA line join.\nA linear layout.\nA linear gradient.\nIndicates that the luminance values of the mask should be …\nCompressed SVG must use the GZip algorithm.\nA mask element.\nA mask type.\nA monospace font.\nA custom named font.\nNode’s kind.\nA non-zero <code>f32</code>.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nA rectangle defined by left, top, right and bottom edges.\nDisable indention and new lines.\nA face that is neither italic not obliqued.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nOnly UTF-8 content are supported.\nA <code>NormalizedF32</code> value initialized with one.\nA typically-sloped version of the regular face.\nAn alias to <code>NormalizedF32</code>.\nProcessing options.\nA reference to raw PNG data. Should be decoded by the …\nA paint style.\nRepresentation of the <code>paint-order</code> property.\nFailed to parse an SVG data.\nA path element.\nA text-on-path layout.\nA pattern element.\nAn immutable, finite <code>f32</code> that is known to be &gt;= 0.\nA radial gradient.\nA rectangle defined by left, top, right and bottom edges.\nA preprocessed SVG tree. Can be rendered as is.\nA sans-serif font.\nA serif font.\nA shape rendering method.\nA size.\nIndent with spaces. Preferred range is 0..4.\nA spread method.\nGradient’s stop element.\nAn alias to <code>NormalizedF32</code>.\nA stroke style.\nA <code>stroke-miterlimit</code> value.\nAn alias to <code>NonZeroPositiveF32</code>.\nIndent with tabs.\nA text element.\nA text chunk anchor property.\nA text chunk.\nA text span decoration.\nA text span decoration style.\nA text chunk flow property.\nA path used by text-on-path.\nA text rendering method.\nA text style span.\nAn affine transformation matrix.\nA nodes tree container.\nXML writing options.\nA writing mode.\nA <code>PositiveF32</code> value initialized with zero.\nA <code>NormalizedF32</code> value initialized with zero.\nElement’s text bounding box in canvas coordinates.\nReturns node’s bounding box in canvas coordinates, if …\nElement’s bounding box in canvas coordinates.\nElement’s bounding box in canvas coordinates.\nElement’s bounding box in canvas coordinates.\nElement’s “layer” bounding box in canvas units, if …\nElement’s “layer” bounding box in canvas units.\nElement’s bounding box including stroke in canvas …\nReturns node’s bounding box, including stroke, in canvas …\nElement’s bounding box including stroke in user …\nElement’s bounding box including stroke in canvas …\nElement’s absolute transform.\nReturns node’s absolute transform.\nElement’s absolute transform.\nElement’s absolute transform.\nElement’s absolute transform.\nA span alignment baseline.\nA text anchor.\nIndicates that a kerning should be applied.\nThis method tests for <code>self</code> and <code>other</code> values to be …\nThis method tests for <code>self</code> and <code>other</code> values to be not …\nThis method tests for <code>self</code> and <code>other</code> values to be not …\nChecks if the number is approximately zero.\nSet XML attributes indention.\nA list of all baseline shift that should be applied to …\nApplies a bounding box transform.\nApplies a bounding box transform.\nConstructs a new <code>Color</code> set to black.\nGroup blend mode.\nReturns the bottom edge.\nReturns the bottom edge.\nElement’s text bounding box.\nReturns node’s bounding box in object coordinates, if …\nElement’s object bounding box.\nElement’s object bounding box.\nElement’s object bounding box.\nGroup’s children.\nA list of text chunks.\nAdditional clip path.\nElement’s clip path.\nReturns a list of all unique <code>ClipPath</code>s in the tree.\nGradient stop color.\nSet the coordinates numeric precision.\n<code>cx</code> coordinate.\n<code>cy</code> coordinate.\nStroke dash array.\nStroke dash offset.\nSegments list.\nDecompresses an SVGZ file.\nA span decorations.\nCreates a default Data URL resolver closure.\nCreates a default font fallback selection resolver.\nCreates a default font selection resolver.\nDefault viewport size to assume if there is no <code>viewBox</code> …\nCreates a default string resolver.\nA span dominant baseline.\nTarget DPI.\nA relative X axis offsets.\nA relative Y axis offsets.\nA span end in bytes.\nExpands current size to specified size.\nA list of family names.\nA fill style.\nA fill style.\nFill style.\nSVG filter types.\nElement’s filters.\nReturns a list of all unique <code>Filter</code>s in the tree.\nCalculates a node’s filter bounding box.\nText converted into paths, ready to render.\nA font.\nA default font family.\nSpecifies how fonts should be resolved and loaded.\nA font size.\nA default font size.\nReturns the font database that applies to all text nodes …\nA database of fonts usable by text.\nMutably acquires the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Rect</code> into a bounding box <code>Transform</code>.\nParses <code>Tree</code> from an SVG data.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nCreates a Rect from Point array.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nParses <code>Tree</code> from an SVG string.\nCreates a new translating <code>Transform</code>.\nCreates a new <code>Size</code> from width and height.\nParses <code>Tree</code> from <code>roxmltree::Document</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\n<code>fx</code> coordinate.\n<code>fy</code> coordinate.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns an underlying value.\nReturns an underlying value.\nConverts a relative path into absolute relative to the SVG …\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns transform’s scale part.\nReturns <code>true</code> if the group has any children.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks if the current tree has any text nodes.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns height.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nReturns node’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nUsed to add a custom prefix to each element ID during …\nCreates an identity transform.\nSpecifies the way <code>xlink:href</code> in <code>&lt;image&gt;</code> elements should be …\nSpecifies the default image rendering method.\nSet XML nodes indention.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nChecks that transform is finite.\nChecks that transform is identity.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nChecks that transform is finite and has non-zero scale.\nA visibility property.\nElement visibility.\nElement visibility.\nGroup isolation.\nMask type.\nImage data.\nA list of languages.\nElement’s “layer” bounding box in object units.\nProvides access to the layout of a text node.\nThe positioned glyphs and decoration spans of the text.\nReturns the left edge.\nReturns the left edge.\nA length adjust property.\nA letter spacing property.\nAn optional line-through and its style.\nReturns a list of all unique <code>LinearGradient</code>s in the tree.\nStroke linecap.\nStroke linejoin.\nTransforms a points using the current transform.\nTransforms a slice of points using the current transform.\nAdditional mask.\nElement’s mask.\nReturns a list of all unique <code>Mask</code>s in the tree.\nStroke miter limit.\nCreates a new <code>PositiveF32</code> if the given value is &gt;= 0.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a new <code>NonZeroF32</code> value.\nCreates a new <code>StrokeMiterlimit</code> value.\nCreates a <code>NormalizedF32</code> clamping the given value to a …\nConstructs a new <code>Color</code> from RGB values.\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF32</code> by dividing the given value by 255.\nCreates a new <code>PositiveF32</code> without checking the value.\nCreates a new <code>NonZeroPositiveF32</code> without checking the …\nCreates a new <code>NormalizedF32</code> without checking the value.\nReturns a renderable node by ID.\nGradient stop offset.\nGradient stop opacity.\nStroke opacity.\nFill opacity.\nGroup opacity.\nOutsets the rectangle by the specified offset.\nAn optional overline and its style.\nStroke paint.\nFill paint.\nA paint order style.\nFill and stroke paint order.\nA path.\nReturns a list of all unique <code>Pattern</code>s in the tree.\nPost-concats the current transform.\nPost-rotates the current transform.\nPost-rotates the current transform by the specified …\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-rotates the current transform.\nPre-rotates the current transform by the specified …\nPre-scales the current transform.\nPre-translates the current transform.\nDo not convert text into paths.\nGradient radius.\nReturns a list of all unique <code>RadialGradient</code>s in the tree.\nPattern rectangle.\nMask rectangle.\nRendering mode.\nRendering mode.\nRendering mode.\nResolver function that will be used when <code>xlink:href</code> …\nResolver function that will be used to handle an arbitrary …\nDirectory that will be used during relative paths …\nReturns the right edge.\nReturns the right edge.\nPattern children.\nClip path children.\nMask children.\nThe root element of the SVG tree.\nA list of rotation angles.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nFill rule.\nScales current size to specified size.\nResolver function that will be used when selecting a …\nResolver function that will be used when selecting a …\nSpecifies the default shape rendering method.\nChecks if this group should be isolated during rendering.\nReturns rect’s size.\nThe actual image size.\nImage size.\nIndicates that small caps should be used.\nA list of text chunk style spans.\nGradient spreading method.\nA span start in bytes.\nA text offset in SVG coordinates.\nA list of <code>stop</code> elements.\nA font stretch.\nA stroke style.\nA stroke style.\nStroke style.\nElement’s object bounding box including stroke.\nReturns node’s bounding box, including stroke, in object …\nElement’s object bounding box including stroke.\nElement’s object bounding box including stroke.\nA font style.\nCalls a closure for each subroot this <code>Node</code> has.\nA text chunk actual text.\nA text chunk flow.\nA text length property.\nSpecifies the default text rendering method.\nConverts into <code>IntRect</code>.\nConverts into <code>IntSize</code>.\nConverts into <code>NonZeroRect</code>.\nConverts the current size to <code>NonZeroRect</code> at provided …\nConverts into <code>Rect</code>.\nConverts the current size to <code>Rect</code> at provided position.\nWrites <code>usvg::Tree</code> back to SVG.\nConverts into a <code>tiny_skia_path::Stroke</code> type.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nReturns the top edge.\nReturns the top edge.\nTransforms the rect using the provided <code>Transform</code>.\nTransforms the rect using the provided <code>Transform</code>.\nGradient transform.\nPattern transform.\nClip path transform.\nElement’s transform.\nSet the transform values numeric precision.\nTranslates the rect to the specified position.\nAn optional underline and its style.\nChecks if anti-aliasing should be enabled.\nUse single quote marks instead of double quote.\nA font width.\nConstructs a new <code>Color</code> set to white.\nReturns rect’s width.\nReturns rect’s width.\nReturns width.\nStroke width.\nA word spacing property.\nA writing mode.\nReturns rect’s X position.\nReturns rect’s X position.\nAn absolute X axis offset.\n<code>x1</code> coordinate.\n<code>x2</code> coordinate.\nReturns rect’s Y position.\nReturns rect’s Y position.\nAn absolute Y axis offset.\n<code>y1</code> coordinate.\n<code>y2</code> coordinate.\nA blend filter primitive.\nA color channel.\nA color interpolation mode.\nA color matrix filter primitive.\nA color matrix filter primitive kind.\nA component-wise remapping filter primitive.\nA composite filter primitive.\nAn images compositing operation.\nA matrix convolution filter primitive.\nA convolve matrix representation.\nA diffuse lighting filter primitive.\nApplies a step function to a component.\nA displacement map filter primitive.\nA distant light source.\nA drop shadow filter primitive.\nAn edges processing mode.\nA filter element.\nA flood filter primitive.\nApplies an exponential shift to a component.\nA Gaussian blur filter primitive.\nKeeps a component as is.\nAn image filter primitive.\nIdentifies input for a filter primitive.\nA filter kind.\nA light source kind.\nApplies a linear shift to a component.\nA merge filter primitive.\nA morphology filter primitive.\nA morphology operation.\nAn offset filter primitive.\nA point light source.\nA filter primitive element.\nA specular lighting filter primitive.\nA spot light source.\nApplies a linear interpolation to a component.\nA tile filter primitive.\nA transfer function used by <code>FeComponentTransfer</code>.\nA turbulence generation filter primitive.\nA turbulence kind for the <code>feTurbulence</code> filter.\nDirection angle for the light source on the XY plane …\nIdentifies the base frequency for the noise function.\nIdentifies the base frequency for the noise function.\nA kernel matrix bias.\nA flood color.\nA flood color.\nColor interpolation mode.\nReturns a number of columns in the matrix.\nThe actual matrix.\nA diffuse constant.\nA matrix divisor.\nThe amount to offset the input graphic along the X-axis.\nThe amount to offset the input graphic along the X-axis.\nThe amount to offset the input graphic along the Y-axis.\nThe amount to offset the input graphic along the Y-axis.\nAn edges processing mode.\nDirection angle for the light source from the XY plane …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>feFuncA</code> in the SVG.\n<code>feFuncB</code> in the SVG.\n<code>feFuncG</code> in the SVG.\n<code>feFuncR</code> in the SVG.\nReturns a matrix value at the specified position.\nChecks that <code>FilterKind</code> has a specific input.\nElement’s ID.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nList of input layers that should be merged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilter primitive kind.\nA matrix kind.\nIndicates whether the filter primitive should perform a …\nA light source.\nA light source.\nA lighting color.\nA lighting color.\nA limiting cone which restricts the region where the light …\nA convolve matrix.\nA blending mode.\nIdentifies the number of octaves for the noise function.\nA flood opacity.\nA flood opacity.\nA compositing operation.\nA filter operator.\nX point at which the light source is pointing.\nY point at which the light source is pointing.\nZ point at which the light source is pointing.\nAn alpha preserving flag.\nA list of filter primitives.\nA filter radius along the X-axis.\nA filter radius along the Y-axis.\nFilter region.\nFilter subregion.\nAssigned name for this filter primitive.\n<code>feImage</code> children.\nReturns a number of rows in the matrix.\nScale factor.\nThe starting number for the pseudo random number generator.\nA specular constant.\nA specular exponent.\nExponent value controlling the focus for the light source.\nA standard deviation along the X-axis.\nA standard deviation along the X-axis.\nA standard deviation along the Y-axis.\nA standard deviation along the Y-axis.\nSmooth transitions at the border of tiles.\nA surface scale.\nA surface scale.\nReturns a matrix’s X target.\nReturns a matrix’s Y target.\nX location for the light source.\nX location for the light source.\nIndicates a source color channel along the X-axis.\nY location for the light source.\nY location for the light source.\nIndicates a source color channel along the Y-axis.\nZ location for the light source.\nZ location for the light source.\nA glyph that has already been positioned correctly.\nA span contains a number of layouted glyphs that share the …\nReturns the transform for the glyph, assuming that a …\nReturns the transform for the glyph, assuming that a COLR …\nThe fill of the span.\nThe ID of the font the glyph should be taken from. Can be …\nThe font size of the span.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the glyph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA line-through text decoration of the span. Needs to be …\nReturns the transform of glyph, assuming that an outline …\nAn overline text decoration of the span. Needs to be …\nThe paint order of the span.\nThe glyphs that make up the span.\nReturns the transform for the glyph, assuming that a …\nThe stroke of the span.\nReturns the transform for the glyph, assuming that an SVG …\nThe text from the original string that corresponds to that …\nAn underline text decoration of the span. Needs to be …\nThe visibility of the span.")