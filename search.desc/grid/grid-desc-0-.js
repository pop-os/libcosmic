searchState.loadedDescShard("grid", 0, "Two Dimensional Grid\nThe data is ordered column by column.\nStores elements of a certain type in a 2D grid structure.\nDefine the internal memory layout of the grid.\nThe data is ordered row by row.\nClears the grid.\nReturns the number of columns of the grid.\nExpands the grid with the given amount of cols filling the …\nExpands the grid with the given amount of rows filling the …\nFills the grid with elements by cloning <code>value</code>.\nFills the grid with elements returned by calling a closure …\nReturns a reference to the internal data structure of the …\nFlip (or mirrors) the columns.\nFlip (or mirrors) the rows.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a grid from a vector with a given column length. …\nSame as <code>from_vec</code> but with a specific <code>Order</code>.\nAccess a certain element in the grid. Returns <code>None</code> if an …\nMutable access to a certain element in the grid. Returns …\nReturns a reference to an element, without performing …\nReturns a mutable reference to an element, without …\nInit a grid with values.\nInit a column-major grid with values.\nConsume grid the grid with row and column indexes.\nTraverse the grid with row and column indexes.\nTraverse the grid with row and column indexes, and mutable …\nInit a grid of size rows x columns with the given data …\nSame as <code>init</code> but with a specific <code>Order</code>.\nInsert a new column at the index.\nInsert a new row at the index and shifts all rows after …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts self into a vector without clones or allocation.\nReturns <code>true</code> if the grid contains no elements. For example:\nReturns an iterator over the whole grid, starting from the …\nReturns an iterator over a column.\nReturns a mutable iterator over a column.\nIterate over the columns of the grid. Each time an …\nReturns an mutable iterator over the whole grid that …\nReturns an iterator over a row.\nReturns a mutable iterator over a row.\nIterate over the rows of the grid. Each time an iterator …\nReturns a new grid with the same dimensions, but with each …\nReturns a new grid with the same dimensions, but with each …\nInit a grid of size rows x columns with default values of …\nSame as <code>new</code> but with a specific <code>Order</code>.\nReturns the internal memory layout of the grid.\nRemoves the last column from a grid and returns it, or …\nRemoves the last row from a grid and returns it, or None …\nAdd a new column to the grid.\nAdd a new row to the grid.\nRemove a column at the index and return a vector of it.\nRemove a Row at the index and return a vector of it.\nRotate the grid 180°.\nRotate the grid 90° counter-clockwise.\nRotate the grid 90° clockwise.\nReturns the number of rows of the grid.\nReturns the size of the grid as a two element tuple. First …\nSwaps two elements in the Grid. Similar to <code>Vec::swap()</code>.\nTranspose the grid so that columns become rows in new grid.\nInitialises an empty Grid with the capacity to store …\nSame as <code>with_capacity</code> but with a specified <code>Order</code>")