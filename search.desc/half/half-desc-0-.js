searchState.loadedDescShard("half", 0, "A crate that provides support for half-precision 16-bit …\nApproximate number of <code>bf16</code> significant digits in base 10\nApproximate number of <code>f16</code> significant digits in base 10\n<code>bf16</code> Euler’s number (ℯ)\n<code>f16</code> Euler’s number (ℯ)\n<code>bf16</code> machine epsilon value\n<code>f16</code> machine epsilon value\n<code>bf16</code> 1/π\n<code>f16</code> 1/π\n<code>bf16</code> 1/√2\n<code>f16</code> 1/√2\n<code>bf16</code> 2/π\n<code>f16</code> 2/π\n<code>bf16</code> 2/√π\n<code>f16</code> 2/√π\n<code>bf16</code> π/2\n<code>f16</code> π/2\n<code>bf16</code> π/3\n<code>f16</code> π/3\n<code>bf16</code> π/4\n<code>f16</code> π/4\n<code>bf16</code> π/6\n<code>f16</code> π/6\n<code>bf16</code> π/8\n<code>f16</code> π/8\n<code>bf16</code> positive Infinity (+∞)\n<code>f16</code> positive Infinity (+∞)\n<code>bf16</code> 𝗅𝗇 10\n<code>f16</code> 𝗅𝗇 10\n<code>bf16</code> 𝗅𝗇 2\n<code>f16</code> 𝗅𝗇 2\n<code>bf16</code> 𝗅𝗈𝗀₁₀2\n<code>f16</code> 𝗅𝗈𝗀₁₀2\n<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ\n<code>f16</code> 𝗅𝗈𝗀₁₀ℯ\n<code>bf16</code> 𝗅𝗈𝗀₂10\n<code>f16</code> 𝗅𝗈𝗀₂10\n<code>bf16</code> 𝗅𝗈𝗀₂ℯ\n<code>f16</code> 𝗅𝗈𝗀₂ℯ\nNumber of <code>bf16</code> significant digits in base 2\nNumber of <code>f16</code> significant digits in base 2\nLargest finite <code>bf16</code> value\nLargest finite <code>f16</code> value\nMaximum possible <code>bf16</code> power of 10 exponent\nMaximum possible <code>f16</code> power of 10 exponent\nMaximum possible <code>bf16</code> power of 2 exponent\nMaximum possible <code>f16</code> power of 2 exponent\nMaximum subnormal <code>bf16</code> value\nMaximum subnormal <code>f16</code> value\nSmallest finite <code>bf16</code> value\nSmallest finite <code>f16</code> value\nMinimum possible normal <code>bf16</code> power of 10 exponent\nMinimum possible normal <code>f16</code> power of 10 exponent\nOne greater than the minimum possible normal <code>bf16</code> power of …\nOne greater than the minimum possible normal <code>f16</code> power of …\nSmallest positive normal <code>bf16</code> value\nSmallest positive normal <code>f16</code> value\nMinimum positive subnormal <code>bf16</code> value\nMinimum positive subnormal <code>f16</code> value\n<code>bf16</code> Not a Number (NaN)\n<code>f16</code> Not a Number (NaN)\n<code>bf16</code> negative infinity (-∞).\n<code>f16</code> negative infinity (-∞)\n<code>bf16</code> -1\n<code>f16</code> -1\n<code>bf16</code> -0\n<code>f16</code> -0\n<code>bf16</code> 1\n<code>f16</code> 1\n<code>bf16</code> Archimedes’ constant (π)\n<code>f16</code> Archimedes’ constant (π)\nThe radix or base of the internal representation of <code>bf16</code>\nThe radix or base of the internal representation of <code>f16</code>\n<code>bf16</code> √2\n<code>f16</code> √2\n<code>bf16</code> 0\n<code>f16</code> 0\nA 16-bit floating point type implementing the <code>bfloat16</code> …\nRestrict a value to a certain interval unless it is NaN.\nRestrict a value to a certain interval unless it is NaN.\nReturns the floating point category of the number.\nReturns the floating point category of the number.\nReturns a number composed of the magnitude of <code>self</code> and the …\nReturns a number composed of the magnitude of <code>self</code> and the …\nA 16-bit floating point type implementing the IEEE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a floating point value from its representation as …\nCreates a floating point value from its representation as …\nConstructs a <code>bf16</code> value from the raw bits.\nConstructs a 16-bit floating point value from the raw bits.\nConstructs a <code>bf16</code> value from a 32-bit floating point value.\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a <code>bf16</code> value from a 32-bit floating point value.\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a <code>bf16</code> value from a 64-bit floating point value.\nConstructs a 16-bit floating point value from a 64-bit …\nConstructs a <code>bf16</code> value from a 64-bit floating point value.\nConstructs a 16-bit floating point value from a 64-bit …\nCreates a floating point value from its representation as …\nCreates a floating point value from its representation as …\nCreates a floating point value from its representation as …\nCreates a floating point value from its representation as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this number is neither infinite nor NaN.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.\nReturns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.\nReturns <code>true</code> if this value is NaN and <code>false</code> otherwise.\nReturns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if and only if <code>self</code> has a negative sign, …\nReturns <code>true</code> if and only if <code>self</code> has a negative sign, …\nReturns <code>true</code> if and only if <code>self</code> has a positive sign, …\nReturns <code>true</code> if and only if <code>self</code> has a positive sign, …\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nA collection of the most used items and traits in this …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nContains utility functions and traits to convert between …\nReturns the memory representation of the underlying bit …\nReturns the memory representation of the underlying bit …\nConverts a <code>bf16</code> into the underlying bit representation.\nConverts a <code>f16</code> into the underlying bit representation.\nConverts a <code>bf16</code> value into an <code>f32</code> value.\nConverts a <code>f16</code> value into a <code>f32</code> value.\nConverts a <code>bf16</code> value into an <code>f32</code> value.\nConverts a <code>f16</code> value into a <code>f32</code> value.\nConverts a <code>bf16</code> value into an <code>f64</code> value.\nConverts a <code>f16</code> value into a <code>f64</code> value.\nConverts a <code>bf16</code> value into an <code>f64</code> value.\nConverts a <code>f16</code> value into a <code>f64</code> value.\nReturns the memory representation of the underlying bit …\nReturns the memory representation of the underlying bit …\nReturns the memory representation of the underlying bit …\nReturns the memory representation of the underlying bit …\nReturns the ordering between <code>self</code> and <code>other</code>.\nReturns the ordering between <code>self</code> and <code>other</code>.\nContains utility functions and traits to convert between …\nExtensions to <code>[u16]</code> slices to support reinterpret …\nExtensions to <code>[f16]</code> and <code>[bf16]</code> slices to support …\nConverts all of the elements of a <code>[f32]</code> slice into <code>f16</code> or …\nConverts all of the elements of a <code>[f64]</code> slice into <code>f16</code> or …\nConverts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f32</code> …\nConverts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f64</code> …\nReinterprets a slice of <code>f16</code> or <code>bf16</code> numbers as a slice of …\nReinterprets a slice of <code>u16</code> bits as a slice of <code>f16</code> or <code>bf16</code> …\nReinterprets a mutable slice of <code>f16</code> or <code>bf16</code> numbers as a …\nReinterprets a mutable slice of <code>u16</code> bits as a mutable …\nConverts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f32</code> …\nConverts all of the <code>f16</code> or <code>bf16</code> elements of <code>self</code> into <code>f64</code> …\nExtensions to <code>Vec&lt;u16&gt;</code> to support reinterpret operations.\nExtensions to <code>Vec&lt;f16&gt;</code> and <code>Vec&lt;bf16&gt;</code> to support …\nConverts all of the elements of a <code>[f32]</code> slice into a new …\nConverts all of the elements of a <code>[f64]</code> slice into a new …\nReinterprets a vector of <code>f16</code>or <code>bf16</code> numbers as a vector of …\nReinterprets a vector of <code>u16</code> bits as a vector of <code>f16</code> or …")