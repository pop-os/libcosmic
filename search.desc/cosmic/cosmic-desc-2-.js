searchState.loadedDescShard("cosmic", 2, "An adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nConverts a stream of pairs into a future, which resolves …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn adapter for zipping two streams together.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>always_ready</code> function.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA future represents an asynchronous computation, commonly …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nCreates a future that is always immediately ready with a …\nExecutes another future after this one resolves …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nMaps this future’s <code>Error</code> to a new error type using the …\nFlatten the execution of this future when the output of …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFuse a future such that <code>poll</code> will never again be called …\nDo something with the output of a future before passing it …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConvert an owned instance into a (conceptually owned) fat …\nConvert this future into a single element stream.\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMaps this future’s error value to a different value.\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nWraps a future into a <code>MaybeDone</code>\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nEvaluates and consumes the future, returning the resulting …\nCreate a future that is immediately ready with a success …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nCreates a future that is immediately ready with a value.\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nCreate a cloneable handle to this future where all handles …\nChain on a computation for when a future finished, passing …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nCreates a future which represents either a collection of …\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nWaits for either one of two differently-typed futures to …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which contains no elements.\nCreates a stream which gives the current iteration count …\nWraps the current stream in a new stream which converts …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a stream such that <code>poll_next</code> will never again be …\nAn unbounded set of futures.\nDo something with each item of this stream, afterwards …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConverts this stream into a future of …\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nWrap this stream in an <code>Either</code> stream, making it the …\nMaps this stream’s items to a different type, returning …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nCreates a future that resolves to the next item in the …\nCreates a stream of a single element.\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAn adaptor for chunking up ready items of the stream …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nThe context of an asynchronous task.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nA <code>Waker</code> that is only valid for a given lifetime.\nDrops the future represented by the given fat pointer.\nConvert an owned instance into a (conceptually owned) fat …\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nIndicates that the associated task is ready to make …\nIndicates that the associated task is ready to make …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nCreates a reference to a <code>Waker</code> from a reference to …\nListens to keyboard key presses and calls the given …\nListens to keyboard key releases and calls the given …\nCreates a new <code>Stream</code> that produces the items sent from a …\nCreates a new <code>Stream</code> that produces the items sent from a …\nA subscription event.\nA stream of runtime events.\nThe hasher used for identifying subscriptions.\nA user interacted with a user interface in a window.\nThe events that will be produced by a <code>Subscription</code> with …\nThe description of a <code>Subscription</code>.\nA request to listen to external events.\nA registry of subscription streams.\nCreates a <code>Subscription</code> from a <code>Recipe</code> describing it.\nHashes the <code>Recipe</code>.\nReturns the different recipes of the <code>Subscription</code>.\nExecutes the <code>Recipe</code> and produces the stream of events of …\nThe <code>Event</code> describing the interaction.\nThe <code>event::Status</code> of the interaction.\nThe window holding the interface of the interaction.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA simple cache that stores generated geometry to avoid …\nThe style used to fill geometry.\nThe region of a surface that can be used to draw geometry.\nThe kind of <code>Frame</code> this renderer supports.\nThe kind of geometry this renderer can draw.\nA fill which linearly interpolates colors along a …\nA <code>Gradient</code> color.\nA raster image that can be drawn.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA linear gradient interpolates colors along a direction …\nA sharp corner.\nAn immutable set of points that may or may not be …\nA renderer capable of drawing some <code>Self::Geometry</code>.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nA raster image that can be drawn.\nA bunch of text that can be drawn to a canvas\nThe border radii of the image\nThe border radius for the svg\nThe color of the text\nThe <code>Color</code> filter to be applied to the <code>Svg</code>.\nThe contents of the text\nDraws the given <code>Self::Geometry</code>.\nFill <code>Geometry</code> with a certain style.\nThe filter method of the image.\nThe font of the text\nDraw and generate geometry.\nThe handle of the image.\nThe handle of the <code>Svg</code>.\nThe horizontal alignment of the text\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe line height of the text.\nThe shape to be used at the corners of paths or basic …\nCreates a new <code>Self::Frame</code>.\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe opacity of the image.\nThe opacity of the <code>Svg</code>.\nBuild different kinds of 2D shapes.\nThe position of the text relative to the alignment …\nThe rotation to be applied to the image; on its center.\nThe rotation to be applied to the image; on its center.\nThe fill rule defines how to determine what is inside and …\nThe alternating lengths of lines and gaps which describe …\nThe shaping strategy of the text.\nThe size of the text\nIf set to <code>true</code>, the image will be snapped to the pixel …\nCreate lines from a <code>Path</code> and assigns them various …\nThe color or gradient of the fill.\nThe color or gradient of the stroke.\nThe vertical alignment of the text\nThe distance between the two edges of the stroke.\nThe style used to fill geometry.\nA <code>Gradient</code> color.\nThe fill rule defines how to determine what is inside and …\nA solid <code>Color</code>.\nThe coloring style of some drawing.\nThe fill rule defines how to determine what is inside and …\nThe color or gradient of the fill.\nThe internal implementation of a <code>Frame</code>.\nThe region of a surface that can be used to draw geometry.\nA segment of a differentiable curve.\nA <code>Path</code> builder.\nAn immutable set of points that may or may not be …\nBuild and draw curves.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe radius of the arc.\nThe start of the segment’s angle, clockwise rotation …\nA segment of a differentiable curve.\nAn elliptical <code>Arc</code>.\nThe center of the arc.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe end of the segment’s angle, clockwise rotation from …\nThe radii of the arc’s ellipse. The horizontal and …\nThe radius of the arc.\nThe clockwise rotation of the arc’s ellipse.\nThe start of the segment’s angle, clockwise rotation …\nThe start of the segment’s angle, clockwise rotation …\nFlag parameters for arcs as described by the SVG …\nAn alias for <code>usize</code>.\nA view over a contiguous storage of custom attributes.\nInterface for objects storing custom attributes associated …\nAn alias for a slice of <code>f32</code> values.\nA beveled corner is to be used to join path segments. The …\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nThe stroke for each sub-path does not extend beyond its …\nID of a control point in a path.\nID of an endpoint point in a path.\nRepresents an event or edge of path.\nRefers to an event in a path.\nThe fill rule defines how to determine what is inside and …\nA path event representing endpoints and control points as …\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nLine cap as defined by the SVG specification.\nLine join as defined by the SVG specification.\nA sharp corner is to be used to join path segments.\nSame as a miter join, but if the miter limit is exceeded, …\nAn empty attribute slice.\nA simple path data structure.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nThe commands of a path encoded in a single array using IDs …\nA view over <code>PathCommands</code>.\nA path event representing endpoints and control points as …\nA view on a <code>Path</code>.\nA view over a sequence of endpoints forming a polygon.\nInterface for types types (typically endpoints and control …\nInterface for objects storing endpoints and control points …\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nAt each end of each sub-path, the shape representing the …\nA round corner is to be used to join path segments.\nThe positive or negative side of a vector or segment.\nAt the end of each sub-path, the shape representing the …\nThe two possible orientations for the edges of a shape to …\nPath building utilities.\nA generic representation for paths that allow more control …\nReturns the endpoint’s custom attributes as a slice of …\nTools to iterate over paths.\nOf the four candidate arc sweeps, two will represent an …\nf32 version of the lyon_geom types used everywhere. Most …\nReturns the number of float attributes per endpoint.\nThe default path data structure.\nA container to store multiple paths contiguously.\nSpecific path types for polygons.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\n<code>lyon_path</code> traits reexported here for convenience.\nThe radius of each corner of a rounded rectangle.\nBuilds a path.\nA Builder that approximates curves with successions of …\nA convenience wrapper for <code>PathBuilder</code> without custom …\nThe base path building interface.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nBuilds a path with a transformation applied.\nImplements an SVG-like building interface on top of a …\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nAdds a vertical line segment.\nA view on a <code>PathCommands</code> buffer and two slices for …\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nThe commands of a path encoded in a single array using IDs …\nBuilds path commands.\nA view over <code>PathCommands</code>.\nAn iterator of <code>PathEvent</code>.\nAn angle in radians\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nA 2d curve segment defined by four points: the beginning …\nAn infinite line defined by a point and a vector.\nA line defined by the equation …\nA linear segment.\nA 2d curve segment defined by three points: the beginning …\nAlias for <code>euclid::default::Rotation2D</code>\nCommon APIs to segment types.\nAn elliptic arc curve segment using the SVG’s end-point …\nAlias for <code>euclid::default::Transform2D</code>\nAlias for <code>euclid::default::Translation2D</code>\nA 2D triangle defined by three points <code>a</code>, <code>b</code> and <code>c</code>.\nReturn the curve after the split point.\nAngle in radians\nCompute the length of the segment using a flattened …\nElliptic arc related maths and tools.\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nOf the four candidate arc sweeps, two will represent an …\nShorthand for <code>Point::new(x, y)</code>.\nSample the curve at t (expecting t between 0 and 1).\nShorthand for <code>Size::new(x, y)</code>.\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nEnd of the curve.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nFlattening iterator for arcs.\nAn elliptic arc curve segment using the SVG’s end-point …\nOf the four candidate arc sweeps, two will represent an …\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nThe polynomial form of a cubic bézier segment.\nA 2d curve segment defined by four points: the beginning …\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nAngle in radians\nUtilities for testing approximate ordering - especially …\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nA set of aliases for all types, tagged with the default …\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nA one-dimensional length, tagged with its units.\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nThe real part.\nShorthand for …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nConvenience constructor.\nConvenience constructor.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nThe polynomial form of a quadratic bézier segment.\nA 2d curve segment defined by three points: the beginning …\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nAdds a vertical line segment.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nA fill which linearly interpolates colors along a …\nA linear gradient.\nA linear gradient interpolates colors along a direction …\nPacked <code>Gradient</code> data for use in shader code.\nThe absolute ending position of the gradient.\nCreates a new <code>Packed</code> gradient for use in shader code.\nThe absolute starting position of the gradient.\n<code>ColorStop</code>s along the linear gradient direction.\nA raster or vector image.\nA raster image.\nA vector image.\nTries to load an image by its <code>Handle</code>.\nThe bounds of the image.\nThe bounds of the image.\nThe image handle\nThe handle of a vector image.\nPixel is 8-bit alpha\n<code>AnimationDecoder</code> trait\nAn Image in AVIF Format\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nInputs to <code>ImageBuffer::copy_from_color_space</code>.\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nAn error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nReturns true if the alpha channel is contained.\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nA multi-format image reader.\nResult of an image decoding/encoding process\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn error occurred while interacting with the environment.\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nCompleting the operation would have required more …\nGrayscale colors.\nGrayscale colors + alpha channel\nContains the success value\nAn Image in OpenEXR Format\nAn error was encountered in input arguments.\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in general PNM Format\nThe type of each channel in a pixel. For example, this can …\nAn Image in QOI Format\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn operation can not be completed by the chosen …\nAn Image in WEBP Format\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nCreate an empty <code>ImageBuffer</code> with the same pixel type as …\nCreate an empty <code>ImageBuffer</code> with different dimensions.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSupplementary color information.\nReturns the color type of the image data produced by this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nThe width and height of this image.\nReturns a tuple containing the width and height of the …\nContains detailed error representation.\nReturns the raw Exif chunk, if it is present. A …\nImage representations for ffi.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGuess image format from memory block\nThe height of this image.\nThis module provides a way to register decoding hooks for …\nReturns the ICC color profile embedded in the image, or …\nRead a tuple containing the (width, height) of the image …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nConsume the decoder producing a series of frames.\nInvert this pixel\nDeprecated io module the original io module has been …\nA <code>repr(C)</code> description of the layout of buffer samples.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nTypes describing image metadata\nOpen the image located at the path specified. The image’…\nReturns the orientation of the image.\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nPut a pixel at location (x, y). Indexed from top left.\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nUnderlying linear container holding sample values.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file given the path and …\nSet the EXIF metadata to use for the image.\nSet the ICC profile to use for the image.\nSet the decoder to have the specified limits. See <code>Limits</code> …\nReturns a mutable subimage that is a view into this image. …\nConvert this pixel to luma\nConvert this pixel to luma with an alpha channel\nConvert this pixel to RGB\nConvert this pixel to RGB with an alpha channel\nReturns the total number of bytes in the decoded image.\nReturns a subimage that is an immutable view into this …\nReturns the pixel located at (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nReturns a subimage that is an immutable view into this …\nThe width of this image.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nDecoding and Encoding of JPEG Images\nDecoding and Encoding of PNG Images\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nA couple of values for (Xdensity, Ydensity)\nThe unit in which the density is measured\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nAn operation expected a concrete color space but another …\nThe required color type can not be handled.\nDealing with an intricate layout is not implemented for an …\nThe colors or transfer function of the CICP are not …\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe cicp is required to be RGB-like but had other matrix …\nConverting <code>ExtendedColorType</code> to <code>ColorType</code> failed.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nThe given limits\nThe supported strict limits\nThe cicp that was expected.\nThe cicp that was found.\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - <code>ChannelCountMismatch</code> is used instead\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nA <code>repr(C)</code> description of the layout of buffer samples.\nUnderlying linear container holding sample values.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA function to produce an <code>ImageDecoder</code> for a given image …\nA wrapper around a type-erased trait object that …\nReturns whether a decoding hook has been registered for …\nRegister a new decoding hook or returns false if one …\nRegisters a format detection hook.\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nHolds analytical gaussian blur representation\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image.\nPerforms a Gaussian blur on the supplied image.\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nApproximation of Gaussian blur.\nPerform a 3x3 box filter on the supplied image.\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions.\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image.\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place.\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nDeprecated re-export of <code>LimitSupport</code>\nDeprecated re-export of <code>Limits</code>\nDeprecated re-export of <code>ImageReader</code> as <code>Reader</code>\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nThe rectangle’s height.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nRec. ITU-R BT.1361-0 extended colour gamut system …\nRec. ITU-R BT.2020-2 (constant luminance)\nRec. ITU-R BT.2020-2 (non-constant luminance) Rec. ITU-R …\nRec. ITU-R BT.2020-2 (10-bit system) (functionally the …\nRec. ITU-R BT.2020-2 (12-bit system) (functionally the …\nRec. ITU-R BT.2100-2 ICTCp\nARIB STD-B67 Rec. ITU-R BT.2100-2 hybrid log- gamma (HLG) …\nRec. ITU-R BT.470-6 System B, G (historical)\nRec. ITU-R BT.470-6 System B, G (historical) Rec. ITU-R …\nRec. ITU-R BT.470-6 System M (historical) United States …\nSMPTE 170M functionally equivalent to 7\nRec. ITU-R BT.601-7 525 or 625 Rec. ITU-R BT.1358-1 525 or …\nRec. ITU-R BT.709-6 Rec. ITU-R BT.1361-0 conventional …\nRec. ITU-R BT.709-6 Rec. ITU-R BT.1361-0 conventional …\nChromaticity-derived constant luminance system\nChromaticity-derived non-constant luminance system\nReference: https://www.itu.int/rec/T-REC-H.273-202407-I/en …\nDefines the exact color of red, green, blue primary colors.\nRefer to Rec H.273 Table 4.\nThe transfer characteristics, expressing relation between …\nApply to colors of the input color space to get output …\nThe used encoded value range.\nFlip horizontally. Can be performed in-place.\nFlip vertically. Can be performed in-place.\nThe color components are encoded in the full range, e.g., …\nGeneric film (colour filters using Illuminant C)\nThe identity matrix. Typically used for GBR (often …\nIEC 61966-2-4\nCorresponds to value 22 but\nColour representation developed in SMPTE as IPT-PQ-C2.\nLinear transfer characteristics\nLogarithmic transfer characteristic (100:1 range)\nLogarithmic transfer characteristic (100 * Sqrt( 10 ) : 1 …\nThe color components are encoded in a limited range, e.g., …\nDo not perform any transformations.\nDescribes the transformations to be applied to the image. …\nRec. ITU-R BT.2020-2 Rec. ITU-R BT.2100-2\nSMPTE 240M functionally equivalent to 6\nITU-R BT.470-6 System B, G\nITU-R BT.470-6 System M\nRotate by 180 degrees. Can be performed in-place.\nRotate by 270 degrees clockwise. Equivalent to rotating by …\nRotate by 270 degrees clockwise and flip horizontally.\nRotate by 90 degrees clockwise.\nRotate by 90 degrees clockwise and flip horizontally.\nITU-R BT.709-6\nIEC 61966-2-1 sRGB (with MatrixCoefficients equal to 0) …\n(functionally the same as the value 5)\nSMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems Rec. …\nSMPTE ST 2085\nSMPTE ST 240\nSMPTE ST 240\nSMPTE ST 428-1\nSMPTE RP 431-2 (aka. DCI P3)\nSMPTE EG 432-1, DCI P3 variant with the D65 whitepoint …\nExplicitly, the color space is not determined.\nExplicitly, the transfer characteristics are not …\nExplicitly, the matrix coefficients are not determined.\nUnited States Federal Communications Commission (2003) …\nSMPTE ST 428-1\nYCgCo\nYCgCo with added bit-depth (2-bit).\nYCgCo with added bit-depth (1-bit).\nWhether the color components use all bits of the encoded …\nA matrix between linear values and primary color …\nDefines the exact color of red, green, blue primary colors.\nThe electro-optical transfer function (EOTF) that maps …\nA layer of graphical primitives.\nA stack of layers used for drawing.\nFlushes and settles any pending group of primitives in the …\nClears all the layers contents and resets its bounds.\nResizes the <code>Layer</code> to the given bounds.\nCreates a new <code>Layer</code> with the given bounds.\nThe result of counting the attributes of a set of meshes.\nA mesh with a gradient.\nA vertex which contains 2D position &amp; packed gradient data.\nA set of vertices and indices representing a list of …\nA low-level primitive to render a mesh of triangles.\nA renderer capable of drawing a <code>Mesh</code>.\nA mesh with a solid color.\nA two-dimensional vertex with a color.\nReturns the number of total vertices &amp; total indices of …\nThe color of the vertex in <strong>linear</strong> RGBA.\nDraws the given <code>Mesh</code>.\nThe packed vertex data of the gradient.\nThe total amount of gradient vertices.\nThe total amount of gradient meshes.\nThe list of vertex indices that defines the triangles of …\nThe total amount of indices.\nThe vertex position in 2D space.\nThe vertex position in 2D space.\nThe total amount of solid vertices.\nThe total amount of solid meshes.\nThe vertices of the mesh\nThe vertices and indices of the mesh.\nThe vertices and indices of the mesh.\nThe clip bounds of the <code>Mesh</code>.\nThe clip bounds of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nA store of recently used sections of text.\nSome cached text.\nA multi-line text editor.\nAn editor.\nA set of system fonts.\nA bunch of text.\nA paragraph.\nA weak reference to a [<code>cosmic-text::Buffer</code>] that can be …\nSome raw text.\nA text primitive.\nA version number.\nA weak reference to a <code>cosmic_text::Buffer</code>.\nCache text.\nThe clip bounds of the text.\nThe color of the text.\nDraw and edit text.\nReturns the global <code>FontSystem</code>.\nMeasures the dimensions of the given <code>cosmic_text::Buffer</code>.\nDraw paragraphs.\nThe position of the text.\nReturns the attributes of the given <code>Font</code>.\nConverts some <code>Color</code> to a <code>cosmic_text::Color</code>.\nConverts some <code>Shaping</code> strategy to a <code>cosmic_text::Shaping</code> …\nConverts some <code>Wrapping</code> strategy to a <code>cosmic_text::Wrap</code> …\nThe bounds of the text.\nThe clip bounds of the text.\nThe color of the text.\nThe contents of the text.\nThe font of the text.\nThe horizontal alignment of the text.\nThe line height of the text.\nThe shaping strategy of the text.\nThe size of the text in logical pixels.\nThe vertical alignment of the text.\nA store of recently used sections of text.\nA cache entry.\nA cache key representing a section of text.\nThe hash of a <code>Key</code>.\nThe bounds of the text.\nThe buffer of text, ready for drawing.\nThe content of the text.\nThe <code>Font</code> of the text.\nThe line height of the text.\nThe minimum bounds of the text.\nThe shaping strategy of the text.\nThe size of the text.\nAn action to perform on an <code>Editor</code>\nAdvanced text shaping and font fallback.\nWhether to associate cursors placed at a boundary between …\nAlign or justify\nRepresents an angle in degrees or radians.\nText attributes\nList of text attributes to apply to a line\nAn owned version of <code>Attrs</code>\nDelete text behind cursor\nBasic shaping with no font fallback.\nAn iterator over the paragraphs in the input text. It is …\nA value borrowed together with an <code>FontSystem</code>\nA buffer of text that is shaped and laid out\nMove cursor to the end of the document\nA line (or paragraph) of text that is shaped and laid out\nMove cursor to the start of the document\nKey for building a glyph cache\nFlags that change rendering\nMetrics, but implementing Eq and Hash using u32 …\nHelper for caching a value when the value is optionally …\nA set of change items grouped into one logical change\nA unique change to an editor\nMouse click at specified position\nCloses a subpath, connecting the final point to the …\nText color\n32-bit RGBA bitmap.\nPath command.\nUse <code>\\r</code> for line ending (many legacy systems)\nUse <code>\\r\\n</code> for line ending (Windows-style)\nGlyphs in cursive fonts generally use a more informal …\nCurrent cursor location\nA cubic bezier curve from the previous point to the final …\nDelete text in front of cursor\nMouse double click at specified position\nMove cursor down\nMouse drag to specified position\nA trait to allow easy replacements of <code>Editor</code>, like …\nA wrapper of [<code>Buffer</code>] for easy editing\nMove cursor to end of line\nCreate new line\nEscape, clears selection\nThe <code>Fallback</code> trait allows for configurable font fallback …\nA font family.\nAn owned version of <code>Family</code>\nFantasy fonts are primarily decorative or expressive fonts …\nA 4-byte <code>OpenType</code> feature tag identifier\nA font\nFont-specific part of <code>Attrs</code> to be used for matching\nAccess to the system fonts.\nWraps at a glyph level\nMove cursor to specific line\nMove cursor to start of line\nInsert character at cursor\nA form that is generally cursive in nature.\nThe position of a cursor within a [<code>Buffer</code>].\nApply specific <code>LayoutCursor</code>\nA laid out glyph\nA line of laid out glyphs\nA line of visible text for rendering\nAn iterator of visible text lines, see <code>LayoutRun</code>\nMove cursor left\nMove cursor to next word boundary to the left\nA wrapper for letter spacing to get around that f32 doesn…\nUse <code>\\n</code> for line ending (POSIX-style)\nUse <code>\\n\\r</code> for line ending (some legacy systems)\nSelect by lines\nLine ending\nIterator over lines terminated by <code>LineEnding</code>\nA straight line from the previous point to the specified …\n8-bit alpha mask.\nMetrics of text\nThe sole criterion of a monospace font is that all glyphs …\nA motion to perform on a <code>Cursor</code>\nMove the cursor with some motion\nBegins a new subpath at the specified point.\nThe name of a font family of choice.\nMove cursor to next character (<code>Self::Right</code> in LTR, …\nMove cursor to next word boundary\nNo selection\nNo wrapping\nNo line ending\nA face that is neither italic not obliqued.\nNormal selection\nA typically-sloped version of the regular face.\nMove cursor down one page\nMove cursor up one page\nMove cursor to end of paragraph\nMove cursor to start of paragraph\nDescribes the offset and dimensions of a rendered mask.\nA platform-specific font fallback list, for Unix.\nMove cursor to previous character (<code>Self::Left</code> in LTR, …\nMove cursor to previous word boundary\nA quadratic curve from the previous point to the final …\nMove cursor right\nMove cursor to next word boundary to the right\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nScroll position in [<code>Buffer</code>]\nScroll specified number of pixels\nSelection mode\nSerif fonts represent the formal text style for a script.\nA set of buffers containing allocations for shaped text.\nA shaped glyph\nA shaped line (or paragraph)\nA helper structure for caching shape runs.\nKey for caching shape runs.\nA shaped span (for bidirectional processing)\nA shaped word (for word wrapping)\nThe shaping strategy of some text.\nMove cursor to start of line, skipping whitespace\nA face width.\nAllows italic or oblique faces to be selected.\nBinning of subpixel position for cache optimization\n32-bit RGBA subpixel mask.\nCache for rasterizing with the swash scaler\nContent of a scaled glyph image.\nScaled glyph image.\nTwo dimensional transformation matrix.\nMouse triple click at specified position\nMove cursor up\nMove cursor up or down by a number of pixels\nSpecifies the weight of glyphs in the font, their degree …\nSelect by words\nWraps at the word level\nWraps at the word level, or fallback to glyph level if a …\nWrapping mode\nPerform an Action on the editor\nWhether to associate the cursor with the run before it or …\nApply a change\nGet the current automatic indentation setting\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nGet the internal <code>BufferRef</code>\nGet the internal <code>BufferRef</code>\nCache key, see <code>CacheKey</code>\n<code>CacheKeyFlags</code>\nOptional color override\nFallbacks to use after any script specific fallbacks\nContent of the image.\nCopy selection\nGet the current cursor\nGet X and Y position of the top left corner of the cursor\nRaw image data.\nDelete text starting at start Cursor and ending at end …\nDelete selection, adjusting cursor and returning true if …\nCursor indicating end of change\nEnd index of cluster in original line\nGet completed change\n<code>CacheKeyFlags</code>\nFont ID\nFont id of the glyph\nFont size in pixels\nFont size of the glyph\n<code>f32</code> bits of font size\nFont weight\nFont weight of the glyph\nFallbacks to never use\nIndex of [<code>LayoutGlyph</code>] in [<code>LayoutLine::glyphs</code>]\nGlyph ID\nFont id of the glyph\nThe array of layout glyphs to draw\nGlyphs in line\nHeight in pixels.\nThe horizontal position of scroll in fractional pixels\nFirst-byte-index of glyph at cursor (will insert behind …\nInsert if true, delete if false\nInsert text at specified cursor with specified <code>attrs_list</code>\nInsert a string at the current cursor or replacing the …\nChange items grouped into one change\nIndex of [<code>LayoutLine</code>] in [<code>BufferLine::layout</code>]\nHorizontal offset with respect to the origin specified …\nLetter spacing (tracking) in EM\nLetter spacing (tracking) in EM\nUnicode <code>BiDi</code> embedding level, character is left-to-right …\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]. This will be …\nY offset to next line\nLine height in pixels\nLine height of the glyph, will override buffer setting\nMaximum line height of any spans in line\nThe index of the original text line\nY offset to top of line\nWidth of line\nY offset to baseline of line\n<code>BufferLine</code>s (or paragraphs) of text in the buffer\nMaximum ascent of the glyphs in line\nMaximum descent of the glyphs in line\nMetadata from <code>Attrs</code>\nOffset and size of the image.\nGet the <code>Buffer</code> redraw flag\nTrue if the original paragraph direction is RTL\nFallbacks to use per script\nGet the current selection position\nGet the bounds of the current selection\nEnable or disable automatic indentation\nSet the current cursor\nSet the <code>Buffer</code> redraw flag\nSet the current selection position\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nShape lines until scroll, after adjusting scroll if the …\nSource of the image.\nCursor indicating start of change\nStart index of cluster in original line\nStart collecting change\nGet the current tab width\nThe original text line\nText to be inserted or deleted\nVertical offset with respect to the origin specified when …\nPixel offset from the start of the [<code>BufferLine</code>]. This will …\nWidth of hitbox\nWidth of the line\nWidth in pixels.\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>, mutably\nX offset of hitbox\nInteger component of X offset in line\nBinning of fractional X offset\nX offset in line\nY offset of hitbox\nInteger component of Y offset in line\nBinning of fractional Y offset\nY offset in line\nThe <code>Fallback</code> trait allows for configurable font fallback …\nA platform-specific font fallback list, for Unix.\nFallbacks to use after any script specific fallbacks\nFallbacks to never use\nFallbacks to use per script\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nThe sole criterion of a monospace font is that all glyphs …\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nA list of family names.\nA prioritized list of font family names or generic family …\nAn unique ID.\nA face index in the <code>source</code>.\nIndicates that the font face is monospaced.\nA PostScript name.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nDefines the direction in which text is to be read.\nA feature tag with an accompanying range specifying on …\nReference to an in-memory font.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA language tag.\nText is set horizontally from left to right.\nType alias for a normalized variation coordinate.\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nA key used for selecting a shape plan.\nA configured shaper.\nBuilder type for constructing a <code>Shaper</code>.\nData required for shaping with a single font.\nAn instance of a variable font.\nAn OpenType tag.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nA font variation.\nAn index to the start of the grapheme cluster in the …\nA selected glyph.\nPredefined scripts.\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …\nAxis of variation in a variable font.\nCollection of axes in a variable font.\nGlyph names are sourced from the <code>CFF</code> table.\nReference to an in-memory font.\nA 32-bit glyph identifier.\nA 16-bit glyph identifier.\nThe name of a glyph.\nSpecifies the chosen source for glyph names.\nMapping from glyph identifiers to names.\nInterface for types that can provide font metadata.\nNamed instance of a variation.\nCollection of named instances in a variable font.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nGlyph names are sourced from the <code>post</code> table.\nGlyph names are synthesized in the format <code>gidDDD</code> where <code>DDD</code> …\nAn OpenType tag.\nPrimary attributes typically used for font classification …\nReturns the primary attributes for font classification– …\nReturns the collection of variation axes.\nBitmap strikes and glyphs.\nReturns a collection of bitmap strikes.\nMapping of characters (codepoints, not graphemes) to …\nReturns the character to nominal glyph identifier mapping.\nDrawing color glyphs.\nBasic representation of an in-memory font resource.\nReturns the glyph specific metrics for the specified size …\nReturns the mapping from glyph identifiers to names.\nHelpers for selecting a font size and location in …\nReturns an iterator over the collection of localized …\nGlobal font and glyph specific metrics.\nReturns the global font metrics for the specified size and …\nReturns the collection of named variation instances.\nLoading, scaling and hinting of glyph outlines.\nReturns the collection of scalable glyph outlines.\nUseful collection of common types suitable for glob …\nDefinitions for specifying variations and typographic …\nLocalized strings describing font names and other metadata.\nStretch, style and weight attributes of a font.\nGenerally a slanted style, originally based on …\nAn upright or “roman” style.\nOblique (or slanted) style with an optional angle in …\nVisual width of a font– a relative change from the …\nVisual style or ‘slope’ of a font.\nVisual weight class of a font, typically on a scale from …\nUncompressed 32-bit color bitmap data, pre-multiplied in …\nData content of a bitmap.\nThe format (or table) containing the data backing a set of …\nAn embedded bitmap glyph.\nSet of embedded bitmap glyphs of a specific size.\nSet of strikes, each containing embedded bitmaps of a …\nThe origin is in the bottom-left.\nData representing a single channel alpha mask.\nA single channel alpha mask.\nThe origin point for drawing a bitmap glyph.\nCompressed PNG bitmap data.\nThe origin is in the top-left.\nThe horizontal advance width of the bitmap glyph in …\nOuter glyph bearings in the x direction, given in font …\nOuter glyph bearings in the y direction, given in font …\nNumber of bits-per-pixel. Always 1, 2, 4 or 8.\nThe underlying data of the bitmap glyph.\nRaw bitmap data.\nThe number of rows in the bitmap.\nInner glyph bearings in the x direction, given in pixels. …\nInner glyph bearings in the y direction, given in pixels. …\nTrue if each row of the data is bit-aligned. Otherwise, …\nThe placement origin of the bitmap.\nThe assumed pixels-per-em in the x direction.\nThe assumed pixels-per-em in the y direction.\nThe number of columns in the bitmap.\nMapping of characters to nominal glyph identifiers.\nResult of mapping a codepoint with a variation selector.\nCacheable indices of selected mapping tables for …\nIterator over all mappings of character to nominal glyph …\nThe variation selector should be ignored and the default …\nThe variant glyph mapped by a codepoint and associated …\nIterator over all mappings of character and variation …\nA fill type of a COLRv1 glyph (solid fill or various …\nA representation of a color glyph that can be painted …\nCollection of color glyphs.\nDistinguishes available color glyph formats.\nA group of required painting callbacks to be provided by …\nA color stop of a gradient.\nCompositeMode enumeration\nExtend enumeration\nA linear gradient, normalized from the P0, P1 and P2 …\nThe specified COLRv1 glyph has been successfully painted …\nSignals success of request to draw a COLRv1 sub glyph from …\nAn error during drawing a COLR glyph.\nA radial gradient, with color stops normalized to the …\nA solid fill with the color specified by <code>palette_index</code>. …\nA sweep gradient, also called conical gradient. The color …\nA transformation matrix to be applied to the drawing …\nThe client does not implement drawing COLRv1 glyphs from …\nAdditional alpha value, to be multiplied with the color …\nFill the current clip area with the specified gradient …\nCombined clip and fill operation.\nOptionally implement this method: Draw an unscaled COLRv1 …\nSpecifies a color from the <code>CPAL</code> table.\nRestore the clip state to the state before a previous …\nMerge the pushed layer down using <code>composite_mode</code> passed to …\nAlternative version of <code>push_layer</code> where the <code>composite_mode</code> …\nRestore the transformation matrix to the state before the …\nApply a clip rectangle specified by <code>clip_rect</code>.\nApply a clip path in the shape of glyph specified by …\nOpen a new layer, and merge the layer down using …\nPush the specified transform by concatenating it to the …\nReference to an in-memory font.\nOrdered sequence of normalized variation coordinates.\nReference to an ordered sequence of normalized variation …\nType for a normalized variation coordinate.\nFont size in pixels per em units.\nType for a bounding box with single precision floating …\nMetrics for a text decoration.\nGlyph specific metrics.\nMetrics that apply to all glyphs in a font.\nDistance from the baseline to the top of the alignment box.\nAverage width of all non-zero width characters in the font.\nUnion of minimum and maximum extents for all glyphs in the …\nDistance from the baseline to the top of a typical English …\nDistance from the baseline to the bottom of the alignment …\nNumber of glyphs in the font.\nTrue if the font is not proportionally spaced.\nItalic angle in counter-clockwise degrees from the …\nRecommended additional spacing between lines.\nMaximum advance width of all characters in the font.\nOffset to the top of the decoration from the baseline.\nMetrics for a strikeout decoration.\nThickness of the decoration.\nMetrics for an underline decoration.\nNumber of font design units per em unit.\nDistance from the baseline to the top of the lowercase “x…\nMaximum extent in the x direction– the right side of a …\nMinimum extent in the x direction– the left side of a …\nMaximum extend in the y direction. In a Y-up coordinate …\nMinimum extent in the y direction. In a Y-up coordinate …\nInformation and adjusted metrics generated while drawing …\nThe automatic hinter that performs just-in-time adjustment …\nSelects the engine based on the same rules that FreeType …\nPostScript outlines sourced from the <code>CFF</code> table.\nPostScript outlines sourced from the <code>CFF2</code> table.\nErrors that may occur when drawing glyphs.\nOptions that define how a glyph is drawn to a pen.\nApplication of hints that are embedded in the font.\nSpecifies the backend to use when applying hints.\nTrueType outlines sourced from the <code>glyf</code> table.\nThe requested glyph was not present in the font.\nSet of derived glyph styles that are used for automatic …\nHarfBuzz style drawing with hints is not supported\nSpecifies the hinting strategy for memory size …\nError occurred during hinting.\nHinting instance that uses information embedded in the …\nConfiguration settings for a hinting instance.\nExceeded memory limits when loading a glyph.\nThe TrueType or PostScript interpreter.\nAn anchor point had invalid indices.\nHinting that is optimized for subpixel rendering with …\nHinting with a lighter touch, typically meaning less …\nStrong hinting style that should only be used for aliased, …\nNo viable sources were available.\nHinting is disabled.\nThe standard smooth hinting mode.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nSource format for an outline glyph.\nInterface for accepting a sequence of path commands.\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nExceeded a recursion limit when loading a glyph.\nHinting style that is suitable for anti-aliased …\nMode selector for a smooth hinting target.\nDefines the target settings for hinting.\nConversion from outline to path failed.\nGlyph outline contains too many points.\nHinting that is optimized for subpixel rendering with …\nIf present, an adjusted advance width value generated by …\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nSpecifies the hinting engine to use.\nError types associated with outlines.\nTrue if the underlying glyph contains flags indicating the …\nEmit a line segment from the current point to (x, y).\nIf present, an adjusted left side bearing value generated …\nEmit a command to begin a new subpath at (x, y).\nTypes for collecting the output when drawing a glyph …\nEmit a quadratic bezier segment from the current point …\nDefines the properties of the intended target of a hinted …\nThe basic mode for smooth hinting.\nIf true, prevents adjustment of the outline in the …\nIf true, TrueType bytecode may assume that the resulting …\nErrors that are specific to PostScript processing.\nContour end point at this index was less than its …\nErrors that may occur when drawing glyphs.\nExpected a cubic off-curve point at this index.\nExpected a quadratic off-curve point at this index.\nExpected a quadratic off-curve or on-curve point at this …\nThe requested glyph was not present in the font.\nHarfBuzz style drawing with hints is not supported\nHinting error with additional context.\nError occurred during hinting.\nExceeded memory limits when loading a glyph.\nAn anchor point had invalid indices.\nNo viable sources were available.\nExpected number of points to == number of flags\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nAn error that occurs when reading font data\nExceeded a recursion limit when loading a glyph.\nConversion from outline to path failed.\nErrors that can occur when converting an outline to a path.\nGlyph outline contains too many points.\nClose the current subpath.\nPen that generates the control bounds of a glyph outline.\nDraw a cubic bezier from the current point with control …\nIf the first point is off-curve, check if the last is …\nIf the first point is off-curve, check if the second is …\nDraw a line from the current point to (x, y).\nBegin a new subpath at (x, y).\nPen that drops all drawing output into the ether.\nInterface for accepting a sequence of path commands.\nSingle element of a path.\nStyle for path conversion.\nDraw a quadratic bezier from the current point with a …\nPen that generates SVG style path data.\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nEmit a line segment from the current point to (x, y).\nEmit a command to begin a new subpath at (x, y).\nEmit a quadratic bezier segment from the current point …\nReference to an in-memory font.\nA 32-bit glyph identifier.\nReference to an ordered sequence of normalized variation …\nInterface for types that can provide font metadata.\nType for a normalized variation coordinate.\nFont size in pixels per em units.\nAn OpenType tag.\nReturns the primary attributes for font classification– …\nReturns the collection of variation axes.\nReturns a collection of bitmap strikes.\nReturns the character to nominal glyph identifier mapping.\nReturns the glyph specific metrics for the specified size …\nReturns the mapping from glyph identifiers to names.\nReturns an iterator over the collection of localized …\nReturns the global font metrics for the specified size and …\nReturns the collection of named variation instances.\nReturns the collection of scalable glyph outlines.\nAn array of nullable offsets that can be resolved on …\nAn array of offsets that can be resolved on access.\nA collection of fonts.\nReference to the content of a font collection file.\nA type that can compute its size at runtime, based on some …\nReference to the content of a font or font collection file.\nA single font.\nA reference to raw binary font data.\nA type that can be read from raw table data.\nA trait for types that require external data in order to …\nReference to an in-memory font.\nReturn the minimum range of the table bytes\nAny offset type.\nA trait for a type that needs additional arguments to be …\nAn error that occurs when reading font data\nA helper trait providing a ‘resolve’ method for …\nA helper trait providing a ‘resolve’ method for offset …\nThe type of the first (length) field of the item.\nThe table’s tag.\nTTC Header\nThe OpenType Table Directory\nAn interface for accessing tables from a font (or …\nRecord for a table in a font.\nTyped access to raw table data.\nA table that has an associated tag.\nA trait for types that have variable length.\nCustom array types\nChecksum for the table.\nData structures useful for font work.\nCompute the number of bytes required to represent this …\nReturns the array of entries for the control value table …\nLength of the table.\nis_long can be optionally provided, if known, otherwise we …\nOffset from the beginning of the font data.\nRead an instance of <code>Self</code> from the provided data, …\nread an item, using the provided args.\nThe various font tables\nTable identifier.\nAn array whose items size is not known at compile time.\nAn array of items of non-uniform length.\nA fast &amp; efficient invertible ordered set for small (up to …\nA set of disjoint ranges over numeric types.\nA fast, efficient, sparse, &amp; ordered <code>u32</code> set.\nA fast, efficient, sparse, &amp; ordered unsigned integer …\nDefines the domain of <code>IntSet</code> member types.\nMarks a mapped value as being in the domain of <code>T</code> for <code>Domain</code>…\nA fast &amp; efficient invertible ordered set for small (up to …\nA fast, efficient, sparse, &amp; ordered <code>u32</code> set.\nReturns <code>true</code> if the value is part of this domain.\nReturns the number of members in the domain.\nConverts a mapped u32 value back to T.\nReturns true if all u32 values between the mapped u32 min …\nReturns an iterator which iterates over all values in the …\nReturn an iterator which iterates over all values of T in …\nProvides serialization of <code>IntSet</code>’s to a highly compact …\nConverts this value of <code>T</code> to a value in u32.\nEncode this set as a sparse bit set byte encoding with a …\nApple Advanced Typography common tables.\nThe anchor point table.\nThe Axis Variations table\nThe BASE table\nCommon bitmap (EBLC/EBDT/CBLC/CBDT) types.\nThe CBDT (Color Bitmap Data) table\nThe CBLC (Color Bitmap Location) table\nThe CFF table\nThe CFF2 table\nThe cmap table\nThe COLR table\nComputes the table checksum for the given data.\nThe CPAL table\nThe cvar (CVT Variations) table.\nThe DSIG table\nThe EBDT (Embedded Bitmap Data) table\nThe EBLC (Embedded Bitmap Location) table\nThe feature name table.\nThe Font Variations table\nThe gasp table\nthe GDEF table\nThe glyf (Glyph Data) table\nthe GPOS table\nthe GSUB table\nThe gvar (Glyph Variations) table\nThe Horizontal Device Metrics table.\nThe head table\nthe hhea (Horizontal Header) table\nThe hmtx (Horizontal Metrics) table\nThe HVAR (Horizontal Metrics Variation) table\nThe kerning table.\nThe Extended Kerning (kerx) table.\nOpenType Layout common table formats\nThe loca (Index to Location) table\nThe language tag table.\nThe maxp table\nThe meta (Metadata) table\nThe morx (Extended Glyph Metamorphosis) table.\nThe MVAR (Metrics Variation) table\nThe name (Naming) table\nThe os2 table\nthe post (PostScript) table\nPostScript (CFF and CFF2) common tables.\nThe sbix (Standard Bitmap Graphics) table\nThe STAT table\nThe SVG table\nThe tracking (trak) table.\nthe VARC (Variable Composite/Component) table\nOpenType font variations common tables.\nthe vhea (Horizontal Header) table\nThe vmtx (Vertical Metrics) table\nThe VORG (Vertical Origin) table.\nThe VVAR (Vertical Metrics Variation) table\nMaps the glyph indexes of your font into classes.\nLookup tables provide a way of looking up information …\nSimple array format. The lookup data is an array of lookup …\nTrimmed array format. The lookup data is a simple trimmed …\nSegment single format. Each non-overlapping segment has a …\nSegment array format. A segment mapping is performed (as …\nSingle table format. The lookup data is a sorted list of &lt;…\nTrimmed array format. The lookup data is a simple trimmed …\nLookup segment for format 2.\nLookup segment for format 4.\nLookup single record for format 6.\nTrait for values that can be read from lookup tables.\nEmpty data type for a state table entry with no payload.\nUsed for the <code>state_array</code> and <code>entry_table</code> fields in …\nUsed for the <code>state_array</code> in <code>StxHeader</code>.\nEntry in an (extended) state table.\nHeader for a state table.\nTable for driving a finite state machine for layout.\nHeader for an extended state table.\nPredefined classes.\nFirst glyph index in this segment.\nFirst glyph index in this segment.\nFlag values are table specific.\nThe glyph index.\nLast glyph index in this segment.\nLast glyph index in this segment.\nIndex of the next state.\nPayload is table specific.\nThe lookup value.\nThe lookup value.\nA 16-bit offset from the start of the table to the data.\nIndividual anchor point.\nThe anchor point table.\nThe avar (Axis Variations) table\nAxisValueMap record\nSegmentMaps record\nThe array of axis value map records for this axis.\nA normalized coordinate value obtained using default …\nThe number of correspondence pairs for this axis.\nThe modified, normalized coordinate value.\nAxis Table\nThe BASE (Baseline) table\nBaseCoordFormat1\nBaseCoordFormat2\nBaseCoordFormat3\nBaseLangSysRecord\nBaseScript Table\nBaseScriptList Table\nBaseScriptRecord\nBaseTagList Table\nBaseValues table\nFeatMinMaxRecord\nMinMax table\n4-byte language system identification tag\nOffset to BaseScript table, from beginning of …\n4-byte script identification tag\n4-byte feature identification tag — must match feature …\nOffset to BaseCoord table that defines the maximum extent …\nOffset to BaseCoord table that defines the minimum extent …\nOffset to MinMax table, from beginning of BaseScript table\nEbdtComponent record.\nBigGlyphMetrics record.\nThe full bitmap is tightly packed according to the bit …\nBitmap flags.\nBitmapSize record.\nEach row of the data is aligned to a byte boundary.\nGlyphIdOffsetPair record.\nIndexSubtables format type.\nIndexSubTable1: variable-metrics glyphs with 4-byte …\nIndexSubTable2: all glyphs have identical metrics.\nIndexSubTable3: variable-metrics glyphs with 2-byte …\nIndexSubTable4: variable-metrics glyphs with sparse glyph …\nIndexSubTable5: constant-metrics glyphs with sparse glyph …\nIndexSubtableList table.\nSbitLineMetrics record.\nSmallGlyphMetrics record.\nHorizontal or vertical advance width in pixels.\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the top …\nThe Microsoft rasterizer v.1.7 or greater supports the …\nBit depth from the associated size. Required for computing …\nNot used; set to 0.\nOffset in bytes from the start of the EBDT/CBDT table.\nSize of the image data in bytes.\nHighest glyph index for this size.\nFirst glyph ID of this range.\nVertical or horizontal.\nFormat of EBDT/CBDT image data.\nGlyph ID of glyph present.\nComponent glyph ID.\nNumber of rows of data.\nNumber of rows of data.\nLine metrics for text rendered horizontally.\nHorizontal advance width in pixels.\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the top …\nOffset to IndexSubtableList, from beginning of EBLC/CBLC.\nTotal size in bytes of the IndexSubtableList including its …\nOffset to an IndexSubtable from the start of the …\nLast glyph ID of this range (inclusive).\nFull metrics, if present in the EBLC/CBLC table.\nNumber of IndexSubtables in the IndexSubtableList.\nHorizontal pixels per em.\nVertical pixels per em.\nLocation in EBDT.\nLowest glyph index for this size.\nLine metrics for text rendered vertically.\nVertical advance width in pixels.\nDistance in pixels from the vertical origin to the left …\nDistance in pixels from the vertical origin to the top …\nNumber of columns of data.\nNumber of columns of data.\nPosition of component left.\nPosition of component top.\nThe Color Bitmap Data table\nThe Color Bitmap Location table\nThe Compact Font Format table.\nCompact Font Format table header\nThe Compact Font Format (CFF) version 2 table\nCompact Font Format (CFF) version 2 table header\ncmap\ncmap Format 0: Byte encoding table\ncmap Format 10: Tr\ncmap Format 12: Segmented coverage\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 13: Many-to-one range mappings\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 14: Unicode Variation Sequences\nIterator over all (codepoint, selector, mapping variant) …\ncmap Format 2: High-byte mapping through table\ncmap Format 4: Segment mapping to delta values\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 6: Trimmed table mapping\ncmap Format 8: mixed 16-bit and 32-bit coverage\nCharacter and glyph limits for iterating format 12 and 13 …\nThe different cmap subtable formats.\nPart of Cmap13\nDefault UVS table\nEncoding Record\nResult of mapping a codepoint with a variation selector.\nNon-Default UVS table\n…\nUsed in Cmap8 and Cmap12\nPart of Cmap2\nPart of Cmap14\nThe variation selector should be ignored and the default …\nPart of Cmap14\nThe variant glyph mapped by a codepoint and associated …\nPart of Cmap14\nNumber of additional values in this range\nOffset from the start of the <code>Cmap14</code> subtable to Default UVS\nPlatform-specific encoding ID.\nLast character code in this group; same condition as listed\nLast character code in this group\nNumber of valid low bytes for this SubHeader.\nFirst valid low byte for this SubHeader.\nThe number of glyphs in the font.\nGlyph index to be used for all the characters in the …\nGlyph ID of the UVS\nSee text below.\nSee text below.\nThe maximum valid character.\nOffset from the start of the <code>Cmap14</code> subtable to Non-Default\nPlatform ID.\nFirst character code in this group; note that if this …\nFirst character code in this group\nGlyph index corresponding to the starting character code\nFirst value in this range\nByte offset from beginning of the <code>Cmap</code> table to the …\nBase Unicode value of the UVS\nVariation selector\nAffine2x3 record\nBaseGlyph record\nBaseGlyphList table\nBaseGlyphPaint record\nClip record\nClipBox table\nClipBoxFormat1 record\nClipBoxFormat2 record\nClipList table\nColorIndex record\nColorLine table\nColorStop record\nCOLR (Color) table\nCompositeMode enumeration\nExtend enumeration\nLayer record\nLayerList table\nPaint tables\nPaintColrGlyph table\nPaintColrLayers table\nPaintComposite table\nPaintGlyph table\nUnique paint identifier used for detecting cycles in the …\nPaintLinearGradient table\nPaintRadialGradient table\nPaintRotate table\nPaintRotateAroundCenter table\nPaintScale table\nPaintScaleAroundCenter table\nPaintScaleUniform table\nPaintScaleUniformAroundCenter table\nPaintSkew table\nPaintSkewAroundCenter table\nPaintSolid table\nPaintSweepGradient table\nPaintTransform table\nPaintTranslate table\nPaintVarLinearGradient table\nPaintVarRadialGradient table\nPaintVarRotate table\nPaintVarRotateAroundCenter table\nPaintVarScale table\nPaintVarScaleAroundCenter table\nPaintVarScaleUniform table\nPaintVarScaleUniformAroundCenter table\nPaintVarSkew table\nPaintVarSkewAroundCenter table\nPaintVarSolid table\nPaintVarSweepGradient table\nPaintVarTransform table\nPaintVarTranslate table\nVarAffine2x3 record\nVarColorIndex record\nVarColorLine table\nVarColorStop record\nAlpha value.\nAlpha value. For variation, use varIndexBase + 0.\nAlpha value.\nAlpha value. For variation, use varIndexBase + 1.\nOffset to a ClipBox table, from the beginning of the …\nLast glyph ID in the range.\nIndex (base 0) into the layerRecords array.\nGlyph ID of the base glyph.\nGlyph ID of the glyph used for a given layer.\nGlyph ID of the base glyph.\nNumber of color layers associated with this glyph.\nOffset to a Paint table, from the beginning of the …\nIndex (base 0) for a palette entry in the CPAL table.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nFirst glyph ID in the range.\nPosition on a color line.\nPosition on a color line. For variation, use varIndexBase …\nBase index into DeltaSetIndexMap.\nBase index into DeltaSetIndexMap.\nCPAL (Color Record) record\nCPAL (Color Palette Table) table\nThe PaletteType flags.\nAlpha value (B3).\nBlue value (B0).\nGreen value (B1).\nRed value (B2).\nThe cvar table.\nDelta for an entry in the control value table.\nVariation data specialized for the CVT variation table.\nThe index in the CVT.\nThe delta to apply to the value in the CVT.\nDSIG (Digital Signature Table) table\nPermission flags\nSignature Block Format 1\nSignature Record\nFormat of the signature\nLength of signature in bytes\nOffset to the signature block from the beginning of the …\nThe Embedded Bitmap Data table\nThe Embedded Bitmap Location table\nThe feature name table.\nType, flags and names for a feature.\nAssociates a setting with a name identifier.\nFeature type.\nFlags associated with the feature type.\nThe number of records in the setting name array.\nThe name table index for the feature’s name.\nThe name table index for the setting’s name.\nThe setting.\nOffset in bytes from the beginning of this table to this …\nShim table to handle combined axis and instance arrays.\nThe fvar (Font Variations) table\nThe InstanceRecord\nThe VariationAxisRecord\nThe name ID for entries in the ‘name’ table that …\nTag identifying the design variation for the axis.\nThe coordinates array for this instance.\nThe default coordinate value for the axis.\nAxis qualifiers — see details below.\nReserved for future use — set to 0.\nThe maximum coordinate value for the axis.\nThe minimum coordinate value for the axis.\nOptional. The name ID for entries in the ‘name’ table …\nThe name ID for entries in the ‘name’ table that …\ngasp\nFlags describing desired rasterizer behavior.\nUpper limit of range, in PPEM\nAttachment Point List Table\nPart of AttachList\nCaret Value Tables\nCaretValue Format 1\nCaretValue Format 2\nCaretValue Format 3\nA Class Definition Table\nCoverage Table\nDevice Table\nEither a Device table (in a non-variable font) or a …\nFeature List Table\nFeatureVariations Table\nGDEF 1.0\nUsed in the Glyph Class Definition Table\nLigature Caret List Table\nLigature Glyph Table\nLookup Table\nLookup List Table\nMark Glyph Sets Table\nScript List Table\nAnchor position for a composite component.\nA reference to another glyph. Part of CompositeGlyph.\nCompositeGlyph\nFlags used in CompositeGlyph\nPoint with an associated on-curve flag in a simple glyph.\nThe glyf (Glyph Data) table\nSimple or composite glyph.\nTrait for types that are usable for TrueType point …\nFlags describing the properties of a point.\nMarker bits for point flags that are set during variation …\nThe Glyph Header\nFlags used in SimpleGlyph\nTransform for a composite component.\nAnchor for component placement.\nTrueType hinting bytecode.\nComponent flags.\nGlyph identifier.\nTrue if this is an on-curve point.\nComponent transformation matrix.\nX coordinate.\nX scale factor.\nXY skew factor.\nY coordinate.\nYX skew factor.\nY scale factor.\nAn error returned by <code>Decoder::decode</code> if the end of the …\nDecodes instructions from TrueType bytecode.\nSequence of instruction operands that are encoded directly …\nDecoded TrueType instruction.\nOperation code for a TrueType instruction.\nThe bytecode for the program.\nReturns an iterator that yields all instructions in the …\nInstruction operands that were decoded from the bytecode.\nOperation code.\nThe “program counter” or current offset into the …\nProgram counter – offset into the bytecode where this …\nAnchor Table Format 1: Design Units\nAnchor Table Format 2: Design Units Plus Contour Point\nAnchor Table Format 3: Design Units Plus Device or …\nAnchor Tables position one glyph with respect to another.\nPart of MarkBasePosFormat1\nPart of BaseArray\nPart of PairPosFormat2\nPart of PairPosFormat2\nA Class Definition Table\nPart of MarkLigPosFormat1\nCoverage Table\nCursive Attachment Positioning Format 1: Cursvie attachment\nDevice Table\nEither a Device table (in a non-variable font) or a …\nPart of CursivePosFormat1\nExtension Positioning Subtable Format 1\nA GPOS Extension Positioning subtable\nFeature List Table\nFeatureVariations Table\nClass Definition Table Format 1 GPOS Version 1.0\nPart of MarkLigPosFormat1\nPart of MarkLigPosFormat1\nLookup Table\nPart of MarkMarkPosFormat1Class2Record\nPart of MarkMarkPosFormat1\nMark Array Table\nMark-to-Base Attachment Positioning Format 1: Mark-to-base …\nMark-to-Ligature Positioning Format 1: Mark-to-Ligature …\nMark-to-Mark Attachment Positioning Format 1: Mark-to-Mark …\nPart of MarkArray\nLookup Type 1: Single Adjustment Positioning Subtable\nPair Adjustment Positioning Format 1: Adjustments for …\nPair Adjustment Positioning Format 2: Class Pair Adjustment\nPart of PairPosFormat1\nPart of PairSet\nA GPOS ChainedSequenceContext\nA GPOS Lookup subtable.\nA typed GPOS LookupList table\nA GPOS SequenceContext\nThe subtables from a GPOS lookup.\nScript List Table\nLookup Type 1: Single Adjustment Positioning Subtable\nSingle Adjustment Positioning Format 1: Single Positioning …\nSingle Adjustment Positioning Format 2: Array of …\nA fully resolved <code>ValueRecord</code>.\nA context for resolving <code>Value</code>s and <code>ValueRecord</code>s.\nSee ValueRecord\nA Positioning ValueRecord.\nArray of offsets (one per mark class) to Anchor tables. …\nArray of Class2 records, ordered by classes in classDef2.\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nOffset to Anchor table, from beginning of MarkArray table.\nClass defined for the associated mark.\nGlyph ID of second glyph in the pair (first glyph is …\nPositioning data for the first glyph in the pair.\nPositioning for first glyph — empty if valueFormat1 = 0.\nPositioning data for the second glyph in the pair.\nPositioning for second glyph — empty if valueFormat2 = 0.\nPart of AlternateSubstFormat1\nAlternate Substitution Format 1\nA Class Definition Table\nCoverage Table\nDevice Table\nExtension Substitution Subtable Format 1\nA GSUB Extension Substitution subtable\nFeature List Table\nFeatureVariations Table\nGSUB\nPart of LigatureSubstFormat1\nPart of LigatureSubstFormat1\nLigature Substitution Format 1\nLookup Table\nLookup List Table\nMultiple Substitution Format 1\nReverse Chaining Contextual Single Substitution Format 1\nScript List Table\nPart of MultipleSubstFormat1\nLookupType 1: Single Substitution Subtable\nSingle Substitution Format 1\nSingle Substitution Format 2\nA GSUB ChainedSequenceContext\nA GSUB Lookup subtable.\nA typed GSUB LookupList table\nA GSUB SequenceContext\nThe subtables from a GPOS lookup.\nDelta information for a single point or component in a …\nVariation data specialized for the glyph variations table.\nThe GlyphVariationData table\nThe ‘gvar’ header\nArray of tuple records shared across all glyph variation …\nThe point or component index.\nThe x delta.\nThe y delta.\nThe Horizontal Device Metrics table.\nMaximum width.\nPixel size for following widths (as ppem).\nArray of glyphs (numGlyphs is from the ‘maxp’ table).\nThe <code>flags</code> field for the head table.\nThe head (font header) table.\nThe <code>macStyle</code> field for the head table.\nhhea Horizontal Header Table\nThe hmtx (Horizontal Metrics) table\nAdvance width/height, in font design units.\nGlyph leading (left/top) side bearing, in font design …\nThe HVAR (Horizontal Metrics Variations) table\nThe Apple Advanced Typography kerning table.\nA subtable in an AAT <code>kern</code> table.\nThe kerning table.\nThe OpenType kerning table.\nA subtable in an OT <code>kern</code> table.\nA subtable in the <code>kern</code> table.\nThe type 0 <code>kern</code> subtable.\nThe type 0 <code>kerx</code> subtable kerning record.\nThe type 2 <code>kern</code> subtable.\nClass table for the type 2 <code>kern</code> subtable.\nThe type 3 ‘kern’ subtable.\nThe various <code>kern</code> subtable formats.\nOffset to kerning value array.\nSize of the header of the containing subtable.\nThe glyph index for the lefthand glyph in the kerning pair.\nLeft-hand offset table.\nThe glyph index for the righthand glyph in the kerning …\nRight-hand offset table.\nKerning value.\nSequence of indices into the <code>ankr</code> table.\nSequence of coordinate values.\nSequence of glyph outline point indices.\nThe kerx (Extended Kerning) table.\nA subtable in a <code>kerx</code> table.\nThe type 0 <code>kerx</code> subtable.\nThe type 0 <code>kerx</code> subtable kerning record.\nThe type 1 <code>kerx</code> subtable.\nThe type 2 <code>kerx</code> subtable.\nThe type 4 <code>kerx</code> subtable.\nActions for the type 4 <code>kerx</code> subtable.\nThe type 6 <code>kerx</code> subtable.\nThe various <code>kerx</code> subtable formats.\nKerning values.\nFlags for control point positioning.\nThe glyph index for the lefthand glyph in the kerning pair.\nLeft-hand offset table.\nThe glyph index for the righthand glyph in the kerning …\nRight-hand offset table.\nKerning value.\nContains the set of kerning values, one for each state.\nPart of ChainedSequenceContextFormat2\nPart of ChainedSequenceContextFormat2\nChained Sequence Context Format 1\nChained Sequence Context Format 2\nChained Sequence Context Format 3\nPart of ChainedSequenceContextFormat1\nPart of ChainedSequenceContextFormat1\nfeatureParams for ‘cv01’-‘cv99’\nA Class Definition Table\nClass Definition Table Format 1\nClass Definition Table Format 2\nUsed in ClassDefFormat2\nPart of SequenceContextFormat2\nPart of SequenceContextFormat2\nCondition Table\nCondition Table Format 1: Font Variation Axis Range\nCondition Table Format 2: Variation index\nCondition Table Format 3: AND\nCondition Table Format 4: OR\nCondition Table Format 5: NOT\nConditionSet Table\nCoverage Format 1\nCoverage Format 2\nCoverage Table\nDevice delta formats\nDevice Table\nEither a Device table (in a non-variable font) or a …\nA trait that abstracts the behaviour of an extension …\nFeature Table\nFeature List Table\nAn enum for different possible tables referenced by …\nPart of FeatureList\nFeatureTableSubstitution Table\nUsed in FeatureTableSubstitution\nPart of FeatureVariations\nFeatureVariations Table\nLanguage System Table\nSigned 2-bit value, 8 values per uint16\nSigned 4-bit value, 4 values per uint16\nSigned 8-bit value, 2 values per uint16\nLookup Table\nThe LookupFlag bit enumeration.\nLookup List Table\nUsed in CoverageFormat2\nScript Table\nScript List Table\nScript Record\nA prioritized list of OpenType script tags mapped from a …\nA script chosen from a set of candidate tags.\nSequence Context Format 1\nSequence Context Format 2\nSequence Context Format 3\nSequence Lookup Record\nPart of SequenceContextFormat1\nPart of SequenceContextFormat1\nan array of subtables, maybe behind extension lookups\nCombination of a tag and a child table.\nVariation index table\nVariationIndex table, contains a delta-set index pair.\nOffset to an alternate feature table, from start of the …\nApplied to all glyphs in the range\nOffset to a condition set table, from beginning of …\nLast glyph ID in the range\nLast glyph ID in the range\nThe feature table index to match.\nOffset to Feature table, from beginning of FeatureList\nOffset to a feature table substitution table, from …\n4-byte feature identification tag\nIndex of the script in the <code>ScriptList</code>.\nTrue if a script was chosen that wasn’t in the requested …\nOffset to LangSys table, from beginning of Script table\n4-byte LangSysTag identifier\nIndex (zero-based) into the LookupList\nOffset to Script table, from beginning of ScriptList\n4-byte script tag identifier\nIndex (zero-based) into the input glyph sequence\nCoverage Index of first glyph ID in range\nFirst glyph ID in the range\nFirst glyph ID in the range\nThe actual OpenType tag of the chosen script.\nThe loca table.\nOffset and length of string in <code>ltag</code> table.\nThe language tag table.\nString length (in bytes).\nOffset from the start of the table to the beginning of the …\n<code>maxp</code>\n…\n<code>meta</code>\nData stored in the ‘meta’ table.\nOther metadata, which may exist in certain apple fonts\nUsed for the ‘dlng’ and ‘slng’ metadata\nLength of the data, in bytes. The data is not required to …\nOffset in bytes from the beginning of the metadata table …\nA tag indicating the type of metadata.\nA chain in a <code>morx</code> table.\nEntry payload in a contextual subtable state machine.\nContextual glyph substitution subtable.\nUsed to compute the sub-feature flags for a list of …\nEntry payload in an insertion subtable state machine.\nInsertion glyph substitution subtable.\nLigature glyph substitution subtable.\nThe morx (Extended Glyph Metamorphosis) table.\nA subtable in a <code>morx</code> chain.\nThe various <code>morx</code> subtable formats.\nArray of component indices which are summed to determine …\nIndex of the substitution table for the current glyph (use …\nZero-based index into the insertion glyph table. The …\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nThe feature’s setting (aka selector).\nThe type of feature.\nInsertion glyph table. The index and count of glyphs to …\nContains the set of ligature stack actions, one for each …\nOutput ligature glyphs.\nList of lookups specifying substitutions. The index into …\nIndex of the substitution table for the marked glyph (use …\nZero-based index into the insertion glyph table. The …\nThe MVAR (Metrics Variations) table\nValueRecord metrics variation record\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nFour-byte tags used to represent particular metric or …\nFour-byte tag identifying a font-wide measure.\nCap height.\nGaspRange[0]\nGaspRange[1]\nGaspRange[2]\nGaspRange[3]\nGaspRange[4]\nGaspRange[5]\nGaspRange[6]\nGaspRange[7]\nGaspRange[8]\nGaspRange[9]\nHorizontal ascender.\nHorizontal clipping ascent.\nHorizontal clipping descent.\nHorizontal caret offset.\nHorizontal caret run.\nHorizontal caret rise.\nHorizontal descender.\nHorizontal line gap.\nSubscript em x-offset.\nSubscript em x-size.\nSubscript em y-offset.\nSubscript em y-size.\nSuperscript em x-offset.\nSuperscript em x-size.\nSuperscript em y-offset.\nSuperscript em y-size.\nStrikeout offset.\nStrikeout size.\nUnderline offset.\nUnderline size.\nVertical ascender.\nVertical caret offset.\nVertical caret run.\nVertical caret rise.\nVertical descender.\nVertical line gap.\nX-height.\nAn iterator over the chars of a name record.\nThe encoding used by the name table.\nPart of Name\nA helper for encoding and decoding Mac OS Roman encoded …\nNaming table version 1\nIdentifier for an informational string (or name).\nName Records\nEntry for a name in the naming table.\nPlatform-specific encoding ID.\nLanguage-tag string offset from start of storage area (in …\nLanguage ID.\nLanguage-tag string length (in bytes)\nString length (in bytes).\nName ID.\nPlatform ID.\nString offset from start of storage area (in bytes).\n<code>OS/2</code>\nOS/2 selection flags\nThe 258 glyph names defined for Macintosh TrueType fonts\nA string in the post table.\npost (PostScript) table\nState for processing the blend operator for DICTs and …\nCharacter set for mapping from glyph to string identifiers.\nCharset format 0.\nCharset format 1.\nCharset format 2.\nIterator over the glyph and string identifier mappings in …\nRange struct for Charset format 1.\nRange struct for Charset format 2.\nCharset with custom glyph id to string id mappings.\nErrors that are specific to PostScript processing.\nAssociates a glyph identifier with a Font DICT.\nFdSelect format 0.\nFdSelect format 3.\nFdSelect format 4.\nRange struct for FdSelect format 3.\nRange struct for FdSelect format 4.\nCommon type for uniform access to CFF and CFF2 index …\nAn array of variable-sized objects in a <code>CFF</code> table.\nAn array of variable-sized objects in a <code>CFF2</code> table.\nReference to a Latin-1 encoded string.\nEither a signed 32-bit integer or a 16.16 fixed point …\nThe PostScript standard string set.\nOperand stack for DICTs and charstrings.\nPostScript string identifier (SID).\nParsing for PostScript charstrings.\nParsing for PostScript DICTs.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph in range.\nFirst glyph in range.\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nTrait for processing commands resulting from charstring …\nMaximum nesting depth for subroutine calls.\nBitmask defining the counter hints that should be made …\nEvaluates the given charstring and emits the resulting …\nBitmask defining the hints that should be made active for …\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nComponents for computing a fixed point value for a binary …\nOperand for the <code>BlueValues</code>, <code>OtherBlues</code>, <code>FamilyBlues</code> and …\nPostScript DICT Operator with its associated operands.\nAffine matrix and scaling factor.\nA number parsed from a DICT. If the source was in binary …\nPostScript DICT operator.\nAn operator parsed from a DICT.\nOperand for the <code>StemSnapH</code> and <code>StemSnapV</code> operators.\nEither a PostScript DICT operator or a (numeric) operand.\nGiven a byte slice containing DICT data, returns an …\nGiven a font matrix and a scaled UPEM, compute a new font …\nGiven a byte slice containing DICT data, returns an …\nGlyph data table\nSbix header flags.\nThe sbix (Standard Bitmap Graphics) table\nStrike header table\nAxis Records\nAxis Value Tables\nAn array of AxisValue tables.\nAxis value table format 1\nAxis value table format 2\nAxis value table format 3\nAxis value table format 4\nPart of AxisValueFormat4\nAxis value table flags.\nSTAT (Style Attributes Table)\nZero-base index into the axis record array identifying the …\nThe name ID for entries in the ‘name’ table that …\nA value that applications can use to determine primary …\nA tag identifying the axis of design variation.\nA numeric value for this attribute value.\nSVGDocumentList\nSVGDocumentRecord\nThe SVG table\nThe last glyph ID for the range covered by this record.\nThe first glyph ID for the range covered by this record.\nLength of the SVG document data. Must be non-zero.\nOffset from the beginning of the SVGDocumentList to an SVG …\nThe tracking data table.\nSingle entry in a tracking table.\nThe tracking (trak) table.\nThe ‘name’ table index for this track (a short word or …\nOffset from the start of the tracking table to per-size …\nTrack value for this record.\nCondition Table\nCoverage Table\n…\nAn array of variable-sized objects in a <code>CFF2</code> table.\n…\nVARC (Variable Composites / Components Table)\nFlags used in the VarcComponent byte stream\nA VARC glyph doesn’t have any root level attributes, it…\nImplements the logic for iterating over the individual runs\nThe type of values for a given delta run (influences the …\nOuter and inner indices for reading from an …\nThe DeltaSetIndexMap table\nThe DeltaSetIndexMap table format 0\nThe DeltaSetIndexMap table format 1\nEntry format for a DeltaSetIndexMap.\nFloating point item delta computed by an item variation …\nTrait for applying floating point item deltas to target …\nThe ItemVariationData subtable\nThe ItemVariationStore table\nPacked Deltas\nPacked “Point” Numbers\nAn iterator over the packed point numbers data.\nThe RegionAxisCoordinates record\nA Tuple Record\nTrait for deltas that are computed in a tuple variation …\nAn iterator over the deltas for a glyph.\nA single set of tuple variation data\nThe ‘tupleVariationCount’ field of the Tuple Variation …\nTupleVariationHeader\nA helper type for iterating over <code>TupleVariationHeader</code>s.\nAn iterator over the <code>TupleVariation</code>s for a specific glyph.\nThe VariationRegion record\nThe VariationRegionList table\nThe region end coordinate value for the current axis.\nInner delta set index.\nReturns true if the delta is a point and requires reading …\nCreates a new delta for the given position and …\nOuter delta set index.\nThe region peak coordinate value for the current axis.\nArray of region axis coordinates records, in the order of …\nThe region start coordinate value for the current axis.\nCoordinate array specifying a position within the font’s …\nThe vhea Vertical Header Table\nThe vmtx (Vertical Metrics) table\nAdvance width/height, in font design units.\nGlyph leading (left/top) side bearing, in font design …\nVertical origin Y metrics record.\nThe VORG (Vertical Origin) table.\nGlyph index.\nY coordinate, in the font’s design coordinate system, of …\nThe VVAR (Vertical Metrics Variations) table\nA wrapper around raw big-endian bytes for some type.\nMinimum and maximum extents of a rectangular region.\nThe tag contained one or more non-space characters after a …\nThe SFNT version for fonts containing CFF outlines.\nA trait for determining whether versions are compatible.\n32-bit signed fixed point number with 6 bits of fraction.\n16-bit signed fixed point number with 14 bits of fraction.\n16-bit signed fixed point number with 12 bits of fraction.\n16-bit signed fixed point number with 10 bits of fraction.\n16-bit signed quantity in font design units.\n32-bit signed fixed point number with 16 bits of fraction.\nA trait for types that have a known, constant size.\nA 32-bit glyph identifier.\nA 16-bit glyph identifier.\n24-bit unsigned integer.\nThe tag contained an invalid byte, not within the printable\nThe tag was not between 1 and 4 bytes in length.\nAn error representing an invalid tag.\nA simple datetime type.\nA type representing a major, minor version pair.\nIdentifier for an informational string (or name).\nAn offset of a given width for which NULL (zero) is a …\nA16-bit offset to a table.\nA24-bit offset to a table.\nA32-bit offset to a table.\nTwo dimensional point with a generic coordinate type.\nThe raw size of this type, in bytes.\nThe raw byte representation of this type.\nA trait for font scalars.\nThe SFNT version for legacy Apple fonts containing …\nThe header tag for a font collection file.\nThe SFNT version for fonts containing TrueType outlines.\nAn OpenType tag.\nThe error type returned when a glyph identifier conversion …\n16-bit unsigned quantity in font design units.\n24-bit unsigned integer.\nA legacy 16/16 version encoding Packed 32-bit value with …\nreturn <code>true</code> if this version is field-compatible with <code>other</code>.\nCreate an instance of this type from raw big-endian bytes\nThe major version number\nThe minor version number\nAn internal macro for implementing the <code>RawType</code> trait.\nAttempt to read a scalar from a slice.\nEncode this type as raw big-endian bytes\nX coordinate.\nMaximum extent in the x direction– the right side of a …\nMinimum extent in the x direction– the left side of a …\nY coordinate.\nMaximum extend in the y direction. In a Y-up coordinate …\nMinimum extent in the y direction. In a Y-up coordinate …\nSetting defined by a selector tag and an associated value.\nType for specifying a variation axis setting in user …\nTag that specifies the target setting.\nTag that specifies the target setting.\nThe desired value for the setting.\nThe desired value for the setting.\nIterator over the characters of a string.\nString containing a name or other font metadata in a …\nIterator over a collection of localized strings for a …\nIdentifier for an informational string (or name).\nA multi-line text editor.\nA weak reference to an <code>Editor</code>.\nThe bounds of the <code>Editor</code>.\nA bunch of text.\nA weak reference to a <code>Paragraph</code>.\nThe horizontal alignment of the <code>Paragraph</code>.\nThe minimum bounds of the <code>Paragraph</code>.\nThe vertical alignment of the <code>Paragraph</code>.\nA cheaply cloneable and sliceable chunk of contiguous …\nA handle pointing to some encoded image bytes in-memory.\nImage filtering strategy.\nA handle of some image data.\nThe image Handle to be displayed. Iced exposes its own …\nThe unique identifier of some <code>Handle</code> data.\nA raster image that can be drawn.\nBilinear interpolation.\nNearest neighbor.\nA file handle. The image data will be read from the file …\nA <code>Renderer</code> that can render raster graphics.\nA handle pointing to decoded image pixels in RGBA format.\nThe border radii of the image\nDraws an image with the given <code>Handle</code> and inside the …\nThe filter method of the image.\nThe handle of the image.\nReturns the dimensions of an image for the given <code>Handle</code>.")