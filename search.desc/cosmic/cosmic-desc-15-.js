searchState.loadedDescShard("cosmic", 15, "Multiplies all of the transform’s component by a scalar …\nConstructor.\nConstructor.\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nSee <code>Point2D::round</code>.\nRounds each component to the nearest integer value.\nRounds each component to the nearest integer value.\nSee <code>Point3D::round</code>.\nReturn a rectangle with edges rounded to integer …\nRounds each component to the nearest integer value.\nSee <code>Size2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round</code>.\nSee <code>Vector3D::round</code>.\nRounds each component to the nearest integer value.\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nChange the size of the box by adjusting the max endpoint …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nCreates a 3d rotation (around the z axis) from this 2d …\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 2D vector.\nCast into a 3D vector.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given point transformed by this transform.\nReturns the given 2d point transformed by this rotation …\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Point2D::origin</code>.\nThe same as <code>Point3D::origin</code>.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Zero::zero</code> but available without importing …\nThe same as <code>Zero::zero</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nThe polynomial form of a quadratic bézier segment.\nA 2d curve segment defined by three points: the beginning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nSample x at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns an iterator that turns curves into line segments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the iterator.\nCreates a new transformed path iterator from a path …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nReturns an iterator applying a 2D transform to all of its …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nAdds a vertical line segment.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nDefines the [<code>Appearance</code>] of a cards.\nAppearance of the cards.\nThe default [<code>Appearance</code>] of the cards.\nThe <code>Checkbox</code> can be interacted with.\nThe theme catalog of a <code>Checkbox</code>.\nA box that can be checked.\nThe item class of the <code>Catalog</code>.\nThe <code>Checkbox</code> cannot be interacted with.\nThe <code>Checkbox</code> can be interacted with and it is being …\nThe icon in a <code>Checkbox</code>.\nThe possible status of a <code>Checkbox</code>.\nThe style of a checkbox.\nA styling function for a <code>Checkbox</code>.\nThe <code>Background</code> of the checkbox.\nThe <code>Border</code> of the checkbox.\nThe unicode code point that will be used as the icon.\nA danger checkbox; denoting a negative toggle.\nThe default class produced by the <code>Catalog</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe icon <code>Color</code> of the checkbox.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the icon.\nA primary checkbox; denoting a main toggle.\nA secondary checkbox; denoting a complementary toggle.\nThe shaping strategy of the icon.\nFont size of the content.\nThe <code>Style</code> of a class with the given status.\nA success checkbox; denoting a positive toggle.\nThe text <code>Color</code> of the checkbox.\nThe wrap mode of the icon.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nA button for selecting a color from a color picker.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the applied color of the picker\nGet whether or not the picker should be visible\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a color picker button that displays the applied color\nA container which aligns its children in a column.\nA pre-allocated [<code>column</code>].\nA [<code>column</code>] that will be assigned an <code>Iterator</code> of children.\nThe theme catalog of a <code>ComboBox</code>.\nA widget for searching and selecting a single value from a …\nThe local state of a <code>ComboBox</code>.\nThe default class for the text input of the <code>ComboBox</code>.\nThe default class for the text input of the <code>ComboBox</code>.\nThe default class for the text input of the <code>ComboBox</code>.\nThe default class for the menu of the <code>ComboBox</code>.\nThe default class for the menu of the <code>ComboBox</code>.\nThe default class for the menu of the <code>ComboBox</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nReturns the options of the <code>State</code>.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nA widget that aligns its contents inside of its boundaries.\nThe appearance of a container.\nA styling function for a <code>Container</code>.\nA <code>Container</code> with the given <code>Background</code>.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nA bordered <code>Container</code> with a background.\nA <code>Container</code> with a dark background and white text.\nThe default class produced by the <code>Catalog</code>.\nDraws the background of a <code>Container</code> given its <code>Style</code> and …\nThe icon <code>Color</code> of the container.\nComputes the layout of a <code>Container</code>.\nA rounded <code>Container</code> with a background.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nA transparent <code>Container</code>.\nProduces a <code>Task</code> that queries the visible screen bounds of …\nAn overlayed widget that attaches a toggleable context …\nA context menu is a menu in a graphical user interface …\nSets the <code>close_on_escape</code> field of this struct.\nA context menu is a menu in a graphical user interface …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the <code>window_id</code> field of this struct.\nHorizontal variant of a divider.\nVertical variant of a divider.\nHorizontal divider with default thickness\nHorizontal divider with heavy thickness.\nHorizontal divider with light thickness\nVertical divider with default thickness\nVertical divider with heavy thickness.\nVertical divider with light thickness\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drag id of the destination.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA widget for selecting a single value from a list of …\nThe local state of a <code>Dropdown</code>.\nDraws a <code>Dropdown</code>.\nDisplays a list of options in a popover menu on select.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>Dropdown</code>.\nReturns the current <code>mouse::Interaction</code> of a <code>Dropdown</code>.\nCreates a new <code>State</code> for a <code>Dropdown</code>.\nReturns the current overlay of a <code>Dropdown</code>.\nDisplays a list of options in a popover menu on select. …\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>Dropdown</code> …\nThe appearance of a menu.\nA list of selectable options.\nThe local state of a <code>Menu</code>.\nThe supported style of the <code>StyleSheet</code>.\nThe style sheet of a menu.\nProduces the <code>Appearance</code> of a menu.\nMenu background\nMenu border color\nMenu border radius\nMenu border width\nDescription text color\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBackground when hovered\nText color when hovered\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Menu</code> with the given <code>State</code>, a list of …\nCreates a new <code>State</code> for a <code>Menu</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nTurns the <code>Menu</code> into a popup <code>Element</code> at the given target …\nBackground when selected\nText color when selected\nMenu text color\nSets the text [<code>LineHeight</code>] of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nThe theme catalog of a <code>PickList</code>.\nThe item class of the <code>Catalog</code>.\nThe default gap.\nThe default padding.\nA widget for selecting a single value from a list of …\nA list for a multi-list dropdown widget.\nA model for managing the options in a multi-list dropdown.\nThe appearance of a pick list.\nThe <code>Background</code> of the pick list.\nThe <code>Border</code> of the pick list.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the menu of the <code>PickList</code>.\nThe default class for the menu of the <code>PickList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle <code>Color</code> of the pick list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>List</code> for a multi-list dropdown widget.\nCreate a <code>Model</code> for a multi-list dropdown.\nCreates a new <code>Dropdown</code> with the given list of selections, …\nThe placeholder <code>Color</code> of the pick list.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the pick list.\nA dropdown menu with multiple lists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nSets the text [<code>LineHeight</code>] of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nResponsively generates rows of widgets based on the …\nResponsively generates rows and columns of widgets based …\nDefines how content will be aligned horizontally.\nSets the space between each column of items.\nDefines how the content will be justified.\nDefines how content will be aligned vertically.\nSets the max width\nSets minimum width of items that grow.\nSets the padding around the widget.\nSets the space between each item in a row.\nSets the space between each column and row.\nSets the width.\nArrange widgets with a grid layout.\nResponsively generates rows and columns of widgets based …\nAlignment across columns\nSets the space between each column of items.\nReturns the argument unchanged.\nSets the height of the grid.\nCalls <code>U::from(self)</code>.\nDefines how the content will be justified.\nSets the max width\nSets the padding around the widget.\nAttach a new element with a given grid assignment.\nAttach a new element with custom properties\nAlignment across rows\nSets the space between each item in a row.\nSets the width of the grid.\nDefault fallback using the icon name.\nAn image which may be an SVG or PNG.\nFallback icon to use if the icon was not found.\nFallback to specific icon names.\nDraw an icon in the given bounds via the runtime’s …\nSets the <code>fallback</code> field of this struct.\nChecks for a fallback if the icon was not found.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an icon handle from its XDG icon name.\nCreate an icon handle from its path.\nCreate an image handle from memory.\nCreate an image handle from RGBA data, where you must …\nCreate a SVG handle from memory.\nCreate an <code>Icon</code> from a pre-existing <code>Handle</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of icon to locate in an XDG icon path.\nSets the <code>prefer_svg</code> field of this struct.\nPrioritizes SVG over PNG\nSets the <code>scale</code> field of this struct.\nRestrict the lookup to a given scale.\nSets the <code>size</code> field of this struct.\nRestrict the lookup to a given size.\nSets the <code>symbolic</code> field of this struct.\nSets the <code>symbolic</code> field of this struct.\nWhether the icon is symbolic or not.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nThe default class produced by the <code>Catalog</code>.\nThe icon <code>Color</code> of the container.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nA handle pointing to some encoded image bytes in-memory.\nImage filtering strategy.\nA handle of some image data.\nA frame that displays an image while keeping aspect ratio.\nBilinear interpolation.\nNearest neighbor.\nA file handle. The image data will be read from the file …\nA handle pointing to decoded image pixels in RGBA format.\nA frame that displays an image with the ability to zoom …\nSets the <code>ContentFit</code> of the <code>Viewer</code>.\nDraws an <code>Image</code>\nSets the <code>FilterMethod</code> of the <code>Viewer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an image <code>Handle</code> containing the encoded image data …\nCreates an image <code>Handle</code> pointing to the image of the given …\nCreates an image <code>Handle</code> containing the decoded image …\nSets the height of the <code>Viewer</code>.\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of an <code>Image</code>.\nSets the max scale applied to the image of the <code>Viewer</code>.\nSets the min scale applied to the image of the <code>Viewer</code>.\nCreates a new <code>Viewer</code> with the given <code>State</code>.\nSets the padding of the <code>Viewer</code>.\nSets the percentage the image of the <code>Viewer</code> will be scaled …\nZoom and pan on an image.\nCreates a new <code>Viewer</code> with the given image <code>Handle</code>.\nSets the width of the <code>Viewer</code>.\nThe height of the image.\nThe id of this handle.\nThe pixels.\nThe width of the image.\nThe local state of a <code>Viewer</code>.\nA frame that displays an image with the ability to zoom …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns if the cursor is currently grabbed by the <code>Viewer</code>.\nCreates a new <code>State</code>.\nReturns the bounds of the underlying image, given the …\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nSets the content alignment for the horizontal axis of the …\nSets the content alignment for the vertical axis of the …\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nCenters the contents in the horizontal and vertical axis …\nCenters the contents in the horizontal axis of the …\nCenters the contents in the vertical axis of the …\nSets the style of the <code>LayerContainer</code>.\nThe default class produced by the <code>Catalog</code>.\nSets the height of the <code>LayerContainer</code>.\nThe icon <code>Color</code> of the container.\nSets the [<code>Layer</code>] of the <code>LayerContainer</code>.\nSets the maximum height of the <code>LayerContainer</code> in pixels.\nSets the maximum width of the <code>LayerContainer</code>.\nSets the <code>Padding</code> of the <code>LayerContainer</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nSets the width of the [<code>self.</code>].\nSets the style variant of this [<code>Circular</code>].\nRepresents a button menu item.\nRepresents a button menu item that is disabled.\nRepresents a checkbox menu item.\nThe condition of when to close a menu\nRepresents a divider between menu items.\nDynamic tries to automatically choose the proper item …\nRepresents a folder menu item.\nDraw the full path,\nRepresents a menu item that performs an action when …\nThe height of an item\nThe width of an item\nOmit the active item if it’s not a menu\nA <code>MenuBar</code> collects <code>MenuTree</code>s and handles all the layout, …\nOmit the active item(the last item in the path)\nMethods for drawing path highlight\nStatic tries to use the width value of each menu(menu tree …\nStatic tries to use <code>MenuTree.height</code> as item height, when it…\nNested menu is essentially a tree of items, a menu is a …\nUse uniform width\nUse uniform height.\nA <code>MenuBar</code> collects <code>MenuTree</code>s and handles all the layout, …\nSets the expand value for each menu’s check bounds\nClose menus when the cursor clicks inside the check bounds\nClose menus when the cursor clicks outside the check bounds\n<code>CloseCondition</code>\nMoves each menu in the horizontal open direction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>MenuBar</code>\nSets the height of the menu tree. See <code>ItemHeight</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ItemHeight</code>\n<code>ItemWidth</code>\nCreate a list of menu items from a vector of <code>MenuItem</code>.\nClose menus when the cursor moves outside the check bounds\nMoves all the menus in the vertical open direction\nCreates a new <code>MenuBar</code> with the given menu roots\nCreate a new menu tree from a widget\nSets the <code>Padding</code> of the <code>MenuBar</code>\nSets the method for drawing path highlight\nCreate a root menu item.\nSets the spacing between menu roots\nSets the style of the menu bar and its menus\nSets the width of the <code>MenuBar</code>\nSets the width of the menu tree. See <code>ItemWidth</code>\nCreate a menu tree from a widget and a vector of sub trees\n<code>MenuAction</code> is a trait that represents an action in a menu.\nThe type of message that will be produced when the action …\nReturns a message of type <code>Self::Message</code> when the action is …\nRepresents a combination of a key and modifiers. It is …\nRepresents the modifier keys on a keyboard.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key for the key binding.\nChecks if the given key and modifiers match the <code>KeyBind</code>.\nA vector of modifiers for the key binding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPre-convert this widget into the <code>Container</code> widget that it …\nNavigation side panel for switching between views.\nNavigation side panel for switching between views. Can …\nEmitted when a tab close button is pressed.\nEmitted when a button is right-clicked.\nHandle the dnd drop event.\nHandle the dnd enter event.\nHandle the dnd leave event.\nEmitted when the middle mouse button is pressed on a …\nAll panes are visible\nA fixed reference line for the measurement of coordinates.\nBottom edge.\nA <code>Pane</code> was picked and then dropped outside of other <code>Pane</code> …\nThe theme catalog of a <code>PaneGrid</code>.\nCenter region.\nThe item class of this <code>Catalog</code>.\nThe arrangement of a <code>PaneGrid</code>.\nThe content of a <code>Pane</code>.\nThe visible contents of the <code>PaneGrid</code>\nThe controls of a <code>Pane</code>.\nA four cardinal direction.\n↓\nAn event produced during a drag and drop interaction of a …\nA pane that can be dragged.\nA <code>Pane</code> was dropped on top of another <code>Pane</code>.\nThe edges of an area.\nAn <code>Edge</code> of the full <code>PaneGrid</code>.\nEdge region.\nThe appearance of a highlight of the <code>PaneGrid</code>.\nThe horizontal axis: —\n←\nLeft edge.\nA line.\nA maximized pane is visible\nA layout node of a <code>PaneGrid</code>.\nA rectangular region in a <code>PaneGrid</code> used to display widgets.\nA <code>Pane</code>.\nThe region of this <code>Node</code> is taken by a <code>Pane</code>.\nA single <code>Pane</code> of the <code>PaneGrid</code>.\nA collection of panes distributed using either vertical or …\nA <code>Pane</code> was picked for dragging.\nThe region of a <code>Pane</code>.\nAn event produced during a resize interaction of a <code>PaneGrid</code>…\n→\nRight edge.\nA divider that splits a region in a <code>PaneGrid</code> into two …\nA split of the available space.\nThe region of this <code>Node</code> is split into two.\nThe state of a <code>PaneGrid</code>.\nThe appearance of a <code>PaneGrid</code>.\nA styling function for a <code>PaneGrid</code>.\nThe <code>Target</code> area a pane can be dropped on.\nThe title bar of a <code>Pane</code>.\nTop edge.\n↑\nThe vertical axis: |\nReturns the adjacent <code>Pane</code> of another <code>Pane</code> in the given …\nSets whether or not the <code>controls</code> attached to this <code>TitleBar</code> …\nThe <code>Background</code> of the pane region.\nThe <code>Border</code> of the pane region.\nReturns whether the <code>Draggable</code> with the given <code>Layout</code> can be …\nSets the style class of the <code>Content</code>.\nSets the style class of the <code>TitleBar</code>.\nCloses the given <code>Pane</code> and returns its internal state and …\nThe <code>Color</code> of the <code>Line</code>.\nSets the controls of the <code>TitleBar</code>.\nThe default style of a <code>PaneGrid</code>.\nThe default class produced by this <code>Catalog</code>.\nDraws the <code>Content</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDraws the <code>TitleBar</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDrops the given <code>Pane</code> into the provided <code>Target</code>.\nCreates a new <code>Controls</code> with a full and compact variant. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal state of the given <code>Pane</code>, if it exists.\nReturns the internal state of the given <code>Pane</code> with …\nThe appearance of a hovered region highlight.\nThe appearance of a hovered split.\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the amount of panes in the <code>State</code> is 0.\nReturns whether the mouse cursor is over the pick area of …\nReturns an iterator over all the panes of the <code>State</code>, …\nReturns an iterator over the values of the <code>Contents</code>\nReturns a mutable iterator over all the panes of the <code>State</code>,\nReturns the layout of the <code>State</code>.\nReturns the layout <code>Node</code> of the <code>Contents</code>\nReturns the total amount of panes in the <code>State</code>.\nMaximize the given <code>Pane</code>. Only this pane will be rendered …\nReturns the maximized <code>Pane</code> of the <code>PaneGrid</code>.\nMove <code>Pane</code> to an <code>Edge</code> of the <code>PaneGrid</code>.\nCreates a new <code>Content</code> with the provided body.\nCreates a new <code>Controls</code> with the given content.\nCreates a new <code>TitleBar</code> with the given content.\nCreates a new <code>State</code>, initializing the first pane with the …\nSets the <code>Padding</code> of the <code>TitleBar</code>.\nReturns the rectangular region for each <code>Pane</code> in the <code>Node</code> …\nThe panes of the <code>PaneGrid</code>.\nThe appearance of a picked split.\nThe new ratio of the <code>Split</code>.\nResizes two panes by setting the position of the provided …\nRestore the currently maximized <code>Pane</code> to it’s normal …\nSplits the provided <code>Rectangle</code> on the current <code>Axis</code> with the …\nSplits the given <code>Pane</code> into two in the given <code>Axis</code> and …\nThe <code>Split</code> that is being dragged for resizing.\nCalculates the bounds of the split line in a <code>Rectangle</code> …\nReturns the axis, rectangular region, and ratio for each …\nSplit a target <code>Pane</code> with a given <code>Pane</code> on a given <code>Region</code>.\nReturns an iterator over each <code>Split</code> in this <code>Node</code>.\nThe state of a <code>PaneGrid</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Content</code>.\nSets the style of the <code>TitleBar</code>.\nSwaps the position of the provided panes in the <code>State</code>.\nSets the <code>TitleBar</code> of the <code>Content</code>.\nThe width of the <code>Line</code>.\nCreates a new <code>State</code> with the given <code>Configuration</code>.\nThe left/top <code>Configuration</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Configuration</code> of the split.\nThe ratio of the split in [0.0, 1.0].\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe <code>Target</code> where the picked <code>Pane</code> was dropped on.\nThe left/top <code>Node</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Node</code> of the split.\nThe <code>Split</code> of this <code>Node</code>.\nThe ratio of the split in [0.0, 1.0].\nThe current action of a <code>PaneGrid</code>.\nA <code>Pane</code> in the <code>PaneGrid</code> is being dragged.\nThe <code>PaneGrid</code> is idle.\nThe internal state of a <code>PaneGrid</code>.\nA <code>Split</code> in the <code>PaneGrid</code> is being dragged.\nThe state of a <code>PaneGrid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>Internal</code> state of a <code>PaneGrid</code> from a …\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe layout <code>Node</code> of the <code>Internal</code> state\nThe panes of the <code>PaneGrid</code>.\nReturns the current <code>Pane</code> that is being dragged, if any.\nReturns the current <code>Split</code> that is being dragged, if any.\nThe <code>Axis</code> of the <code>Split</code>.\nThe starting <code>Point</code> of the drag interaction.\nThe <code>Pane</code> being dragged.\nThe <code>Split</code> being dragged.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nA container which displays overlays when a popup widget is …\nThe appearance of a container.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe icon <code>Color</code> of the container.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA modal popup intercepts user inputs while a popup is …\nEmitted when the popup is closed.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nThe theme catalog of a <code>ProgressBar</code>.\nThe item class of the <code>Catalog</code>.\nA bar that displays progress.\nThe appearance of a progress bar.\nA styling function for a <code>ProgressBar</code>.\nThe <code>Background</code> of the progress bar.\nThe <code>Background</code> of the bar of the progress bar.\nThe <code>Border</code> of the progress bar.\nThe danger style of a <code>ProgressBar</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe primary style of a <code>ProgressBar</code>.\nThe secondary style of a <code>ProgressBar</code>.\nThe <code>Style</code> of a class with the given status.\nThe success style of a <code>ProgressBar</code>.\nThe theme catalog of a <code>Radio</code>.\nThe item class of the <code>Catalog</code>.\nThe default size of a <code>Radio</code> button.\nThe default spacing of a <code>Radio</code> button.\nA circular button representing a choice.\nThe default class produced by the <code>Catalog</code>.\nCreates a new <code>Radio</code> button.\nSets the size of the <code>Radio</code> button.\nSets the spacing between the <code>Radio</code> button and the text.\nThe <code>Style</code> of a class with the given status.\nSets the width of the <code>Radio</code> button.\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe appearance of a container.\nget the a11y nodes for the widget\nSets the content alignment for the horizontal axis of the …\nSets the content alignment for the vertical axis of the …\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nCenters the contents in the horizontal and vertical axis …\nCenters the contents in the horizontal axis of the …\nCenters the contents in the vertical axis of the <code>Container</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Container</code>.\nThe icon <code>Color</code> of the container.\nSet to true to ignore parent container bounds when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum height of the <code>Container</code> in pixels.\nSets the maximum width of the <code>Container</code>.\nSets the <code>Padding</code> of the <code>Container</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Container</code>.\nThe text <code>Color</code> of the container.\nSets the width of the [<code>self.</code>].\nA container which aligns its children in a row.\nA pre-allocated <code>row</code>.\nA <code>row</code> that will be assigned an <code>Iterator</code> of children.\nAppearance of the segmented button.\nConstructs a new item for the <code>ModelBuilder</code>.\nA unique ID for an item in the <code>Model</code>.\nA newly-inserted item which may have additional actions …\nHorizontal <code>SegmentedButton</code>.\nThe iced identifier of a segmented button.\nAppearance of an item in the segmented button.\nAppearance of an item based on its status.\nThe model held by the application, containing the unique …\nA builder for a <code>Model</code>.\n<code>Model&lt;MultiSelect&gt;</code> permits multiple keys to be active at a …\nMulti-select variant of an <code>EntityMut</code>.\nA model for multi-select button selection.\nAssociates extra data with an external secondary map.\nA conjoined group of items that function together as a …\nIsolates variant-specific behaviors from <code>SegmentedButton</code>.\nDescribes a type that has selectable items.\n<code>Model&lt;SingleSelect&gt;</code> Ensures that only one key may be …\nSingle-select variant of an <code>EntityMut</code>.\nA model for single-select button selection.\nAssociates extra data with an external sparse secondary …\nThe supported style of the <code>StyleSheet</code>.\nDefines the <code>Appearance</code> of a segmented button.\nVertical <code>SegmentedButton</code>.\nActivate an item.\nActivates the newly-inserted item.\nActivates the newly-inserted item.\nActivates the item in the model.\nActivates the item at the given position, returning true …\nThe ID of the active item.\nThe IDs of the active items.\nGet an immutable reference to the data associated with the …\nGet a mutable reference to the data associated with the …\nConsumes the builder and returns the model.\nCreates a builder for initializing a model.\nAlignment of button contents.\nDesired height of a button.\nPadding around a button.\nSpacing between icon and text in button.\nRemoves all items from the model.\nDefines that the close button should appear\nShows a close button for this item.\nShows or hides the item’s close button.\nThe icon used for the close button.\nCheck if an item exists in the map.\nAssigns extra data to the item.\nAssociates data with the item.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nRemoves a specific data type from the item.\nAssociates data with the item.\nDeactivate an item.\nDeactivates the active item.\nDeactivates the item in the model.\nWhether to place dividers between buttons.\nEnable or disable an item.\nGet the item that is located at a given position.\nA command that focuses a segmented item stored in a widget.\nDesired font for active tabs.\nDesired font for hovered tabs.\nDesired font for inactive tabs.\nSize of the font.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drag id of the destination.\nDesired height of the widget.\nHorizontal implementation of the <code>SegmentedButton</code>.\nThe horizontal <code>Appearance</code> of the segmented button.\nDefines an icon for the item.\nDefine an icon for the item.\nImmutable reference to the icon associated with the item.\nRemoves the icon from an item.\nSets a new icon for an item.\nReturns the ID of the item that was inserted.\niced widget ID\nSpacing for each indent.\nInserts a new item and its associated data into the model.\nInserts a new item in the model.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the item is active.\nCheck if the given ID is the active ID.\nWhether the item should contain a close button.\nCheck if the item is enabled.\nIterates across items in the model in the order that they …\nGet number of items in the model.\nLineHeight of the font.\nMaximum width of a button.\nMinimum width of a button.\nCreates a custom <code>Id</code>.\nEmitted when a tab is pressed.\nEmitted when a tab close button is pressed.\nEmitted when a button is right-clicked.\nHandle the dnd drop event.\nHandle the dnd enter event.\nHandle the dnd leave event.\nEmitted when the middle mouse button is pressed on a …\nPadding of the whole widget.\nDefine the position of the newly-inserted item.\nDefine the position of the item.\nThe position of the item in the model.\nChange the position of an item in the model.\nSwap the position with another item in the model.\nSwap the position with another item in the model.\nSwap the position of two items in the model.\nRemoves an item from the model.\nScrolling switches focus between tabs.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external sparse secondary …\nAssociates extra data with an external sparse secondary …\nShow the close icon only when item is hovered.\nDesired spacing between items.\nStyle to draw the widget in.\nDefines the text for the item.\nDefines the text for the item.\nImmutable reference to the text assigned to the item.\nRemoves text from an item.\nSets new text for an item.\nCreates a unique <code>Id</code>.\nGet the appearance for this variant of the widget.\nCalculates the bounds for visible buttons.\nCalculates the layout of this variant.\nVertical implementation of the <code>SegmentedButton</code>.\nThe vertical <code>Appearance</code> of the segmented button.\nDesired width of the widget.\nCalls a function with the ID\nCalls a function with the ID without consuming the wrapper.\nA selection of multiple choices appearing as a conjoined …\nA selection of multiple choices appearing as a conjoined …\nA column with a predefined style for creating a settings …\nA builder for a settings item.\nCreates a builder for an item, beginning with the title.\nAssigns a control to the item.\nA description to display beneath the title.\nAssigns a control which flexes.\nA settings item aligned in a flex row\nA settings item aligned in a flex row\nReturns the argument unchanged.\nA custom icon to display before the text.\nCalls <code>U::from(self)</code>.\nA settings item aligned in a row\nA settings item aligned in a row\nDescribes the item being controlled.\nAdd a child element to the section’s list column.\nAdd a child element to the section’s list column, if <code>Some</code>…\nExtends the <code>Section</code> with the given children.\nReturns the argument unchanged.\nDefine an optional custom header for the section.\nCalls <code>U::from(self)</code>.\nA section within a settings view column.\nDefine an optional title for the section.\nA section within a settings view column.\nA section with a pre-defined list column.\nThe <code>Slider</code> can be interacted with.\nThe appearance of slider breakpoints.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe appearance of a slider rail\nThe background color of the rail\nA rectangular shape.\nAn horizontal bar and a handle that selects a single value …\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nThe <code>Background</code> of the handle.\nThe backgrounds of the rail of the slider.\nThe border of the rail.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe color of the slider breakpoint.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe appearance of the <code>Handle</code> of the slider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe width of the stroke of a slider rail.\nChanges the <code>HandleShape</code> of the <code>Style</code> to a circle with the …\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nHorizontal spin button widget.\nVertical spin button widget.\nDefines the [<code>Appearance</code>] of a cards.\nAppearance of the cards.\nThe default [<code>Appearance</code>] of the cards.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe theme catalog of an <code>Svg</code>.\nThe item class of the <code>Catalog</code>.\nA handle of Svg data.\nThe <code>Svg</code> is being hovered.\nThe <code>Svg</code> is idle.\nThe possible status of an <code>Svg</code>.\nThe appearance of an <code>Svg</code>.\nA styling function for an <code>Svg</code>.\nA vector graphics image.\nThe <code>Color</code> filter of an <code>Svg</code>.\nReturns a reference to the SVG <code>Data</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an SVG <code>Handle</code> from raw bytes containing either an …\nCreates an SVG <code>Handle</code> pointing to the vector image of the …\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Style</code> of a class with the given status.\nA collection of tabs for developing a tabbed interface.\nA collection of tabs for developing a tabbed interface.\nUnique key type for items in the table\nActivates the item in the model.\nActivates the item at the given position, returning true …\nThe ID of the active item.\nThe IDs of the active items.\nGet an immutable reference to the data associated with the …\nGet a mutable reference to the data associated with the …\nRemoves all items from the model.\nCheck if an item exists in the map.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nRemoves a specific data type from the item.\nAssociates data with the item.\nDeactivates the item in the model.\nDeactivates the active item.\nEnable or disable an item.\nGet the item that is located at a given position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the sort data\nInserts a new item in the model.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given ID is the active ID.\nCheck if the item is enabled.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nAssociates data with the item.\nIterates across items in the model in the order that they …\nThe position of the item in the model.\nChange the position of an item in the model.\nSwap the position of two items in the model.\nRemoves an item from the model.\nDescribes logic specific to the single-select and …\nSorts items in the model, this should be called before it …\nImplementation of std::fmt::Display allows user to …\nFunction that gets the width of the data\nA newly-inserted item which may have additional actions …\nActivates the newly-inserted item.\nAssociates data with the item.\nReturns the argument unchanged.\nReturns the ID of the item that was inserted.\nCalls <code>U::from(self)</code>.\nDefines the text for the item.\nDefine the position of the item.\nSwap the position with another item in the model.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external sparse secondary …\nCalls a function with the ID without consuming the wrapper.\n<code>Model&lt;MultiSelect&gt;</code> permits multiple keys to be active at a …\nDescribes a type that has selectable items.\n<code>Model&lt;SingleSelect&gt;</code> Ensures that only one key may be …\nActivate an item.\nDeactivate an item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the item is active.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA bunch of text.\nAvailable presets for text typography\n<code>Text</code> widget with the Body typography preset.\n<code>Text</code> widget with the Caption typography preset.\n<code>Text</code> widget with the Caption Heading typography preset.\nReturns the argument unchanged.\n<code>Text</code> widget with the Heading typography preset.\nCalls <code>U::from(self)</code>.\n<code>Text</code> widget with the Monotext typography preset.\nCreates a new <code>Text</code> widget with the provided content.\n<code>Text</code> widget with the Title 1 typography preset.\n<code>Text</code> widget with the Title 2 typography preset.\n<code>Text</code> widget with the Title 3 typography preset.\n<code>Text</code> widget with the Title 4 typography preset.\nAn interaction with an <code>Editor</code>.\nThe <code>TextEditor</code> can be interacted with.\nDelete the previous character.\nDelete the previous character.\nA binding to an action in the <code>TextEditor</code>.\nThe theme catalog of a <code>TextEditor</code>.\nThe item class of the <code>Catalog</code>.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nCopy the selection of the <code>TextEditor</code>.\nProduce the given message.\nCut the selection of the <code>TextEditor</code>.\nDelete the next character.\nDelete the next character.\nThe <code>TextEditor</code> cannot be interacted with.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nBreak the current line.\nThe <code>TextEditor</code> is focused.\nMove to the start of the line.\nThe <code>TextEditor</code> is being hovered.\nThe identifier of a <code>TextEditor</code>.\nInsert the given character.\nInsert the given character.\nA key press.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nPaste the clipboard contents in the <code>TextEditor</code>.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect text with a given <code>Motion</code>.\nSelect the entire buffer.\nSelect the entire buffer.\nSelect the line at the current cursor.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nSelect the word at the current cursor.\nA sequence of bindings to execute.\nThe state of a <code>TextEditor</code>.\nThe possible status of a <code>TextEditor</code>.\nThe appearance of a text input.\nA styling function for a <code>TextEditor</code>.\nA multi-line text input.\nUnfocus the <code>TextEditor</code>.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nReturns the current cursor position of the <code>Content</code>.\nThe default style of a <code>TextEditor</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the <code>Direction</code> of the <code>Motion</code>.\nProduces a <code>Task</code> that focuses the <code>TextEditor</code> with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default <code>Binding</code> for the given key press.\nThe <code>Color</code> of the icon of the text input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Action</code> is an editing action.\nReturns whether the <code>TextEditor</code> is currently focused or not.\nThe key pressed.\nReturns the text of the line at the given index, if it …\nReturns the amount of lines of the <code>Content</code>.\nReturns an iterator of the text of the lines in the <code>Content</code>…\nThe state of the keyboard modifiers.\nCreates an empty <code>Content</code>.\nPerforms an <code>Action</code> on the <code>Content</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the selected text of the <code>Content</code>.\nThe <code>Color</code> of the selection of the text input.\nThe current <code>Status</code> of the <code>TextEditor</code>.\nThe <code>Style</code> of a class with the given status.\nReturns the text of the <code>Content</code>.\nThe text produced by the key press.\nThe <code>Color</code> of the value of the text input.\nWidens the <code>Motion</code>, if possible.\nCreates a <code>Content</code> with the given text.\nThe amount of pixels to scroll.\nThe appearance of a text input.\nThe state of a <code>TextInput</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a text input.\nA field that can be filled with text.\nA string which can be sent to the clipboard or …\nProduces the style of an active text input.\nThe <code>Background</code> of the text input.\nThe border <code>Color</code> of the text input.\nThe border offset\nThe border radius of the text input.\nThe border width of the text input.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nProduces the style of a disabled text input.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nA text label which can transform into a text input on …\nProduces the style of an errored text input.\nProduces a <code>Task</code> that focuses the <code>TextInput</code> with the given …\nFocuses the <code>TextInput</code>.\nProduces the style of a focused text input.\nCreates a new <code>State</code>, representing a focused <code>TextInput</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces the style of an hovered text input.\nProduces the style of an hovered text input.\nThe icon <code>Color</code> of the text input.\nCreates a new inline <code>TextInput</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>TextInput</code> is currently focused or not.\nThe label <code>Color</code> of the text input.\nComputes the layout of a <code>TextInput</code>.\nComputes the current <code>mouse::Interaction</code> of the <code>TextInput</code>.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nThe placeholder text <code>Color</code>.\nCreates a new search <code>TextInput</code>.\nCreates a new secure <code>TextInput</code>.\nProduces a <code>Task</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nThe selected fill <code>Color</code> of the text input.\nReturns the current value of the selected text in the …\nThe text <code>Color</code> of the text input.\nThe text <code>Color</code> of the text input.\nCreates a new <code>TextInput</code>.\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>TextInput</code> …\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nReturns the <code>State</code> of the <code>Cursor</code>.\nThe end of the selection\nThe start of the selection\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value of a <code>TextInput</code>.\nReturns the argument unchanged.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns the total amount of graphemes in the <code>Value</code>.\nCreates a new <code>Value</code> from a string slice.\nReturns the position of the next end of a word from the …\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nReturns a new <code>Value</code> containing the graphemes until the …\nAction that can be triggered by the user.\nDuration for the <code>Toast</code>\nRepresent the data used to display a <code>Toast</code>\nSet the <code>Action</code> of this <code>Toast</code>\nSet the <code>Duration</code> of this <code>Toast</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Toast</code> with the provided message.\nAdd a new <code>Toast</code>\nRemove a <code>Toast</code>\nCreate a new Toaster widget.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nThe tooltip will appear on the top of the widget.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Slider</code> can be interacted with.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe background color of the rail\nA rectangular shape.\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nAn vertical bar and a handle that selects a single value …\nThe <code>Background</code> of the handle.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nThe appearance of the <code>Handle</code> of the slider.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nA custom button that has the desired default spacing and …\nThe message to emit on button press.\nPanics\nPanics")