searchState.loadedDescShard("cosmic", 8, "Creates a scale transform.\nScale font size and line height\nFallbacks to use per script\nGet the current scroll location\nGet the current selection position\nGet the bounds of the current selection\nGet the bounds of the current selection\nGet the bounds of the current selection\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the text alignment\nSet attributes list\nEnable or disable automatic indentation\nSet the current cursor\nSet line ending\nSet line metadata. This is stored until the next line reset\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet monospace width monospace glyphs should be resized to …\nSet the <code>Buffer</code> redraw flag\nSet the <code>Buffer</code> redraw flag\nSet the <code>Buffer</code> redraw flag\nSet redraw needed flag\nSet text of buffer, using an iterator of styled spans …\nSet text of buffer, using an iterator of styled spans …\nSet the current scroll location\nSet the current selection position\nSet the current buffer dimensions\nSet the current buffer dimensions\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet tab width (number of spaces between tab stops)\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet text of buffer, using provided attributes for each …\nSet text and attributes list\nSet text of buffer, using provided attributes for each …\nMoves the value from <code>Self::Used</code> to <code>Self::Unused</code>.\nSets the value to <code>Self::Used</code>.\nSet the current <code>Wrap</code>\nSet the current <code>Wrap</code>\nShape line, will cache results\nShape lines until scroll, after adjusting scroll if the …\nShape lines until scroll, after adjusting scroll if the …\nGet line shaping cache\nShape lines until cursor, also scrolling to include cursor …\nShape lines until cursor, also scrolling to include cursor …\nShape lines until scroll\nShape lines until scroll\nGet the current buffer dimensions (width, height)\nCreates a skew transform.\nSource of the image.\nGet the current attribute spans\nGet an iterator over the current attribute spans\nSplit attributes list at an offset\nSplit off new line at index\nCursor indicating start of change\nStart index of cluster in original line\nStart collecting change\nSet Stretch\nSet Style\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current tab width\nGet the current <code>tab_width</code>\nTakes the buffered value if in state <code>Self::Unused</code>.\nTakes the cached value if in state <code>Self::Used</code>.\nGet current text\nThe original text line\nText to be inserted or deleted\nReturns a new transform that represents the application of …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns the angle in degrees.\nReturns a numeric representation of a width.\nReturns the angle in radians.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVertical offset with respect to the origin specified when …\nReturns the result of a transformation matrix applied to …\nReturns the result of applying this transform to a point.\nReturns the result of applying this transform to a vector.\nCreates a translation transform.\nRemove anything in the cache with an age older than …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the associated verb for the command.\nPixel offset from the start of the [<code>BufferLine</code>]. This will …\nWidth of hitbox\nWidth of the line\nSet Weight\nGet the width of the <code>ShapeGlyph</code> in pixels, either using …\nGet the width of the <code>ShapeWord</code> in pixels, using the …\nWidth in pixels.\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nEnumerate pixels in an Image, use <code>with_image</code> for better …\nGet the current <code>Wrap</code>\nX offset of hitbox\nInteger component of X offset in line\nBinning of fractional X offset\nX offset in line\nY offset of hitbox\nInteger component of Y offset in line\nBinning of fractional Y offset\nY offset in line\nThe <code>Fallback</code> trait allows for configurable font fallback …\nA platform-specific font fallback list, for Unix.\nFallbacks to use after any script specific fallbacks\nFallbacks to never use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFallbacks to use per script\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nThe sole criterion of a monospace font is that all glyphs …\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nAll currently defined flags\nAll currently defined flags.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA feature tag with an accompanying range specifying on …\nReference to an in-memory font.\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA language tag.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nType alias for a normalized variation coordinate.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>SAFE_TO_INSERT_TATWEEL</code> glyph-flag …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nA key used for selecting a shape plan.\nA configured shaper.\nBuilder type for constructing a <code>Shaper</code>.\nData required for shaping with a single font.\nAn instance of a variable font.\nAn OpenType tag.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuilds the shaper with the current configuration.\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the underlying set of normalized coordinates.\nReturns the currently active normalized coordinates.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nThe direction of the text.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSets the features to use for this shape plan key.\nGet the flags for this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new shaper instance for the given font from the …\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new shaper instance for the given font using the …\nParses a <code>Feature</code> form a string.\nCreates a new shaper instance for the given font from the …\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSets an optional instance for the shaper.\nSets the instance to use for this shape plan key.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nThe language of the text.\nSets the language to use for this shape plan key.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nReturns true if this key is a match for the given shape …\nCreate a new <code>UnicodeBuffer</code>.\nCreates new cached shaper data for the given font.\nReturns a plan that can be used for shaping any buffer …\nCreates a new shape plan key with the given script and …\nCreate a new <code>Feature</code> struct.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSets the point size for the shaper.\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nEnsures that the buffer can hold at least <code>size</code> codepoints.\nResets clusters.\nIn scripts that use elongation (Arabic, Mongolian, Syriac, …\nPredefined scripts.\nGet the ISO15924 script tag.\nThe script of the text.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nResets the instance for the given font and normalized …\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nResets the instance for the given font using the variation …\nSet the glyph value to replace not-found …\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nResets the instance for the given font and variation …\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nReturns a builder for constructing a new shaper with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns script’s tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns font’s units per EM.\nIndicates that if input text is broken at the beginning of …\nIndicates that if input text is changed on one side of the …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …\nAxis of variation in a variable font.\nCollection of axes in a variable font.\nGlyph names are sourced from the <code>CFF</code> table.\nReference to an in-memory font.\nA 32-bit glyph identifier.\nA 16-bit glyph identifier.\nThe name of a glyph.\nSpecifies the chosen source for glyph names.\nMapping from glyph identifiers to names.\nInterface for types that can provide font metadata.\nThe identifier reserved for unknown glyphs\nThe identifier reserved for unknown glyphs.\nNamed instance of a variation.\nCollection of named instances in a variable font.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nGlyph names are sourced from the <code>post</code> table.\nGlyph names are synthesized in the format <code>gidDDD</code> where <code>DDD</code> …\nAn OpenType tag.\nReturns the underlying name as a string.\nPrimary attributes typically used for font classification …\nReturns the primary attributes for font classification– …\nReturns the primary attributes for font classification– …\nReturns the collection of variation axes.\nReturns the collection of variation axes.\nBitmap strikes and glyphs.\nReturns a collection of bitmap strikes.\nReturns a collection of bitmap strikes.\nMapping of characters (codepoints, not graphemes) to …\nReturns the character to nominal glyph identifier mapping.\nReturns the character to nominal glyph identifier mapping.\nDrawing color glyphs.\nReturns the underlying font data.\nReturns the default value of the axis.\nDraws the outline glyph with the given settings and emits …\nReturns the size (in bytes) of the temporary memory …\nGiven an iterator of variation settings in user space, …\nBasic representation of an in-memory font resource.\nReturns an iterator over all of the available fonts in the …\nReturns the underlying source format for this outline.\nReturns the underlying format of the source outline tables.\nReturns true when the font supports hinting at fractional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a tag from raw big-endian bytes.\nCreates a new reference to an in-memory font at the …\nConstruct a new <code>Tag</code> from a big-endian <code>u32</code>, without …\nReturns the outline for the given glyph identifier.\nReturns the name for the given glyph identifier.\nReturns the axis at the given index.\nReturns the instance at the given index.\nReturns the axis with the given tag.\nReturns the glyph identifier for this outline.\nReturns the glyph specific metrics for the specified size …\nReturns the glyph specific metrics for the specified size …\nReturns the mapping from glyph identifiers to names.\nReturns the mapping from glyph identifiers to names.\nReturns a value indicating whether the outline has hinting …\nReturns a value indicating if the outline may contain …\nReturns the index of the axis in its owning collection.\nHelpers for selecting a font size and location in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the raw byte array representing this tag.\nReturns true if the collection is empty.\nReturns true if the collection is empty.\nReturns true if the axis should be hidden in user …\nReturns true if the glyph name was synthesized, i.e. not …\nReturns an iterator over all of the outline glyphs in the …\nReturns an iterator yielding the identifier and name for …\nReturns an iterator over the axes in the collection.\nReturns an iterator over the instances in the collection.\nReturns the number of variation axes in the font.\nReturns the number of instances in the collection.\nReturns an iterator over the collection of localized …\nReturns an iterator over the collection of localized …\nGiven an iterator of variation settings in user space, …\nComputes a location in normalized variation space for this …\nGiven an iterator of variation settings in user space, …\nComputes a location in normalized variation space for this …\nReturns the maximum value of the axis.\nGlobal font and glyph specific metrics.\nReturns the global font metrics for the specified size and …\nReturns the global font metrics for the specified size and …\nReturns the minimum value of the axis.\nReturns the localized string identifier for the name of …\nReturns the collection of named variation instances.\nReturns the collection of named variation instances.\nConstruct a new <code>GlyphId16</code>.\nConstruct a new <code>GlyphId</code>.\nConstruct a <code>Tag</code> from raw bytes.\nCreates a new outline collection for the given font.\nCreates a new object for accessing glyph names from the …\nCreates a new axis collection from the given font.\nCreates a new instance collection from the given font.\nCreates a new reference to an in-memory font backed by the …\nAttempt to create a <code>Tag</code> from raw bytes.\nReturns a normalized coordinate for the given user …\nReturns the number of glyphs in the font.\nLoading, scaling and hinting of glyph outlines.\nReturns the collection of scalable glyph outlines.\nReturns the collection of scalable glyph outlines.\nReturns the string identifier for the PostScript name of …\nReturns true if the interpreter engine should be used for …\nUseful collection of common types suitable for glob …\nReturns true when the interpreter engine <em>must</em> be used for …\nDefinitions for specifying variations and typographic …\nReturns the chosen source for glyph names.\nLocalized strings describing font names and other metadata.\nReturns the string identifier for the subfamily name of …\nReturns the data for the table with the specified tag, if …\nReturns the associated table directory.\nReturns the tag that identifies the axis.\nReturn the memory representation of this tag.\nThe identifier as a u16.\nThe identifier as a u32.\nThe identifier as a u32.\nIf the font is in a TrueType collection (ttc) file, …\nReturns an iterator over the ordered sequence of user …\nCheck that the tag conforms with the spec.\nCreates a new outline collection for the given font and …\nStretch, style and weight attributes of a font.\nWeight value of 900.\nWeight value of 700.\nWidth that is 75% of normal.\nWidth that is 125% of normal.\nWeight value of 950.\nWeight value of 800.\nWidth that is 62.5% of normal.\nWidth that is 150% of normal.\nWeight value of 200.\nGenerally a slanted style, originally based on …\nWeight value of 300.\nWeight value of 500.\nWidth that is 100% of normal.\nWeight value of 400.\nAn upright or “roman” style.\nOblique (or slanted) style with an optional angle in …\nWeight value of 600.\nWidth that is 87.5% of normal.\nWidth that is 112.5% of normal.\nWeight value of 350.\nVisual width of a font– a relative change from the …\nVisual style or ‘slope’ of a font.\nWeight value of 100.\nWidth that is 50% of normal.\nWidth that is 200% of normal.\nVisual weight class of a font, typically on a scale from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the stretch, style and weight attributes for the …\nCreates a new stretch attribute with the given ratio.\nCreates a new weight attribute with the given value.\nReturns the stretch attribute as a percentage value.\nReturns the stretch attribute as a ratio.\nReturns the underlying weight value.\nUncompressed 32-bit color bitmap data, pre-multiplied in …\nData content of a bitmap.\nThe format (or table) containing the data backing a set of …\nAn embedded bitmap glyph.\nSet of embedded bitmap glyphs of a specific size.\nSet of strikes, each containing embedded bitmaps of a …\nThe origin is in the bottom-left.\nData representing a single channel alpha mask.\nA single channel alpha mask.\nThe origin point for drawing a bitmap glyph.\nCompressed PNG bitmap data.\nThe origin is in the top-left.\nThe horizontal advance width of the bitmap glyph in …\nOuter glyph bearings in the x direction, given in font …\nOuter glyph bearings in the y direction, given in font …\nNumber of bits-per-pixel. Always 1, 2, 4 or 8.\nThe underlying data of the bitmap glyph.\nRaw bitmap data.\nReturns the format representing the underlying table for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the strike at the given index.\nReturns a bitmap glyph for the given identifier, if …\nReturns the best matching glyph for the given size and …\nThe number of rows in the bitmap.\nInner glyph bearings in the x direction, given in pixels. …\nInner glyph bearings in the y direction, given in pixels. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no available strikes.\nTrue if each row of the data is bit-aligned. Otherwise, …\nReturns an iterator over all available strikes.\nReturns the number of available strikes.\nCreates a new <code>BitmapStrikes</code> for the given font.\nThe placement origin of the bitmap.\nReturns the pixels-per-em (size) of this strike.\nThe assumed pixels-per-em in the x direction.\nThe assumed pixels-per-em in the y direction.\nThe number of columns in the bitmap.\nCreates a new <code>BitmapStrikes</code> for the given font and format.\nMapping of characters to nominal glyph identifiers.\nResult of mapping a codepoint with a variation selector.\nCacheable indices of selected mapping tables for …\nIterator over all mappings of character to nominal glyph …\nThe variation selector should be ignored and the default …\nThe variant glyph mapped by a codepoint and associated …\nIterator over all mappings of character and variation …\nCreates a new character map for the given font using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if a suitable Unicode character mapping is …\nReturns true if a Unicode variation sequence mapping is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a symbol mapping was selected.\nMaps a character to a nominal glyph identifier.\nMaps a character and variation selector to a nominal glyph …\nReturns an iterator over all mappings of codepoint to …\nCreates a new character map from the given font.\nFinds the indices of the most suitable Unicode mapping …\nReturns an iterator over all mappings of character and …\nA fill type of a COLRv1 glyph (solid fill or various …\nA representation of a color glyph that can be painted …\nCollection of color glyphs.\nDistinguishes available color glyph formats.\nA group of required painting callbacks to be provided by …\nA color stop of a gradient.\nCompositeMode enumeration\nExtend enumeration\nA linear gradient, normalized from the P0, P1 and P2 …\nThe specified COLRv1 glyph has been successfully painted …\nSignals success of request to draw a COLRv1 sub glyph from …\nAn error during drawing a COLR glyph.\nA radial gradient, with color stops normalized to the …\nA solid fill with the color specified by <code>palette_index</code>. …\nA sweep gradient, also called conical gradient. The color …\nA transformation matrix to be applied to the drawing …\nThe client does not implement drawing COLRv1 glyphs from …\nAdditional alpha value, to be multiplied with the color …\nReturns the bounding box.\nFill the current clip area with the specified gradient …\nCombined clip and fill operation.\nCombined clip and fill operation.\nCombined clip and fill operation.\nReturns the version of the color table from which this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a color glyph representation for the given glyph …\nReturns the color glyph representation for the given glyph …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new collection of paintable color glyphs for the …\nCreate from a raw scalar.\nCreate from a raw scalar.\nEvaluates the paint graph at the specified location in …\nOptionally implement this method: Draw an unscaled COLRv1 …\nOptionally implement this method: Draw an unscaled COLRv1 …\nOptionally implement this method: Draw an unscaled COLRv1 …\nSpecifies a color from the <code>CPAL</code> table.\nRestore the clip state to the state before a previous …\nMerge the pushed layer down using <code>composite_mode</code> passed to …\nMerge the pushed layer down using <code>composite_mode</code> passed to …\nMerge the pushed layer down using <code>composite_mode</code> passed to …\nAlternative version of <code>push_layer</code> where the <code>composite_mode</code> …\nAlternative version of <code>push_layer</code> where the <code>composite_mode</code> …\nAlternative version of <code>push_layer</code> where the <code>composite_mode</code> …\nRestore the transformation matrix to the state before the …\nApply a clip rectangle specified by <code>clip_rect</code>.\nApply a clip path in the shape of glyph specified by …\nOpen a new layer, and merge the layer down using …\nPush the specified transform by concatenating it to the …\nReference to an in-memory font.\nOrdered sequence of normalized variation coordinates.\nReference to an ordered sequence of normalized variation …\nType for a normalized variation coordinate.\nFont size in pixels per em units.\nReturns the underlying array of normalized coordinates.\nReturns the underlying slice of normalized coordinates.\nReturns a mutable reference to the underlying slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this represents the default location in …\nComputes a linear scale factor for this font size and the …\nCreates a new font size from the given value in pixels per …\nCreates a new sequence of normalized coordinates from the …\nCreates a new location with the given number of normalized …\nReturns the raw size in pixels per em units.\nCreates a new font size for generating unscaled metrics or …\nType for a bounding box with single precision floating …\nMetrics for a text decoration.\nGlyph specific metrics.\nMetrics that apply to all glyphs in a font.\nReturns the advance width for the specified glyph.\nDistance from the baseline to the top of the alignment box.\nAverage width of all non-zero width characters in the font.\nReturns the bounding box for the specified glyph.\nUnion of minimum and maximum extents for all glyphs in the …\nDistance from the baseline to the top of a typical English …\nDistance from the baseline to the bottom of the alignment …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of available glyphs in the font.\nNumber of glyphs in the font.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the font is not proportionally spaced.\nItalic angle in counter-clockwise degrees from the …\nRecommended additional spacing between lines.\nReturns the left side bearing for the specified glyph.\nMaximum advance width of all characters in the font.\nCreates new metrics for the given font, size, and location …\nCreates new glyph metrics from the given font, size, and …\nOffset to the top of the decoration from the baseline.\nMetrics for a strikeout decoration.\nThickness of the decoration.\nMetrics for an underline decoration.\nNumber of font design units per em unit.\nDistance from the baseline to the top of the lowercase “x…\nMaximum extent in the x direction– the right side of a …\nMinimum extent in the x direction– the left side of a …\nMaximum extend in the y direction. In a Y-up coordinate …\nMinimum extent in the y direction. In a Y-up coordinate …\nInformation and adjusted metrics generated while drawing …\nThe automatic hinter that performs just-in-time adjustment …\nSelects the engine based on the same rules that FreeType …\nPostScript outlines sourced from the <code>CFF</code> table.\nPostScript outlines sourced from the <code>CFF2</code> table.\nErrors that may occur when drawing glyphs.\nOptions that define how a glyph is drawn to a pen.\nApplication of hints that are embedded in the font.\nSpecifies the backend to use when applying hints.\nTrueType outlines sourced from the <code>glyf</code> table.\nThe requested glyph was not present in the font.\nSet of derived glyph styles that are used for automatic …\nHarfBuzz style drawing with hints is not supported\nSpecifies the hinting strategy for memory size …\nError occurred during hinting.\nHinting instance that uses information embedded in the …\nConfiguration settings for a hinting instance.\nExceeded memory limits when loading a glyph.\nThe TrueType or PostScript interpreter.\nAn anchor point had invalid indices.\nHinting that is optimized for subpixel rendering with …\nHinting with a lighter touch, typically meaning less …\nStrong hinting style that should only be used for aliased, …\nNo viable sources were available.\nHinting is disabled.\nThe standard smooth hinting mode.\nA scalable glyph outline.\nCollection of scalable glyph outlines.\nSource format for an outline glyph.\nInterface for accepting a sequence of path commands.\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nExceeded a recursion limit when loading a glyph.\nHinting style that is suitable for anti-aliased …\nMode selector for a smooth hinting target.\nDefines the target settings for hinting.\nConversion from outline to path failed.\nGlyph outline contains too many points.\nHinting that is optimized for subpixel rendering with …\nIf present, an adjusted advance width value generated by …\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nSpecifies the hinting engine to use.\nError types associated with outlines.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if the underlying glyph contains flags indicating the …\nCreates settings for a hinted draw operation using hinting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if hinting should actually be applied for …\nEmit a line segment from the current point to (x, y).\nReturns the currently configured normalized location in …\nIf present, an adjusted left side bearing value generated …\nEmit a command to begin a new subpath at (x, y).\nPrecomputes the full set of glyph styles for the given …\nCreates a new embedded hinting instance for the given …\nTypes for collecting the output when drawing a glyph …\nEmit a quadratic bezier segment from the current point …\nResets the hinter state for a new font instance with the …\nReturns the currently configured size.\nReturns the currently configured hinting target.\nDefines the properties of the intended target of a hinted …\nCreates settings for an unhinted draw operation with the …\nBuilder method to associate a user memory buffer to be …\nBuilder method to control nuances of <code>glyf</code> pointstream …\nThe basic mode for smooth hinting.\nIf true, prevents adjustment of the outline in the …\nIf true, TrueType bytecode may assume that the resulting …\nErrors that are specific to PostScript processing.\nContour end point at this index was less than its …\nErrors that may occur when drawing glyphs.\nExpected a cubic off-curve point at this index.\nExpected a quadratic off-curve point at this index.\nExpected a quadratic off-curve or on-curve point at this …\nThe requested glyph was not present in the font.\nHarfBuzz style drawing with hints is not supported\nHinting error with additional context.\nError occurred during hinting.\nExceeded memory limits when loading a glyph.\nAn anchor point had invalid indices.\nNo viable sources were available.\nExpected number of points to == number of flags\nError occurred while loading a PostScript (CFF/CFF2) glyph.\nError occurred when reading font data.\nAn error that occurs when reading font data\nExceeded a recursion limit when loading a glyph.\nConversion from outline to path failed.\nErrors that can occur when converting an outline to a path.\nGlyph outline contains too many points.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClose the current subpath.\nPen that generates the control bounds of a glyph outline.\nDraw a cubic bezier from the current point with control …\nIf the first point is off-curve, check if the last is …\nIf the first point is off-curve, check if the second is …\nDraw a line from the current point to (x, y).\nBegin a new subpath at (x, y).\nPen that drops all drawing output into the ether.\nInterface for accepting a sequence of path commands.\nSingle element of a path.\nStyle for path conversion.\nDraw a quadratic bezier from the current point with a …\nPen that generates SVG style path data.\nReturns the bounding box collected by this pen.\nClears the content of the internal string.\nEmit a command to close the current subpath.\nEmit a cubic bezier segment from the current point with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit a line segment from the current point to (x, y).\nEmit a command to begin a new subpath at (x, y).\nCreates a new SVG pen that formats floating point values …\nCreates a new bounds pen.\nEmit a quadratic bezier segment from the current point …\nCreates a new SVG pen with the given precision (the number …\nReference to an in-memory font.\nA 32-bit glyph identifier.\nReference to an ordered sequence of normalized variation …\nInterface for types that can provide font metadata.\nType for a normalized variation coordinate.\nFont size in pixels per em units.\nAn OpenType tag.\nReturns the primary attributes for font classification– …\nReturns the collection of variation axes.\nReturns a collection of bitmap strikes.\nReturns the character to nominal glyph identifier mapping.\nReturns the glyph specific metrics for the specified size …\nReturns the mapping from glyph identifiers to names.\nReturns an iterator over the collection of localized …\nReturns the global font metrics for the specified size and …\nReturns the collection of named variation instances.\nReturns the collection of scalable glyph outlines.\nAn array of nullable offsets that can be resolved on …\nAn array of offsets that can be resolved on access.\nA collection of fonts.\nReference to the content of a font collection file.\nA type that can compute its size at runtime, based on some …\nEmpty data, useful for some tests and examples\nReference to the content of a font or font collection file.\nA single font.\nA reference to raw binary font data.\nA type that can be read from raw table data.\nA trait for types that require external data in order to …\nReference to an in-memory font.\nReturn the minimum range of the table bytes\nAny offset type.\nA trait for a type that needs additional arguments to be …\nAn error that occurs when reading font data\nA helper trait providing a ‘resolve’ method for …\nA helper trait providing a ‘resolve’ method for offset …\nThe type of the first (length) field of the item.\nThe table’s tag.\nTTC Header\nThe OpenType Table Directory\nAn interface for accessing tables from a font (or …\nRecord for a table in a font.\nTyped access to raw table data.\nA table that has an associated tag.\nA trait for types that have variable length.\nCustom array types\nReturn the data as a byte slice\nChecksum for the table.\nChecksum for the table.\nData structures useful for font work.\nCompute the number of bytes required to represent this …\nReturns the array of entries for the control value table …\nReturns the array of entries for the control value table …\nReturns the array of entries for the control value table …\nReturns an iterator over the fonts contained in the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nResolve the offset at the provided index.\nResolve the offset at the provided index.\nReturns the font in the collection at the specified index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the data has a length of zero bytes.\n<code>true</code> if the array is empty\n<code>true</code> if the array is empty\nReturns true if the collection is empty.\nIterate over all of the offset targets.\nIterate over all of the offset targets.\nReturns an iterator over the fonts in the collection.\nThe length of the data, in bytes\nThe number of offsets in the array\nThe number of offsets in the array\nReturns the number of fonts in the collection.\nLength of the table.\nLength of the table.\nis_long can be optionally provided, if known, otherwise we …\nis_long can be optionally provided, if known, otherwise we …\nis_long can be optionally provided, if known, otherwise we …\nReturn the minimum byte range of this table\nReturn the minimum bytes of this table\nCreate a new <code>FontData</code> with these bytes.\nCreates a new reference to a file representing a font or …\nCreates a new reference to a font collection.\nOffset from the beginning of the font data.\nOffset from the beginning of the font data.\nReturn a reference to this table’s raw data.\nRead an instance of <code>Self</code> from the provided data, …\nInterpret the bytes at the provided offset as a slice of <code>T</code>.\nRead a scalar at the provided location in the data.\nRead a big-endian value at the provided location in the …\nInterpret the bytes at the provided offset as a reference …\nread an item, using the provided args.\nResolve the provided offset from the start of this table.\nReturn a reference to the table’s ‘Shape’ struct.\nReturns self[pos..]\nThe various font tables\nTable identifier.\nTable identifier.\nreturns self[..pos], and updates self to = self[pos..];\nAn array whose items size is not known at compile time.\nAn array of items of non-uniform length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the item at the provided index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over this array’s items.\nThe number of items in the array\nA fast &amp; efficient invertible ordered set for small (up to …\nA set of disjoint ranges over numeric types.\nA fast, efficient, sparse, &amp; ordered <code>u32</code> set.\nCreate a new set which contains all integers (exclusive).\nRemove all members from this set.\nClears the set, removing all values.\nReturns true if val is a member of this set.\nReturns <code>true</code> if the set contains a value.\nCreate a new empty set (inclusive).\nExtends a collection with the contents of an iterator.\nAn alternate version of <code>extend()</code> which is optimized for …\nAn alternate version of <code>extend()</code> which is optimized for …\nReturns first element in the set, if any. This element is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPopulate this set with the values obtained from decoding …\nPopulate this set with the values obtained from decoding …\nIf this is an inclusive membership set then returns an …\nAdd val as a member of this set.\nAdds a value to the set.\nInsert a range into this set, automatically merging with …\nAdd all values in range as members of this set.\nAdd all values in range as members of this set.\nA fast, efficient, sparse, &amp; ordered unsigned integer …\nSets the members of this set to the intersection of self …\nSets the members of this set to the intersection of self …\nReturns an iterator over the intersection of this and …\nReturns true if this set contains at least one element in …\nReturns true if this set contains at least one element in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inverted version of this set.\nReturn true if there are no members in this set.\nReturn true if there are no members in this set.\nReturns true if this set is inverted (has exclusive …\nIterator over the members of this set. In sorted order …\nReturns an iterator over all members of the set in sorted …\nReturns an iterator over the contained ranges.\nReturns an iterator over the members of this set that are …\nReturns an iterator over all disjoint ranges of values not …\nIterator over the members of this set starting from value.\nIterate over the ranges of contiguous values in this set.\nReturns an iterator over all disjoint ranges of values …\nReturns the last element in the set, if any. This element …\nReturns the number of members in this set.\nReturns the number of members in this set.\nCreate a new, (empty) <code>IntSet</code>.\nReturns an iterator over members of this set that are in …\nRemove val from this set.\nRemoves a value from the set. Returns whether the value …\nRemoves all values in range as members of this set.\nRemoves all values in range as members of this set.\nSets the members of this set to other - self.\nSets the members of this set to self - other.\nSets the members of this set to self - other.\nEncode this set as a sparse bit set byte encoding.\nSets the members of this set to the union of self and …\nSets the members of this set to the union of self and …\nDefines the domain of <code>IntSet</code> member types.\nMarks a mapped value as being in the domain of <code>T</code> for <code>Domain</code>…\nA fast &amp; efficient invertible ordered set for small (up to …\nA fast, efficient, sparse, &amp; ordered <code>u32</code> set.\nReturns <code>true</code> if the value is part of this domain.\nReturns the number of members in the domain.\nReturns the argument unchanged.\nConverts a mapped u32 value back to T.\nCalls <code>U::from(self)</code>.\nReturns true if all u32 values between the mapped u32 min …\nReturns an iterator which iterates over all values in the …\nReturn an iterator which iterates over all values of T in …\nProvides serialization of <code>IntSet</code>’s to a highly compact …\nConverts this value of <code>T</code> to a value in u32.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncode this set as a sparse bit set byte encoding with a …\nApple Advanced Typography common tables.\nThe anchor point table.\nThe Axis Variations table\nThe BASE table\nCommon bitmap (EBLC/EBDT/CBLC/CBDT) types.\nThe CBDT (Color Bitmap Data) table\nThe CBLC (Color Bitmap Location) table\nThe CFF table\nThe CFF2 table\nThe cmap table\nThe COLR table\nComputes the table checksum for the given data.\nThe CPAL table\nThe cvar (CVT Variations) table.\nThe DSIG table\nThe EBDT (Embedded Bitmap Data) table\nThe EBLC (Embedded Bitmap Location) table\nThe feature name table.\nThe Font Variations table\nThe gasp table\nthe GDEF table\nThe glyf (Glyph Data) table\nthe GPOS table\nthe GSUB table\nThe gvar (Glyph Variations) table\nThe Horizontal Device Metrics table.\nThe head table\nthe hhea (Horizontal Header) table\nThe hmtx (Horizontal Metrics) table\nThe HVAR (Horizontal Metrics Variation) table\nThe kerning table.\nThe Extended Kerning (kerx) table.\nOpenType Layout common table formats\nThe loca (Index to Location) table\nThe language tag table.\nThe maxp table\nThe meta (Metadata) table\nThe morx (Extended Glyph Metamorphosis) table.\nThe MVAR (Metrics Variation) table\nThe name (Naming) table\nThe os2 table\nthe post (PostScript) table\nPostScript (CFF and CFF2) common tables.\nThe sbix (Standard Bitmap Graphics) table\nThe STAT table\nThe SVG table\nThe tracking (trak) table.\nthe VARC (Variable Composite/Component) table\nOpenType font variations common tables.\nthe vhea (Horizontal Header) table\nThe vmtx (Vertical Metrics) table\nThe VORG (Vertical Origin) table.\nThe VVAR (Vertical Metrics Variation) table\nMaps the glyph indexes of your font into classes.\nLookup tables provide a way of looking up information …\nSimple array format. The lookup data is an array of lookup …\nTrimmed array format. The lookup data is a simple trimmed …\nSegment single format. Each non-overlapping segment has a …\nSegment array format. A segment mapping is performed (as …\nSingle table format. The lookup data is a sorted list of &lt;…\nTrimmed array format. The lookup data is a simple trimmed …\nLookup segment for format 2.\nLookup segment for format 4.\nLookup single record for format 6.\nTrait for values that can be read from lookup tables.\nEmpty data type for a state table entry with no payload.\nUsed for the <code>state_array</code> and <code>entry_table</code> fields in …\nUsed for the <code>state_array</code> in <code>StxHeader</code>.\nEntry in an (extended) state table.\nHeader for a state table.\nTable for driving a finite state machine for layout.\nHeader for an extended state table.\nPredefined classes.\nReturns the class table entry for the given glyph …\nReturns the class table entry for the given glyph …\nReturns the entry for the given state and class.\nReturns the entry for the given state and class.\nFirst glyph index in this segment.\nFirst glyph index in this segment.\nFirst glyph index in this segment.\nFlag values are table specific.\nFormat number is set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe glyph index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast glyph index in this segment.\nLast glyph index in this segment.\nLast glyph index in this segment.\nIndex of the next state.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nPayload is table specific.\nReads scalar values that are referenced from state table …\nReturns the value associated with the given index.\nThe lookup value.\nThe lookup value.\nA 16-bit offset from the start of the table to the data.\nA 16-bit offset from the start of the table to the data.\nIndividual anchor point.\nThe anchor point table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe avar (Axis Variations) table\nAxisValueMap record\nSegmentMaps record\nApplies the piecewise linear mapping to the specified …\nThe array of axis value map records for this axis.\nThe array of axis value map records for this axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA normalized coordinate value obtained using default …\nA normalized coordinate value obtained using default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of correspondence pairs for this axis.\nThe number of correspondence pairs for this axis.\nThe modified, normalized coordinate value.\nThe modified, normalized coordinate value.\nAxis Table\nThe BASE (Baseline) table\nBaseCoordFormat1\nBaseCoordFormat2\nBaseCoordFormat3\nBaseLangSysRecord\nBaseScript Table\nBaseScriptList Table\nBaseScriptRecord\nBaseTagList Table\nBaseValues table\nFeatMinMaxRecord\nMinMax table\nFormat identifier — format = 1\n4-byte language system identification tag\n4-byte language system identification tag\nOffset to BaseScript table, from beginning of …\nOffset to BaseScript table, from beginning of …\nOffset to BaseScript table, from beginning of …\n4-byte script identification tag\n4-byte script identification tag\nX or Y value, in design units\n4-byte feature identification tag — must match feature …\n4-byte feature identification tag — must match feature …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffset to BaseCoord table that defines the maximum extent …\nOffset to BaseCoord table that defines the maximum extent …\nOffset to BaseCoord table that defines the maximum extent …\nOffset to BaseCoord table that defines the minimum extent …\nOffset to BaseCoord table that defines the minimum extent …\nOffset to BaseCoord table that defines the minimum extent …\nOffset to MinMax table, from beginning of BaseScript table\nOffset to MinMax table, from beginning of BaseScript table\nOffset to MinMax table, from beginning of BaseScript table\nReturn the <code>FontData</code> used to resolve offsets for this table.\nEbdtComponent record.\nBigGlyphMetrics record.\nThe full bitmap is tightly packed according to the bit …\nBitmap flags.\nBitmapSize record.\nEach row of the data is aligned to a byte boundary.\nGlyphIdOffsetPair record.\nHorizontal\nIndexSubtables format type.\nIndexSubTable1: variable-metrics glyphs with 4-byte …\nIndexSubTable2: all glyphs have identical metrics.\nIndexSubTable3: variable-metrics glyphs with 2-byte …\nIndexSubTable4: variable-metrics glyphs with sparse glyph …\nIndexSubTable5: constant-metrics glyphs with sparse glyph …\nIndexSubtableList table.\nSbitLineMetrics record.\nSmallGlyphMetrics record.\nVertical\nHorizontal or vertical advance width in pixels.\nHorizontal or vertical advance width in pixels.\nReturns the set containing all flags.\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the top …\nDistance in pixels from the horizontal origin to the top …\nThe Microsoft rasterizer v.1.7 or greater supports the …\nThe Microsoft rasterizer v.1.7 or greater supports the …\nBit depth from the associated size. Required for computing …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nNot used; set to 0.\nNot used; set to 0.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nOffset in bytes from the start of the EBDT/CBDT table.\nSize of the image data in bytes.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nHighest glyph index for this size.\nHighest glyph index for this size.\nFirst glyph ID of this range.\nFirst glyph ID of this range.\nVertical or horizontal.\nVertical or horizontal.\nFormat of EBDT/CBDT image data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nGlyph ID of glyph present.\nComponent glyph ID.\nGlyph ID of glyph present.\nComponent glyph ID.\nNumber of rows of data.\nNumber of rows of data.\nNumber of rows of data.\nNumber of rows of data.\nLine metrics for text rendered horizontally.\nLine metrics for text rendered horizontally.\nHorizontal advance width in pixels.\nHorizontal advance width in pixels.\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the left …\nDistance in pixels from the horizontal origin to the top …\nDistance in pixels from the horizontal origin to the top …\nOffset to image data in EBDT table.\nFormat of EBDT image data.\nFormat of this IndexSubTable.\nOffset to an IndexSubtable from the start of the …\nReturns the IndexSubtableList associated with this size.\nOffset to IndexSubtableList, from beginning of EBLC/CBLC.\nOffset to IndexSubtableList, from beginning of EBLC/CBLC.\nTotal size in bytes of the IndexSubtableList including its …\nTotal size in bytes of the IndexSubtableList including its …\nOffset to an IndexSubtable from the start of the …\nOffset to an IndexSubtable from the start of the …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if the location references an empty bitmap …\nLast glyph ID of this range (inclusive).\nLast glyph ID of this range (inclusive).\nReturns the bitmap location information for the given …\nFull metrics, if present in the EBLC/CBLC table.\nReturns the complement of this set of flags.\nNumber of IndexSubtables in the IndexSubtableList.\nNumber of IndexSubtables in the IndexSubtableList.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nHorizontal pixels per em.\nHorizontal pixels per em.\nVertical pixels per em.\nVertical pixels per em.\nRemoves the specified flags in-place.\nLocation in EBDT.\nLocation in EBDT.\nLowest glyph index for this size.\nLowest glyph index for this size.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nLine metrics for text rendered vertically.\nLine metrics for text rendered vertically.\nVertical advance width in pixels.\nVertical advance width in pixels.\nDistance in pixels from the vertical origin to the left …\nDistance in pixels from the vertical origin to the left …\nDistance in pixels from the vertical origin to the top …\nDistance in pixels from the vertical origin to the top …\nNumber of columns of data.\nNumber of columns of data.\nNumber of columns of data.\nNumber of columns of data.\nPosition of component left.\nPosition of component left.\nPosition of component top.\nPosition of component top.\nThe Color Bitmap Data table\nThe Color Bitmap Location table\nThe Compact Font Format table.\nCompact Font Format table header\nReturns the character set associated with the top dict at …\nReturns the argument unchanged.\nReturns the global subroutine index.\nCalls <code>U::from(self)</code>.\nReturns the PostScript name for the font in the font set …\nReturns the name index.\nReturns the associated string for the given identifier.\nReturns the string index.\nReturns the top dict index.\nThe Compact Font Format (CFF) version 2 table\nCompact Font Format (CFF) version 2 table header\nReturns the argument unchanged.\nReturns the global subroutine index.\nCalls <code>U::from(self)</code>.\nReturns the raw data containing the top dict.\ncmap\ncmap Format 0: Byte encoding table\ncmap Format 10: Tr\ncmap Format 12: Segmented coverage\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 13: Many-to-one range mappings\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 14: Unicode Variation Sequences\nIterator over all (codepoint, selector, mapping variant) …\ncmap Format 2: High-byte mapping through table\ncmap Format 4: Segment mapping to delta values\nIterator over all (codepoint, glyph identifier) pairs in …\ncmap Format 6: Trimmed table mapping\ncmap Format 8: mixed 16-bit and 32-bit coverage\nCharacter and glyph limits for iterating format 12 and 13 …\nThe different cmap subtable formats.\nPart of Cmap13\nDefault UVS table\nEncoding Record\nResult of mapping a codepoint with a variation selector.\nNon-Default UVS table\n…\nUsed in Cmap8 and Cmap12\nPart of Cmap2\nPart of Cmap14\nThe variation selector should be ignored and the default …\nPart of Cmap14\nThe variant glyph mapped by a codepoint and associated …\nPart of Cmap14\nNumber of additional values in this range\nNumber of additional values in this range\nReturns the default limits for the given font.\nOffset from the start of the <code>Cmap14</code> subtable to Default UVS\nOffset from the start of the <code>Cmap14</code> subtable to Default UVS\nOffset from the start of the <code>Cmap14</code> subtable to Default UVS\nPlatform-specific encoding ID.\nPlatform-specific encoding ID.\nLast character code in this group; same condition as listed\nLast character code in this group\nLast character code in this group; same condition as listed\nLast character code in this group\nNumber of valid low bytes for this SubHeader.\nNumber of valid low bytes for this SubHeader.\nFirst valid low byte for this SubHeader.\nFirst valid low byte for this SubHeader.\nFormat number is set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of glyphs in the font.\nGlyph index to be used for all the characters in the …\nGlyph ID of the UVS\nGlyph index to be used for all the characters in the …\nGlyph ID of the UVS\nSee text below.\nSee text below.\nSee text below.\nSee text below.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum valid character.\nCreate from a raw scalar.\nOffset from the start of the <code>Cmap14</code> subtable to Non-Default\nOffset from the start of the <code>Cmap14</code> subtable to Non-Default\nOffset from the start of the <code>Cmap14</code> subtable to Non-Default\nReturn the <code>FontData</code> used to resolve offsets for this table.\nPlatform ID.\nPlatform ID.\nFirst character code in this group; note that if this …\nFirst character code in this group\nFirst character code in this group; note that if this …\nFirst character code in this group\nGlyph index corresponding to the starting character code\nGlyph index corresponding to the starting character code\nFirst value in this range\nFirst value in this range\nByte offset from beginning of the <code>Cmap</code> table to the …\nByte offset from beginning of the <code>Cmap</code> table to the …\nByte offset from beginning of the <code>Cmap</code> table to the …\nBase Unicode value of the UVS\nBase Unicode value of the UVS\nVariation selector\nVariation selector\nAffine2x3 record\nBaseGlyph record\nBaseGlyphList table\nBaseGlyphPaint record\nClip record\nClipBox table\nClipBoxFormat1 record\nClipBoxFormat2 record\nClipList table\nColorIndex record\nColorLine table\nColorStop record\nCOLR (Color) table\nCompositeMode enumeration\nExtend enumeration\nLayer record\nLayerList table\nPaint tables\nPaintColrGlyph table\nPaintColrLayers table\nPaintComposite table\nPaintGlyph table\nUnique paint identifier used for detecting cycles in the …\nPaintLinearGradient table\nPaintRadialGradient table\nPaintRotate table\nPaintRotateAroundCenter table\nPaintScale table\nPaintScaleAroundCenter table\nPaintScaleUniform table\nPaintScaleUniformAroundCenter table\nPaintSkew table\nPaintSkewAroundCenter table\nPaintSolid table\nPaintSweepGradient table\nPaintTransform table\nPaintTranslate table\nPaintVarLinearGradient table\nPaintVarRadialGradient table\nPaintVarRotate table\nPaintVarRotateAroundCenter table\nPaintVarScale table\nPaintVarScaleAroundCenter table\nPaintVarScaleUniform table\nPaintVarScaleUniformAroundCenter table\nPaintVarSkew table\nPaintVarSkewAroundCenter table\nPaintVarSolid table\nPaintVarSweepGradient table\nPaintVarTransform table\nPaintVarTranslate table\nVarAffine2x3 record\nVarColorIndex record\nVarColorLine table\nVarColorStop record\nAlpha value.\nAlpha value. For variation, use varIndexBase + 0.\nAlpha value.\nAlpha value. For variation, use varIndexBase + 1.\nAlpha value.\nAlpha value. For variation, use varIndexBase + 0.\nAlpha value.\nAlpha value. For variation, use varIndexBase + 1.\nOffset to a ClipBox table, from the beginning of the …\nOffset to a ClipBox table, from the beginning of the …\nOffset to a ClipBox table, from the beginning of the …\nLast glyph ID in the range.\nLast glyph ID in the range.\nIndex (base 0) into the layerRecords array.\nIndex (base 0) into the layerRecords array.\nSet to 1.\nSet to 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph ID of the base glyph.\nGlyph ID of the glyph used for a given layer.\nGlyph ID of the base glyph.\nGlyph ID of the base glyph.\nGlyph ID of the glyph used for a given layer.\nGlyph ID of the base glyph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of color layers associated with this glyph.\nNumber of color layers associated with this glyph.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nOffset to a Paint table, from the beginning of the …\nOffset to a Paint table, from the beginning of the …\nOffset to a Paint table, from the beginning of the …\nIndex (base 0) for a palette entry in the CPAL table.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex (base 0) for a palette entry in the CPAL table.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nIndex for a CPAL palette entry.\nFirst glyph ID in the range.\nFirst glyph ID in the range.\nPosition on a color line.\nPosition on a color line. For variation, use varIndexBase …\nPosition on a color line.\nPosition on a color line. For variation, use varIndexBase …\nBase index into DeltaSetIndexMap.\nBase index into DeltaSetIndexMap.\nBase index into DeltaSetIndexMap.\nBase index into DeltaSetIndexMap.\nMaximum x of clip box.\nMinimum x of clip box.\nMaximum y of clip box.\nMinimum y of clip box.\nCPAL (Color Record) record\nCPAL (Color Palette Table) table\nThe PaletteType flags.\nBit 1: palette is appropriate to use when displaying the …\nBit 0: palette is appropriate to use when displaying the …\nReturns the set containing all flags.\nAlpha value (B3).\nAlpha value (B3).\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nBlue value (B0).\nBlue value (B0).\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nGreen value (B1).\nGreen value (B1).\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRed value (B2).\nRed value (B2).\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe cvar table.\nDelta for an entry in the control value table.\nVariation data specialized for the CVT variation table.\nApplies a tuple scalar to this delta.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index in the CVT.\nThe delta to apply to the value in the CVT.\nBit 0: Cannot be resigned\nDSIG (Digital Signature Table) table\nPermission flags\nSignature Block Format 1\nSignature Record\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nFormat of the signature\nFormat of the signature\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nLength of signature in bytes\nLength of signature in bytes\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nThe signature block enclosed within this record.\nOffset to the signature block from the beginning of the …\nOffset to the signature block from the beginning of the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe Embedded Bitmap Data table\nThe Embedded Bitmap Location table\nThe feature name table.\nType, flags and names for a feature.\nAssociates a setting with a name identifier.\nReturns the index of the default setting for the feature.\nFeature type.\nFeature type.\nFlags associated with the feature type.\nFlags associated with the feature type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the feature settings are mutually …\nThe number of records in the setting name array.\nThe number of records in the setting name array.\nThe name table index for the feature’s name.\nThe name table index for the setting’s name.\nThe name table index for the feature’s name.\nThe name table index for the setting’s name.\nThe setting.\nThe setting.\nOffset in bytes from the beginning of this table to this …\nOffset in bytes from the beginning of this table to this …\nOffset in bytes from the beginning of this table to this …\nShim table to handle combined axis and instance arrays.\nThe fvar (Font Variations) table\nThe InstanceRecord\nThe VariationAxisRecord\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nTag identifying the design variation for the axis.\nTag identifying the design variation for the axis.\nThe coordinates array for this instance.\nThe default coordinate value for the axis.\nThe default coordinate value for the axis.\nAxis qualifiers — see details below.\nAxis qualifiers — see details below.\nReserved for future use — set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum coordinate value for the axis.\nThe maximum coordinate value for the axis.\nThe minimum coordinate value for the axis.\nThe minimum coordinate value for the axis.\nReturns a normalized coordinate for the given value.\nOptional. The name ID for entries in the ‘name’ table …\nParse an instance record with a known axis_count and …\nThe name ID for entries in the ‘name’ table that …\nUse grayscale rendering\nUse gridfitting\nUse gridfitting with ClearType symmetric smoothing Only …\nUse smoothing along multiple axes with ClearType® Only …\ngasp\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nFlags describing desired rasterizer behavior.\nFlags describing desired rasterizer behavior.\nUpper limit of range, in PPEM\nUpper limit of range, in PPEM\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAttachment Point List Table\nPart of AttachList\nCaret Value Tables\nCaretValue Format 1\nCaretValue Format 2\nCaretValue Format 3\nA Class Definition Table\nCoverage Table\nDevice Table\nEither a Device table (in a non-variable font) or a …\nFeature List Table\nFeatureVariations Table\nGDEF 1.0\nUsed in the Glyph Class Definition Table\nLigature Caret List Table\nLigature Glyph Table\nLookup Table\nLookup List Table\nMark Glyph Sets Table\nScript List Table\nFormat identifier: format = 1\nFormat identifier — format = 1\nReturn the cost of looking up a glyph in this table\nReturn the cost of looking up a glyph in this table\nFormat identifier — format = 1\nFormat identifier: format = 1\nFormat identifier: format = 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf this glyph is in the coverage table, returns its index\nGet the class for this glyph id\nReturns class values for the intersected glyphs of this …\nReturns the intersection of this table and input ‘glyphs…\nReturns intersected glyphs of this table and input ‘…\nReturns if this table contains at least one glyph in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over each glyph and its class.\nCreate from a raw scalar.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the number of glyphs in this table\nReturn the number of glyphs explicitly assigned to a class …\nBit 1: If this is set, the arguments are signed xy values, …\nBit 0: If this is set, the arguments are 16-bit (uint16 or …\nAnchor position for a composite component.\nBit 7: Off-curve point belongs to a cubic-Bezier segment\nA reference to another glyph. Part of CompositeGlyph.\nCompositeGlyph\nFlags used in CompositeGlyph\nPoint with an associated on-curve flag in a simple glyph.\nThe glyf (Glyph Data) table\nSimple or composite glyph.\nMarker for points that have an explicit delta in a glyph …\nBit 5: Indicates at least one more glyph after this one.\nMarker for points where the distance to next point is very …\nBit 0: If set, the point is on the curve; otherwise, it is …\nBit 10: If set, the components of the compound glyph …\nBit 6: If set, contours in the glyph description may …\nTrait for types that are usable for TrueType point …\nFlags describing the properties of a point.\nMarker bits for point flags that are set during variation …\nBit 3: If set, the next byte (read as unsigned) specifies …\nBit 2: If set and ARGS_ARE_XY_VALUES is also set, the xy …\nBit 11: The composite is designed to have the component …\nThe Glyph Header\nFlags used in SimpleGlyph\nMarker that signifies that the both coordinates of a point …\nMarker that signifies that the x coordinate of a point has …\nMarker that signifies that the y coordinate of a point has …\nTransform for a composite component.\nBit 12: The composite is designed not to have the component\nBit 9: If set, this forces the aw and lsb (and rsb) for the\nMarks this point as a candidate for weak interpolation.\nBit 6: The x direction will use a different scale from the …\nBit 3: This indicates that there is a simple scale for the …\nBit 7: There is a 2 by 2 transformation that will be used …\nBit 8: Following the last component are instructions for …\nBit 4: This flag has two meanings, depending on how the …\nBit 1: If set, the corresponding x-coordinate is 1 byte …\nBit 5: This flag has two meanings, depending on how the …\nBit 2: If set, the corresponding y-coordinate is 1 byte …\nReturns the set containing all flags.\nReturns the set containing all flags.\nAnchor for component placement.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nTrueType hinting bytecode.\nClears the given marker for this point.\nDisables the on curve flag.\nCompute the flags that describe this transform\nCompute the flags that describe this anchor\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nComponent flags.\nFlips the state of the on curve flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nCreates a point flag from the given bits. These are …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nGlyph identifier.\nReturns true if the given marker is set for this point.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if this is an off curve cubic point.\nReturns true if this is an off curve quadratic point.\nReturns true if this is an on curve point.\nConstruct a new <code>CurvePoint</code>\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nIf the number of contours is greater than or equal to zero,\nConvenience method to construct an off-curve point\nCreates a new off curve cubic point flag.\nCreates a new off curve quadratic point flag.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nCreates a new on curve point flag.\nConvenience method to construct an on-curve point\nTrue if this is an on-curve point.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nApplies the given marker to this point.\nEnables the on curve flag.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the underlying bits.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nComponent transformation matrix.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns a copy with all markers cleared.\nX coordinate.\nMaximum x for coordinate data.\nMinimum x for coordinate data.\nX scale factor.\nXY skew factor.\nY coordinate.\nMaximum y for coordinate data.\nMinimum y for coordinate data.\nYX skew factor.\nY scale factor.\nAn error returned by <code>Decoder::decode</code> if the end of the …\nDecodes instructions from TrueType bytecode.\nSequence of instruction operands that are encoded directly …\nDecoded TrueType instruction.\nOperation code for a TrueType instruction.\nThe bytecode for the program.\nDecodes the next instruction.\nReturns an iterator that yields all instructions in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an opcode from the given byte.\nInstruction operands that were decoded from the bytecode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no operands.\nReturns true if this is an instruction that pushes values …\nReturns the number of operands.\nReturns a more descriptive name for the opcode.\nCreates a new decoder for the given bytecode and program …\nOperation code.\nThe “program counter” or current offset into the …\nProgram counter – offset into the bytecode where this …\nReturns an iterator over the operand values.\nA mask with all the device/variation index bits set\nAnchor Table Format 1: Design Units\nAnchor Table Format 2: Design Units Plus Contour Point\nAnchor Table Format 3: Design Units Plus Device or …\nAnchor Tables position one glyph with respect to another.\nPart of MarkBasePosFormat1\nPart of BaseArray\nPart of PairPosFormat2\nPart of PairPosFormat2\nA Class Definition Table\nPart of MarkLigPosFormat1\nCoverage Table\nCursive Attachment Positioning Format 1: Cursvie attachment\nDevice Table\nEither a Device table (in a non-variable font) or a …\nPart of CursivePosFormat1\nExtension Positioning Subtable Format 1\nA GPOS Extension Positioning subtable\nFeature List Table\nFeatureVariations Table\nClass Definition Table Format 1 GPOS Version 1.0\nPart of MarkLigPosFormat1\nPart of MarkLigPosFormat1\nLookup Table\nPart of MarkMarkPosFormat1Class2Record\nPart of MarkMarkPosFormat1\nMark Array Table\nMark-to-Base Attachment Positioning Format 1: Mark-to-base …\nMark-to-Ligature Positioning Format 1: Mark-to-Ligature …\nMark-to-Mark Attachment Positioning Format 1: Mark-to-Mark …\nPart of MarkArray\nLookup Type 1: Single Adjustment Positioning Subtable\nPair Adjustment Positioning Format 1: Adjustments for …\nPair Adjustment Positioning Format 2: Class Pair Adjustment\nPart of PairPosFormat1\nPart of PairSet\nA GPOS ChainedSequenceContext\nA GPOS Lookup subtable.\nA typed GPOS LookupList table\nA GPOS SequenceContext\nThe subtables from a GPOS lookup.\nScript List Table\nLookup Type 1: Single Adjustment Positioning Subtable\nSingle Adjustment Positioning Format 1: Single Positioning …\nSingle Adjustment Positioning Format 2: Array of …\nA fully resolved <code>ValueRecord</code>.\nA context for resolving <code>Value</code>s and <code>ValueRecord</code>s.\nSee ValueRecord\nA Positioning ValueRecord.\nIncludes horizontal adjustment for advance\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes horizontal adjustment for placement\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes vertical adjustment for advance\nIncludes Device table (non-variable font) / VariationIndex …\nIncludes vertical adjustment for placement\nIncludes Device table (non-variable font) / VariationIndex …\nReturns the set containing all flags.\nFormat identifier, = 1\nArray of offsets (one per mark class) to Anchor tables. …\nArray of offsets (one per mark class) to Anchor tables. …\nArray of offsets (one per mark class) to Anchor tables. …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nArray of Class2 records, ordered by classes in classDef2.\nArray of Class2 records, ordered by classes in classDef2.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nOffset to Coverage table, from beginning of SinglePos …\nOffset to Coverage table, from beginning of PairPos …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to entryAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nOffset to exitAnchor table, from beginning of CursivePos …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nDifferent enumerations for GSUB and GPOS\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nArray of offsets (one per class) to Anchor tables. Offsets …\nOffset to Anchor table, from beginning of MarkArray table.\nOffset to Anchor table, from beginning of MarkArray table.\nOffset to Anchor table, from beginning of MarkArray table.\nClass defined for the associated mark.\nClass defined for the associated mark.\nCreates a new value context that doesn’t do any …\nReturns the complement of this set of flags.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nFormat identifier: format = 1\nFormat identifier: format = 1\nReads a value directly from font data.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nReturn the number of bytes required to store a <code>ValueRecord</code> …\nRemoves the specified flags in-place.\nGlyph ID of second glyph in the pair (first glyph is …\nGlyph ID of second glyph in the pair (first glyph is …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturn the subtables for this lookup.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns a resolved value for the given normalized …\nDefines the types of data in the ValueRecord.\nDefines the types of data in valueRecord1 — for the first\nDefines the types of data in valueRecord2 — for the …\nPositioning data for the first glyph in the pair.\nPositioning for first glyph — empty if valueFormat1 = 0.\nPositioning data for the first glyph in the pair.\nPositioning for first glyph — empty if valueFormat1 = 0.\nPositioning data for the second glyph in the pair.\nPositioning for second glyph — empty if valueFormat2 = 0.\nPositioning data for the second glyph in the pair.\nPositioning for second glyph — empty if valueFormat2 = 0.\nSets the normalized variation coordinates for this value …\nSets the item variation store for this value context.\nHorizontal value, in design units\nAttempt to resolve the <code>Device</code> or <code>VariationIndex</code> table for …\nVertical value, in design units\nAttempt to resolve the <code>Device</code> or <code>VariationIndex</code> table for …\nPart of AlternateSubstFormat1\nAlternate Substitution Format 1\nA Class Definition Table\nCoverage Table\nDevice Table\nExtension Substitution Subtable Format 1\nA GSUB Extension Substitution subtable\nFeature List Table\nFeatureVariations Table\nGSUB\nPart of LigatureSubstFormat1\nPart of LigatureSubstFormat1\nLigature Substitution Format 1\nLookup Table\nLookup List Table\nMultiple Substitution Format 1\nReverse Chaining Contextual Single Substitution Format 1\nScript List Table\nPart of MultipleSubstFormat1\nLookupType 1: Single Substitution Subtable\nSingle Substitution Format 1\nSingle Substitution Format 2\nA GSUB ChainedSequenceContext\nA GSUB Lookup subtable.\nA typed GSUB LookupList table\nA GSUB SequenceContext\nThe subtables from a GPOS lookup.\nOffset to Coverage table, from beginning of substitution …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDifferent enumerations for GSUB and GPOS\nReturn the <code>FontData</code> used to resolve offsets for this table.\nFormat identifier: format = 1\nReturn the subtables for this lookup.\nDelta information for a single point or component in a …\nVariation data specialized for the glyph variations table.\nThe GlyphVariationData table\nThe ‘gvar’ header\nIf set, offsets to GlyphVariationData are 32 bits\nArray of tuple records shared across all glyph variation …\nReturns the set containing all flags.\nApplies a tuple scalar to this delta.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nThe point or component index.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe x delta.\nThe y delta.\nThe Horizontal Device Metrics table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum width.\nMaximum width.\nPixel size for following widths (as ppem).\nPixel size for following widths (as ppem).\nA constructor that requires additional arguments.\nArray of widths, indexed by glyph id.\nArray of glyphs (numGlyphs is from the ‘maxp’ table).\nBit 0: Baseline for font at y=0.\nBit 0: Bold (if set to 1)\nBit 5: Condensed (if set to 1)\nBit 12: Font converted (produce compatible metrics).\nBit 6: Extended (if set to 1)\nBit 3: Force ppem to integer values for all internal …\nThe <code>flags</code> field for the head table.\nThe head (font header) table.\nBit 4: Instructions may alter advance width (the advance …\nBit 2: Instructions may depend on point size.\nBit 1: Italic (if set to 1)\nBit 14: Last Resort font. If set, indicates that the …\nBit 11: Font data is “lossless” as a result of having …\nBit 1: Left sidebearing point at x=0 (relevant only for …\nThe <code>macStyle</code> field for the head table.\nBit 13: Font optimized for ClearType. Note, fonts that …\nBit 3: Outline (if set to 1)\nBit 4: Shadow (if set to 1)\nBit 2: Underline (if set to 1)\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nhhea Horizontal Header Table\nThe hmtx (Horizontal Metrics) table\nAdvance width/height, in font design units.\nAdvance width/height, in font design units.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGlyph leading (left/top) side bearing, in font design …\nGlyph leading (left/top) side bearing, in font design …\nThe HVAR (Horizontal Metrics Variations) table\nThe Apple Advanced Typography kerning table.\nA subtable in an AAT <code>kern</code> table.\nThe kerning table.\nThe OpenType kerning table.\nA subtable in an OT <code>kern</code> table.\nA subtable in the <code>kern</code> table.\nThe type 0 <code>kern</code> subtable.\nThe type 0 <code>kerx</code> subtable kerning record.\nThe type 2 <code>kern</code> subtable.\nClass table for the type 2 <code>kern</code> subtable.\nThe type 3 ‘kern’ subtable.\nThe various <code>kern</code> subtable formats.\nOffset to kerning value array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSize of the header of the containing subtable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the table has cross-stream kerning values.\nTrue if the table has horizontal kerning values.\nTrue if the table is represented by a state machine.\nTrue if the table has variation kerning values.\nTrue if the table has vertical kerning values.\nReturns the kerning adjustment for the given pair.\nReturns an enum representing the actual subtable data.\nThe glyph index for the lefthand glyph in the kerning pair.\nThe glyph index for the lefthand glyph in the kerning pair.\nLeft-hand offset table.\nThe glyph index for the righthand glyph in the kerning …\nThe glyph index for the righthand glyph in the kerning …\nRight-hand offset table.\nReturns an iterator over all of the subtables in this <code>kern</code> …\nKerning value.\nKerning value.\nSequence of indices into the <code>ankr</code> table.\nSequence of coordinate values.\nSequence of glyph outline point indices.\nThe kerx (Extended Kerning) table.\nA subtable in a <code>kerx</code> table.\nThe type 0 <code>kerx</code> subtable.\nThe type 0 <code>kerx</code> subtable kerning record.\nThe type 1 <code>kerx</code> subtable.\nThe type 2 <code>kerx</code> subtable.\nThe type 4 <code>kerx</code> subtable.\nActions for the type 4 <code>kerx</code> subtable.\nThe type 6 <code>kerx</code> subtable.\nThe various <code>kerx</code> subtable formats.\nKerning values.\nFlags for control point positioning.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the kerning adjustment for the given pair.\nReturns the kerning adjustment for the given pair.\nThe glyph index for the lefthand glyph in the kerning pair.\nLeft-hand offset table.\nThe glyph index for the righthand glyph in the kerning …\nRight-hand offset table.\nKerning value.\nContains the set of kerning values, one for each state.\nPart of ChainedSequenceContextFormat2\nPart of ChainedSequenceContextFormat2\nChained Sequence Context Format 1\nChained Sequence Context Format 2\nChained Sequence Context Format 3\nPart of ChainedSequenceContextFormat1\nPart of ChainedSequenceContextFormat1\nfeatureParams for ‘cv01’-‘cv99’\nA Class Definition Table\nClass Definition Table Format 1\nClass Definition Table Format 2\nUsed in ClassDefFormat2\nPart of SequenceContextFormat2\nPart of SequenceContextFormat2\nCondition Table\nCondition Table Format 1: Font Variation Axis Range\nCondition Table Format 2: Variation index\nCondition Table Format 3: AND\nCondition Table Format 4: OR\nCondition Table Format 5: NOT\nConditionSet Table\nCoverage Format 1\nCoverage Format 2\nCoverage Table\nDevice delta formats\nDevice Table\nEither a Device table (in a non-variable font) or a …\nA trait that abstracts the behaviour of an extension …\nFeature Table\nFeature List Table\nAn enum for different possible tables referenced by …\nPart of FeatureList\nFeatureTableSubstitution Table\nUsed in FeatureTableSubstitution\nPart of FeatureVariations\nFeatureVariations Table\nIf set, skips over base glyphs\nIf set, skips over ligatures\nIf set, skips over all combining marks\nLanguage System Table\nSigned 2-bit value, 8 values per uint16\nSigned 4-bit value, 4 values per uint16\nSigned 8-bit value, 2 values per uint16\nLookup Table\nThe LookupFlag bit enumeration.\nLookup List Table\nThis bit relates only to the correct processing of GPOS …\nUsed in CoverageFormat2\nScript Table\nScript List Table\nScript Record\nA prioritized list of OpenType script tags mapped from a …\nA script chosen from a set of candidate tags.\nSequence Context Format 1\nSequence Context Format 2\nSequence Context Format 3\nSequence Lookup Record\nPart of SequenceContextFormat1\nPart of SequenceContextFormat1\nan array of subtables, maybe behind extension lookups\nCombination of a tag and a child table.\nIf set, indicates that the lookup table structure is …\nVariation index table\nVariationIndex table, contains a delta-set index pair.\nOffset to an alternate feature table, from start of the …\nOffset to an alternate feature table, from start of the …\nReturns a slice containing the mapped script tags.\nApplied to all glyphs in the range\nApplied to all glyphs in the range\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturn new, empty flags\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nOffset to Feature table, from beginning of FeatureList\nThe feature table index to match.\nThe feature table index to match.\nOffset to Feature table, from beginning of FeatureList\nOffset to Feature table, from beginning of FeatureList\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\n4-byte feature identification tag\n4-byte feature identification tag\nFormat, = 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a LookupFlag from a raw value, discarding …\nGiven a Unicode script code, returns a prioritized list of …\nReturn the subtable at the given index\nIndex of the script in the <code>ScriptList</code>.\nReturns if this table contains at least one glyph in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if a script was chosen that wasn’t in the requested …\nReturn an iterator over all the subtables in the collection\nOffset to LangSys table, from beginning of Script table\nOffset to LangSys table, from beginning of Script table\nOffset to LangSys table, from beginning of Script table\n4-byte LangSysTag identifier\n4-byte LangSysTag identifier\nThe number of subtables in this collection\nIndex (zero-based) into the LookupList\nIndex (zero-based) into the LookupList\nIf not zero, skips over all marks of attachment type …\nCreate from a raw scalar.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the number of glyphs in this record\nReturn the number of glyphs explicitly assigned to a class …\nOffset to Script table, from beginning of ScriptList\nOffset to Script table, from beginning of ScriptList\nOffset to Script table, from beginning of ScriptList\n4-byte script tag identifier\n4-byte script tag identifier\nIndex (zero-based) into the input glyph sequence\nIndex (zero-based) into the input glyph sequence\nIf not zero, skips over all marks of attachment type …\nCoverage Index of first glyph ID in range\nCoverage Index of first glyph ID in range\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nThe actual OpenType tag of the chosen script.\nRaw transmutation to u16.\nThe loca table.\nReturns the argument unchanged.\nAttempt to return the offset for a given glyph id.\nCalls <code>U::from(self)</code>.\nOffset and length of string in <code>ltag</code> table.\nThe language tag table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nString length (in bytes).\nString length (in bytes).\nOffset from the start of the table to the beginning of the …\nOffset from the start of the table to the beginning of the …\n<code>maxp</code>\n…\n<code>meta</code>\nData stored in the ‘meta’ table.\nOther metadata, which may exist in certain apple fonts\nUsed for the ‘dlng’ and ‘slng’ metadata\nOffset in bytes from the beginning of the metadata table …\nLength of the data, in bytes. The data is not required to …\nLength of the data, in bytes. The data is not required to …\nOffset in bytes from the beginning of the metadata table …\nOffset in bytes from the beginning of the metadata table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA tag indicating the type of metadata.\nA tag indicating the type of metadata.\nA chain in a <code>morx</code> table.\nEntry payload in a contextual subtable state machine.\nContextual glyph substitution subtable.\nUsed to compute the sub-feature flags for a list of …\nEntry payload in an insertion subtable state machine.\nInsertion glyph substitution subtable.\nLigature glyph substitution subtable.\nThe morx (Extended Glyph Metamorphosis) table.\nA subtable in a <code>morx</code> chain.\nThe various <code>morx</code> subtable formats.\nArray of component indices which are summed to determine …\nIndex of the substitution table for the current glyph (use …\nIndex of the substitution table for the current glyph (use …\nZero-based index into the insertion glyph table. The …\nZero-based index into the insertion glyph table. The …\nComplement of flags for the settings that this feature and …\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nFlags for the settings that this feature and setting …\nThe feature’s setting (aka selector).\nThe feature’s setting (aka selector).\nThe type of feature.\nThe type of feature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsertion glyph table. The index and count of glyphs to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the set of ligature stack actions, one for each …\nOutput ligature glyphs.\nList of lookups specifying substitutions. The index into …\nIndex of the substitution table for the marked glyph (use …\nIndex of the substitution table for the marked glyph (use …\nZero-based index into the insertion glyph table. The …\nZero-based index into the insertion glyph table. The …\nThe MVAR (Metrics Variations) table\nValueRecord metrics variation record\nA delta-set inner index — used to select a delta-set row …\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nA delta-set outer index — used to select an item …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFour-byte tags used to represent particular metric or …\nFour-byte tag identifying a font-wide measure.\nFour-byte tag identifying a font-wide measure.\nCap height.\nGaspRange[0]\nGaspRange[1]\nGaspRange[2]\nGaspRange[3]\nGaspRange[4]\nGaspRange[5]\nGaspRange[6]\nGaspRange[7]\nGaspRange[8]\nGaspRange[9]\nHorizontal ascender.\nHorizontal clipping ascent.\nHorizontal clipping descent.\nHorizontal caret offset.\nHorizontal caret run.\nHorizontal caret rise.\nHorizontal descender.\nHorizontal line gap.\nSubscript em x-offset.\nSubscript em x-size.\nSubscript em y-offset.\nSubscript em y-size.\nSuperscript em x-offset.\nSuperscript em x-size.\nSuperscript em y-offset.\nSuperscript em y-size.\nStrikeout offset.\nStrikeout size.\nUnderline offset.\nUnderline size.\nVertical ascender.\nVertical caret offset.\nVertical caret run.\nVertical caret rise.\nVertical descender.\nVertical line gap.\nX-height.\nAn iterator over the chars of a name record.\nThe encoding used by the name table.\nPart of Name\nA helper for encoding and decoding Mac OS Roman encoded …\nNaming table version 1\nIdentifier for an informational string (or name).\nName Records\nEntry for a name in the naming table.\nAn iterator over the <code>char</code>s in this name.\nConvert from a mac-roman encoded byte to a <code>char</code>\nconvert from a char to a mac-roman encoded byte, if the …\nPlatform-specific encoding ID.\nPlatform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a type that can decode the string data for this …\nLanguage-tag string offset from start of storage area (in …\nLanguage-tag string offset from start of storage area (in …\nLanguage ID.\nLanguage ID.\nLanguage-tag string length (in bytes)\nString length (in bytes).\nLanguage-tag string length (in bytes)\nString length (in bytes).\nName ID.\nName ID.\nDetermine the coding from the platform and encoding id.\nPlatform ID.\nPlatform ID.\nReturn a type that can decode the string data for this …\nString offset from start of storage area (in bytes).\nString offset from start of storage area (in bytes).\nBit 5: Glyphs are emboldened.\nBit 0: Font contains italic or oblique glyphs, otherwise …\nBit 2: Glyphs have their foreground and background …\nBit 9: Font contains oblique glyphs.\nBit 3: Outline (hollow) glyphs, otherwise they are solid.\n<code>OS/2</code>\nBit 6: Glyphs are in the standard weight/style for the …\nBit 4: Glyphs are overstruck.\nOS/2 selection flags\nBit 1: Glyphs are underscored.\nBit 7: If set, it is strongly recommended that …\nBit 8: The font has ‘name’ table strings consistent …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe 258 glyph names defined for Macintosh TrueType fonts\nA string in the post table.\npost (PostScript) table\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState for processing the blend operator for DICTs and …\nCharacter set for mapping from glyph to string identifiers.\nCharset format 0.\nCharset format 1.\nCharset format 2.\nIterator over the glyph and string identifier mappings in …\nRange struct for Charset format 1.\nRange struct for Charset format 2.\nCharset with custom glyph id to string id mappings.\nErrors that are specific to PostScript processing.\nAssociates a glyph identifier with a Font DICT.\nFdSelect format 0.\nFdSelect format 3.\nFdSelect format 4.\nRange struct for FdSelect format 3.\nRange struct for FdSelect format 4.\nCommon type for uniform access to CFF and CFF2 index …\nAn array of variable-sized objects in a <code>CFF</code> table.\nAn array of variable-sized objects in a <code>CFF2</code> table.\nReference to a Latin-1 encoded string.\nEither a signed 32-bit integer or a 16.16 fixed point …\nThe PostScript standard string set.\nOperand stack for DICTs and charstrings.\nPostScript string identifier (SID).\nApply the <code>blend</code> operator.\nApply a prefix sum to decode delta-encoded numbers.\nReturns the raw bytes of the string.\nReturns an iterator over the characters of the string.\nParsing for PostScript charstrings.\nReturns the number of objects in the index.\nParsing for PostScript DICTs.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph in range.\nFirst glyph in range.\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph in range.\nFirst glyph in range.\nReturns an array of <code>N</code> 16.16 fixed point values starting at …\nReturns an iterator yielding all elements on the stack as …\nReturns the associated font DICT index for the given glyph …\nFormat = 0.\nFormat; =0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the data for the object at the given index.\nReturns the 16.16 fixed point value at the given index on …\nReturns the 32-bit integer at the given index on the stack.\nReturns the offset at the given index.\nReturns the glyph identifier for the given string …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all of the glyph and string …\nReturns true if the number of elements on the stack is odd.\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nGlyphs left in range (excluding first).\nCreates a new index from the given data.\nCreates an identifier from a 16-bit unsigned integer.\nCreates a new Latin-1 encoded string reference from the …\nReturns an iterator yielding all elements on the stack as …\nReturn the <code>FontData</code> used to resolve offsets for this table.\nReturn the <code>FontData</code> used to resolve offsets for this table.\nPops a 16.16 fixed point value from the top of the stack.\nPops a 32-bit integer from the top of stack.\nReturns the number of variation regions for the currently …\nReverse the order of all elements on the stack.\nReturns an iterator yielding scalars for each variation …\nSets the active variation store index.\nReturns the total size in bytes of the index table.\nResolves the identifier as a standard string.\nReturns the string identifier for the given glyph …\nComputes a bias that is added to a subroutine operator in a\nReturns the underlying identifier as a 16-bit unsigned …\nTrait for processing commands resulting from charstring …\nMaximum nesting depth for subroutine calls.\nBitmask defining the counter hints that should be made …\nBitmask defining the counter hints that should be made …\nBitmask defining the counter hints that should be made …\nEvaluates the given charstring and emits the resulting …\nBitmask defining the hints that should be made active for …\nBitmask defining the hints that should be made active for …\nBitmask defining the hints that should be made active for …\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nComponents for computing a fixed point value for a binary …\nOperand for the <code>BlueValues</code>, <code>OtherBlues</code>, <code>FamilyBlues</code> and …\nPostScript DICT Operator with its associated operands.\nAffine matrix and scaling factor.\nA number parsed from a DICT. If the source was in binary …\nPostScript DICT operator.\nAn operator parsed from a DICT.\nOperand for the <code>StemSnapH</code> and <code>StemSnapV</code> operators.\nEither a PostScript DICT operator or a (numeric) operand.\nGiven a byte slice containing DICT data, returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a font matrix and a scaled UPEM, compute a new font …\nGiven a byte slice containing DICT data, returns an …\nReturns the fixed point value for the precomputed …\nBit 0: Set to 1.\nBit 1: Draw outlines.\nGlyph data table\nSbix header flags.\nThe sbix (Standard Bitmap Graphics) table\nStrike header table\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAxis Records\nAxis Value Tables\nAn array of AxisValue tables.\nAxis value table format 1\nAxis value table format 2\nAxis value table format 3\nAxis value table format 4\nPart of AxisValueFormat4\nAxis value table flags.\nIf set, it indicates that the axis value represents the …\nIf set, this axis value table provides axis value …\nSTAT (Style Attributes Table)\nReturns the set containing all flags.\nReturns axis index for format 1, 2 and 3 axis value tables\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nA value that applications can use to determine primary …\nA value that applications can use to determine primary …\nA tag identifying the axis of design variation.\nA tag identifying the axis of design variation.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.")