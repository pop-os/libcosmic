searchState.loadedDescShard("lyon_geom", 0, "Simple 2D geometric primitives on top of euclid.\nAn angle in radians. An angle in radians\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nAlias for <code>euclid::default::Box2D</code>\nA 2d curve segment defined by four points: the beginning …\nAn infinite line defined by a point and a vector.\nA line defined by the equation …\nA linear segment.\nAlias for <code>euclid::default::Point2D</code>.\nA 2d curve segment defined by three points: the beginning …\nAlias for <code>euclid::default::Rotation2D</code>\nAlias for <code>euclid::default::Scale</code>\nCommon APIs to segment types.\nAlias for <code>euclid::default::Size2D</code>.\nAn elliptic arc curve segment using the SVG’s end-point …\nAlias for <code>euclid::default::Transform2D</code>\nAlias for <code>euclid::default::Translation2D</code>\nA 2D triangle defined by three points <code>a</code>, <code>b</code> and <code>c</code>.\nAlias for <code>euclid::default::Vector2D</code>.\nReturn the curve after the split point.\nReturn the segment after the split point.\nAngle in radians\nReturns the shortest signed angle between two angles.\nCompute the length of the segment using a flattened …\nElliptic arc related maths and tools.\nReturn the curve before the split point.\nReturn the segment before the split point.\nReturn the smallest rectangle containing this segment.\nReturns the smallest rectangle that contains this triangle.\nReturns a conservative range of x that contains this …\nReturns a conservative range of y that contains this …\nCast from one numeric representation to another.\nClip this segment against a rectangle.\nHorizontally clip this segment against a range of the x …\nVertically clip this segment against a range of the y axis.\nComputes the closest point on this segment to <code>p</code>.\nSample the derivative at t (expecting t between 0 and 1).\nComputes the distance between this segment and a point.\nSample x derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nEpsilon constants are usually not a good way to deal with …\nEpsilon constants are usually not a good way to deal with …\nSwap the direction of the segment.\nReturns an inverted version of this segment where the …\nApproximates the curve with sequence of line segments.\nStart of the curve.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nComputes the intersection (if any) between this segment …\nTest for triangle-triangle intersection.\nTest for triangle-segment intersection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the angle is a finite number.\nOf the four candidate arc sweeps, two will represent an …\nComputes the length of this segment.\nLinear interpolation between two angles, using the …\nComputes third mid-point of this segment.\nShorthand for <code>Point::new(x, y)</code>.\nReturns this angle in the [0..2*PI[ range.\nSample the curve at t (expecting t between 0 and 1).\nSample the segment at t (expecting t between 0 and 1).\nChanges the segment’s length, moving destination point.\nReturns this angle in the ]-PI..PI] range.\nReturns <code>(sin(self), cos(self))</code>.\nShorthand for <code>Size::new(x, y)</code>.\nSplit this curve into two sub-curves.\nSplit this curve into two sub-segments.\nReturn the curve inside a given range of t.\nReturn the sub-segment inside a given range of t.\nComputes the squared distance between this segment and a …\nReturned the squared distance to a point.\nComputes the squared length of this segment.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nEnd of the curve.\nCast angle to <code>f32</code>.\nCast angle <code>f64</code>.\nReturns the line containing this segment.\nReturns the vector between this segment’s <code>from</code> and <code>to</code> …\n[Not implemented] Applies the transform to this triangle …\nApplies the transform to this segment and returns the …\nFallible cast from one numeric representation to another.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nSample x at t (expecting t between 0 and 1).\nSample x at t (expecting t between 0 and 1).\nSample the x coordinate of the segment at t (expecting t …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nSample y at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nSample the y coordinate of the segment at t (expecting t …\nThe <code>y</code> (traditionally, vertical) coordinate.\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nFlattening iterator for arcs.\nAn elliptic arc curve segment using the SVG’s end-point …\nReturn the curve after the split point.\nReturn the curve before the split point.\nReturns a conservative rectangle that contains the curve.\nCreate simple circle.\nReturns a conservative rectangle that contains the curve.\nReturns the flattened representation of the curve as an …\nSwap the direction of the segment.\nApproximate the arc with a sequence of cubic bézier …\nApproximates the arc with a sequence of cubic bézier …\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nApproximate the arc with a sequence of quadratic bézier …\nApproximates the arc with a sequence of quadratic bézier …\nApproximate the arc with a sequence of quadratic bézier …\nApproximates the arc with a sequence of quadratic bézier …\nReturns the argument unchanged.\nConvert from the SVG arc notation.\nSample the curve’s angle at t (expecting t between 0 and …\nCalls <code>U::from(self)</code>.\nPer SVG spec, this arc should be rendered as a line_to …\nOf the four candidate arc sweeps, two will represent an …\nSample the curve at t (expecting t between 0 and 1).\nSample the curve’s tangent at t (expecting t between 0 …\nSplit this curve into two sub-curves.\nReturn the sub-curve inside a given range of t.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nConverts this arc from endpoints to center notation.\nConvert to the SVG arc notation.\nThe polynomial form of a cubic bézier segment.\nA 2d curve segment defined by four points: the beginning …\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nReturns a conservative rectangle that contains the curve.\nReturns the smallest range of x that contains this curve.\nReturns the smallest range of y that contains this curve.\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nSample the curve’s derivative at t (expecting t between …\nSample the x coordinate of the curve’s derivative at t …\nSample the y coordinate of the curve’s derivative at t …\nReturns a conservative rectangle the curve is contained in.\nReturns a conservative range of x that contains this curve.\nReturns a conservative range of y that contains this curve.\nComputes a “fat line” of this segment.\nReturns the flattened representation of the curve as an …\nSwap the beginning and the end of the segment.\nApproximates the curve with sequence of line segments.\nApproximates the curve with sequence of line segments.\nInvokes a callback at each inflection point if any.\nReturn local x extrema or None if this curve is monotonic.\nReturn local y extrema or None if this curve is monotonic.\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each monotonic part of the segment.\nApproximates the cubic bézier curve with sequence of …\nApproximates the cubic bézier curve with sequence of …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the curve can be approximated with a …\nReturns whether this segment is fully monotonic.\nReturns true if the curve can be safely approximated with …\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the y axis.\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nComputes the intersections (if any) between this segment …\nComputes the number of quadratic bézier segments required …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment a …\nSample the curve at t (expecting t between 0 and 1).\nReturn the parameter values corresponding to a given x …\nReturn the parameter values corresponding to a given y …\nSplit this curve into two sub-curves.\nReturn the sub-curve inside a given range of t.\nApproximate the curve with a single quadratic bézier …\nEvaluates an upper bound on the maximum distance between …\nApplies the transform to this curve and returns the …\nSample the x coordinate of the curve at t (expecting t …\nFind the advancement of the x-most position in the curve.\nFind the x-least position in the curve.\nSample the y coordinate of the curve at t (expecting t …\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-least position in the curve.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nThe polynomial form of a quadratic bézier segment.\nA 2d curve segment defined by three points: the beginning …\nReturn the curve after the split point.\nReturn the curve before the split point.\nReturns the smallest rectangle the curve is contained in\nReturns the smallest range of x that contains this curve.\nReturns the smallest range of y that contains this curve.\nReturns a triangle containing this curve segment.\nAnalytic solution to finding the closest point on the …\nSample the curve’s derivative at t (expecting t between …\nReturns the shortest distance between this segment and a …\nSample the x coordinate of the curve’s derivative at t …\nSample the y coordinate of the curve’s derivative at t …\nReturns a conservative rectangle that contains the curve.\nReturns a conservative range of x that contains this curve.\nReturns a conservative range of y that contains this curve.\nComputes a “fat line” of this segment.\nReturns the flattened representation of the curve as an …\nReturns the flattened representation of the curve as an …\nFind the interval of the beginning of the curve that can …\nSwap the beginning and the end of the segment.\nApproximates the curve with sequence of line segments.\nCompute a flattened approximation of the curve, invoking a …\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each monotonic part of the segment.\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each x-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nInvokes a callback for each y-monotonic part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the curve can be approximated with a …\nReturns true if the curve can be approximated with a …\nReturns whether this segment is fully monotonic.\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the y axis.\nComputes the length of this segment.\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment a …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nReturn the x inflection point or None if this curve is …\nReturn the y inflection point or None if this curve is …\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the sub-curve inside a given range of t.\nReturns the shortest squared distance between this segment …\nElevate this curve to a third order bézier.\nApplies the transform to this curve and returns the …\nSample the x coordinate of the curve at t (expecting t …\nFind the advancement of the x-most position in the curve.\nFind the advancement of the x-least position in the curve.\nSample the y coordinate of the curve at t (expecting t …\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-least position in the curve.\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nSample x at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nAngle between vectors v1 and v2 (oriented clockwise …")