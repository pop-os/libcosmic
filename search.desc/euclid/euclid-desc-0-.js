searchState.loadedDescShard("euclid", 0, "A collection of strongly typed math tools for computer …\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nAngle in radians\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns the shortest signed angle between two angles.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nReturns <code>true</code> if this transform is approximately equal to …\nUtilities for testing approximate ordering - especially …\nReturns result of multiplication of both components\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit\nCast the unit.\nCast the unit.\nRounds each component to the smallest integer equal or …\nSee <code>Point2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Point3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size3D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Vector2D::ceil</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil</code>.\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this rectangle contains the point. Points …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this rectangle contains the interior of …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDecompose this into a translation and an rotation to be …\nA set of aliases for all types, tagged with the default …\nReturns the identity transform.\nReturns the identity transform.\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nComputes and returns the determinant of this transform.\nCompute the determinant of the transform.\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreates a rotation from Euler angles.\nCreate a 3d point from this one, using the specified z …\nCreate a 3d vector from this one, using the specified z …\nSee <code>Point2D::floor</code>.\nRounds each component to the biggest integer equal or …\nRounds each component to the biggest integer equal or …\nSee <code>Point3D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size2D::floor</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor</code>.\nSee <code>Vector2D::floor</code>.\nRounds each component to the biggest integer equal or …\nRounds each component to the biggest integer equal or …\nSee <code>Vector3D::floor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nCreate a transform providing its components via an array …\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nEquivalent to <code>from_array</code> with elements packed four at a …\nConstructor setting the same value to all sides, taking a …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking a typed Length for each side.\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nConstructor.\nConstructor.\nReturns the smallest box containing all of the provided …\nReturns the smallest box containing all of the provided …\nReturns the smallest rectangle defined by the …\nConvenience function to create a scale transform from a …\nCreates a <code>Box2D</code> of the given size, at offset zero.\nCreates a <code>Box3D</code> of the given size, at offset zero.\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unit-less value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nUnpack the underlying value from the wrapper.\nReturns the underlying scalar scale factor.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nConstruct an identity transform\nCreates the identity rotation.\nCreates the identity rotation.\nCreates an identity scale (1.0).\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCreate an identity matrix:\nCreates an identity matrix:\nInflates the box by the specified sizes on each side …\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nCalculate the size and position of an inner rectangle.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the transformation\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nThe inverse Scale (1.0 / self).\nReturn the inverse transformation.\nReturn the inverse transformation.\nReturns the inverse transform if possible.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if the size is zero, negative or NaN.\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if all members are finite.\nReturns <code>true</code> if the angle is a finite number.\nReturns <code>true</code> if this scale has no effect.\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nReturns whether it is possible to compute the inverse …\nReturns whether it is possible to compute the inverse …\nReturns <code>true</code> if the box has a negative area.\nReturns <code>true</code> if the box has a negative volume.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nReturns <code>true</code> if all side offsets are zero.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate between this box and another box.\nLinearly interpolate between this box3d and another box3d.\nLinearly interpolate between this length and another …\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nLinearly interpolate between this rectangle and another …\nBasic Linear interpolation between this rotation and …\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nLinear interpolation between two angles, using the …\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns maximum between this length and another length.\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns minimum between this length and another length.\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nMultiplies all of the transform’s component by a scalar …\nConstructor.\nConstructor.\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nReturns this angle in the [0..2*PI[ range.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nRounds each component to the nearest integer value.\nSee <code>Point2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Point3D::round</code>.\nReturn a rectangle with edges rounded to integer …\nSee <code>Size2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round</code>.\nRounds each component to the nearest integer value.\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nChange the size of the box by adjusting the max endpoint …\nReturns this angle in the ]-PI..PI] range.\nReturns <code>(sin(self), cos(self))</code>.\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nCreates a 3d rotation (around the z axis) from this 2d …\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast angle to <code>f32</code>.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast angle <code>f64</code>.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 2D vector.\nCast into a 3D vector.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given point transformed by this transform.\nReturns the given 2d point transformed by this rotation …\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Point2D::origin</code>.\nThe same as <code>Point3D::origin</code>.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Zero::zero</code> but available without importing …\nThe same as <code>Zero::zero</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nReturns <code>true</code> if this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.")