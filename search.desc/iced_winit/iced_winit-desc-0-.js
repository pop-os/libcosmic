searchState.loadedDescShard("iced_winit", 0, "A windowing shell for Iced, on top of <code>winit</code>.\nAn error that occurred while running an application.\nThe futures executor could not be created.\nThe application graphics context could not be created.\nAn event loop proxy with backpressure that implements <code>Sink</code>.\nThe application window could not be created.\nAccess the clipboard.\nConvert <code>winit</code> types into <code>iced_runtime</code> types, and viceversa.\nFrees an amount of slots for additional messages to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Proxy</code> from an <code>EventLoopProxy</code>.\nWayland specific shell\nCreate interactive, native cross-platform applications for …\nSends a value to the event loop.\nSends an action to the event loop.\nConfigure your application.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA buffer for short-term storage and transfer within and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads the current content of the <code>Clipboard</code> as text.\nCreates a new <code>Clipboard</code> that isn’t associated with a …\nReturns the identifier of the window used to create the …\nWrites the given text contents to the <code>Clipboard</code>.\nConverts a physical cursor position to a logical <code>Point</code>.\nConverts a <code>window::Mode</code> to a <code>winit</code> fullscreen mode.\nConverts some <code>window::Icon</code> into it’s <code>winit</code> counterpart.\nConverts a <code>Key</code> from <code>winit</code> to an <code>iced</code> key.\nConverts a <code>KeyCode</code> from <code>winit</code> to an <code>iced</code> key code.\nConverts a <code>winit</code> fullscreen mode to a <code>window::Mode</code>.\nConverts some <code>ModifiersState</code> from <code>winit</code> to an <code>iced</code> …\nConverts a <code>MouseButton</code> from <code>winit</code> to an <code>iced</code> mouse button.\nConverts a <code>mouse::Interaction</code> to a <code>winit</code> cursor icon.\nConverts a <code>NativeKeyCode</code> from <code>winit</code> to an <code>iced</code> native key …\nConverts a <code>PhysicalKey</code> from <code>winit</code> to an <code>iced</code> physical key.\nConverts a <code>window::Position</code> to a <code>winit</code> logical position …\nConverts a <code>Touch</code> from <code>winit</code> to an <code>iced</code> touch event.\nConverts some <code>UserAttention</code> into it’s <code>winit</code> counterpart.\nConverts a <code>window::Mode</code> to a visibility flag.\nConverts some <code>window::Settings</code> into some <code>WindowAttributes</code> …\nConverts a winit window event into an iced event.\nConverts a <code>window::Level</code> to a <code>winit</code> window level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe appearance of a program.\nThe default style of a <code>Program</code>.\nThe <code>Executor</code> that will run commands and subscriptions.\nThe data needed to initialize your <code>Program</code>.\nThe type of <strong>messages</strong> your <code>Program</code> will produce.\nAn interactive, native, cross-platform, multi-windowed …\nThe graphics backend to use to draw the <code>Program</code>.\nThe state of a multi-windowed <code>Program</code>.\nThe theme used to draw the <code>Program</code>.\nReturns the current background <code>Color</code> of the <code>State</code>.\nThe background <code>iced_core::Color</code> of the application.\nBuild the user interface for every window.\nReturns the current cursor position of the <code>State</code>.\nThe default <code>Appearance</code> of a <code>Program</code> with the built-in …\nReturns the default style of a <code>Program</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current icon <code>Color</code> of the <code>State</code>.\nThe default icon <code>iced_core::Color</code> of the application.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the logical <code>Size</code> of the <code>Viewport</code> of the <code>State</code>.\nReturns the current keyboard modifiers of the <code>State</code>.\nInitializes the <code>Program</code> with the flags provided to <code>run</code> as …\nCreates a new <code>State</code> for the provided <code>Program</code>’s <code>window</code>.\nReturns the physical <code>Size</code> of the <code>Viewport</code> of the <code>State</code>.\nRuns a <code>Program</code> with an executor, compositor, and the …\nReturns the current scale factor of the <code>Viewport</code> of the …\nReturns the scale factor of the window of the <code>Program</code>.\nReturns the <code>Style</code> variation of the <code>Theme</code>.\nReturns the event <code>Subscription</code> for the current state of the\nSynchronizes the <code>State</code> with its <code>Program</code> and its respective …\nReturns the current text <code>Color</code> of the <code>State</code>.\nThe default text <code>iced_core::Color</code> of the application.\nReturns the current <code>Theme</code> of the <code>Program</code>.\nReturns the current theme of the <code>State</code>.\nReturns the current title of the <code>Program</code>.\nHandles a <strong>message</strong> and updates the state of the <code>Program</code>.\nProcesses the provided window event and updates the <code>State</code> …\nReturns true if the provided event should cause a <code>Program</code> …\nReturns the widgets to display in the <code>Program</code> for the …\nReturns the current <code>Viewport</code> of the <code>State</code>.\nReturns the version of the <code>Viewport</code> of the <code>State</code>.\nThe settings of an application.\nThe fonts to load on boot.\nReturns the argument unchanged.\nThe identifier of the application.\nCalls <code>U::from(self)</code>.\nWhether the application should exit when no windows are …")