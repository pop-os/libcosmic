searchState.loadedDescShard("drm", 0, "A safe interface to the Direct Rendering Manager subsystem …\nAsynchronous page flipping support\nWait for a specific vblank sequence number\nCreate framebuffers with modifiers\nThe driver provides atomic modesetting\nAn authentication token, unique to the file descriptor of …\nUses the CRTC’s ID in vblank events\nUsed to enable/disable capabilities for the process.\nHeight of cursor buffers\nWidth of cursor buffers\nThis trait should be implemented by any object that acts …\nDriver version of a device.\nUsed to check which capabilities your graphics driver has.\nDumbBuffer support for scanout\nUnknown\nPreferred depth to use for dumb buffers\nSend event instead of blocking\nUnknown\nIf missed, wait for next vblank\nUnknown\nPRIME handles are supported\nWait for a given number of vblanks\nThe driver provides 3D screen control\nSyncObj support\nTimeline SyncObj support\nThe driver provides more plane types for modesetting\nUnknown\nFlags to alter the behaviour when waiting for a vblank\nData returned from a vblank wait\nUsed to specify a vblank sequence to wait for\nAcquires the DRM Master lock for this process.\nGet a flags value with all known bits set.\nAuthenticates an <code>AuthToken</code> from another process.\nCheck to see if our <code>AuthToken</code> has been authenticated by …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMemory management and buffer functionality that the DRM …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nModesetting operations that the DRM subsystem exposes.\nDate driver was published\nDate driver was published\nDriver description\nDriver description\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSequence of the frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGenerates an <code>AuthToken</code> for this process.\nGets the bus ID of this device.\nPossible errors:\nGets the value of a capability.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nName of driver\nName of the driver\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReleases the DRM Master lock for another process to use.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nRequests the driver to expose or hide certain …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTime at which the vblank occurred. <code>None</code> if an asynchronous …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWaits for a vblank.\nCommon functionality of all regular buffers.\nA handle to a GEM buffer\nThe name of a GEM buffer.\nPlanar buffers are buffers where each channel/plane is in …\nWraps some u32 that isn’t a DRM fourcc we recognize\nWraps some u8 that isn’t a DRM vendor we recognize\nIf the u32 is in a valid format to be a fourcc, get an …\nThe format of the buffer.\nThe format of the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle to the buffer.\nThe handles to the buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe modifier of the buffer.\nThe offsets of the buffer.\nThe pitch of the buffer.\nThe pitches of the buffer.\nThe width and height of the buffer.\nThe width and height of the buffer.\nGet the string representation of the format’s fourcc.\nIf the u32 is in a valid format to be a fourcc, get its …\nConvert from an u32\nConvert from an u8\nGet the vendor of the modifier, if any\nBitmask of all valid (non-deprecated) mode type flags\nAllow the changes to trigger a modeset, if necessary\nRequest page flip as soon as possible, not waiting for …\nthe <code>Self::ATOMIC</code> flag is used to hide properties from …\nAbsolute Vblank Sequence\nCommit flags for atomic mode setting\nBCAST flag\nBitmask of enumerated types\nA chunk of binary data that must be acquired\nBuiltin mode type\nCLKDIV2 flag\nCLOCK_C mode type\nCRTC_C mode type\nCSYNC flag\nDescribes a rectangular region of a buffer\nA filter that can be used with a <code>ResourceHandles</code> to …\nCursor plane\nDBLCLK flag\nDBLSCAN flag\nDefault mode\nMode created by driver\nThis trait should be implemented by any object that acts …\nEnumerated type with text strings\nRequest a vblank event on page flip\nExtended-types: rather than continue to consume a bit per …\nAn event from a device.\nIterator over <code>Event</code>s of a device. Create via …\nAssociated encoded object type\nPlanar framebuffer flags\nError from <code>Device::get_planar_framebuffer</code>\nHSKEW flag\nSet when this property is informational only and cannot be …\nInterlace flag\nFor interlaced framebuffers\nIO error\nNon-extended types: legacy bitmask, one bit per type:\nId of a Lease\nList of leased resources\nEnables .modifier\nResolution and timing information for a display mode.\nDisplay mode flags\nMode property flags\nDisplay mode type flags\nNCSYNC flag\nNHSYNC flag\nDo not block on the request and return early\nNVSYNC flag\nA DRM object that can have a specific type\nOverlay plane\nRequest page flip when the changes are applied, not …\nGenerate a page flip event, when the changes are applied\nPCSYNC flag\nDo not use\nPHSYNC flag\nPIXMUX flag\nPreferred mode\nPVSYNC flag\nA page flip happened\nPage Flip event\nFlags to alter the behaviour of a page flip\nTarget to alter the sequence of page flips\nType of a plane\nPrimary plane\nWrapper around a set of property IDs and their raw values.\nAn unsigned integer that has a min and max value\nRaw handle for a drm resource\nRelative Vblank Sequence (to the current, when calling)\nHandle for a drm resource\nThe set of <code>ResourceHandles</code> that a <code>Device</code> exposes. …\nA signed integer that has a min and max value\nTest only validity of the request, do not actually apply …\nUser defined mode type\nUnknown event, raw data provided\nUnrecognized fourcc format\nA vblank happened\nVblank event\nStereo 3D mode utilizing alternating fields\nStereo 3D mode utilizing frame packing\nStereo 3D mode utilizing alternating lines\nStereo 3D mode utilizing depth images\nStereo 3D mode utilizing depth images\nStereo 3D mode utilizing side by side full size image\nStereo 3D mode utilizing side by side half size image\nStereo 3D mode utilizing top and bottom images\nAdd a new framebuffer\nAdd framebuffer (with modifiers)\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns a HashMap mapping property names to info\nReturns a pair representing a set of <code>property::Handle</code> and …\nHelpers for atomic modesetting.\nRequest an atomic commit with given flags and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert a GEM buffer handle to a prime file descriptor\nReturns the clock speed of this mode.\nClose a GEM buffer handle\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConnector\nReturns the set of <code>connector::Handle</code>\nleased connectors\nSet of <code>connector::Handle</code>\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreate a new dumb buffer with a given size and pixel format\nCreate a drm lease\nCreate a property blob value from a given data blob\nCreates a syncobj.\nCRTC\ncrtc that did throw the event\ncrtc that did throw the event\nReturns the set of <code>crtc::Handle</code>\nleased crtcs\nSet of <code>crtc::Handle</code>\nFree the memory resources of a dumb buffer\nDestroy a framebuffer\nDestroy a given property blob value\nDestroys a syncobj.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nMark parts of a framebuffer dirty\nDumbBuffer\nduration between events\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEncoder\nReturns the set of <code>encoder::Handle</code>\nSet of <code>encoder::Handle</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSet of <code>framebuffer::Handle</code>\nImports a file descriptor exported by <code>Self::syncobj_to_fd</code> …\nApply a filter the all crtcs of these resources, resulting …\nReturns the flags of this mode\nsequence of the frame\nsequence of the frame\nFramebuffer\nReturns the set of <code>framebuffer::Handle</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConvert from a raw drm object value to a typed Handle\nReturns information about a specific connector\nReturns information about a specific CRTC\nReturns information about a specific encoder\nReturns information about a specific framebuffer\nReceive the currently set gamma ramp of a crtc\nQuery lease resources\nReturns the set of <code>Mode</code>s that a particular connector …\nReturns information about a specific framebuffer (with …\nReturns information about a specific plane\nGets a list of property handles and values for this …\nReturns information about a specific property.\nGet a property blob’s data\nReturns the horizontal skew of this mode.\nReturns the horizontal sync start, end, and total.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns iterator over pairs representing a set of …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nList active lessees\nMap the buffer for access\nReturns the bitmask of this mode\nMoves a set cursor on a given crtc\nReturns the name of this mode.\nCreate a new clipping rectangle.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOpen a GEM buffer handle by name\nQueue a page flip on the given crtc\nPlane\nGets the set of plane handles that this device currently …\nleased planes\nConvert a prime file descriptor to a GEM buffer handle\nProperty\nReceive pending events\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets the set of resource handles that this device …\nRevoke a previously issued drm lease\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet CRTC state\nSets a hardware-cursor on the given crtc with the image of …\nSets a hardware-cursor on the given crtc with the image of …\nSet a gamma ramp for the given crtc\nSet plane state.\nSets a property for a specific resource.\nReturns the size (resolution) of the mode.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the supported minimum and maximum height for …\nReturns the supported minimum and maximum width for …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSyncObj\nResets (un-signals) one or more syncobjs.\nSignals one or more syncobjs.\nQueries for state of one or more timeline syncobjs.\nSignals one or more specific timeline syncobj points.\nTransfers one timeline syncobj point to another.\nWaits for one or more specific timeline syncobj points.\nExports a syncobj as an inter-process file descriptor or …\nWaits for one or more syncobjs to become signalled.\ntime at which the vblank occurred\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nuser data that was passed to wait_vblank\nReturns the vertical refresh rate of this mode\nReturns the vertical scan of this mode.\nReturns the vertical sync start, end, and total.\nCreate <code>Event</code>s iterator from buffer read using something …\nGet the X coordinate of the top left corner of the …\nGet the X coordinate of the bottom right corner of the …\nGet the Y coordinate of the top left corner of the …\nGet the Y coordinate of the bottom right corner of the …\nHelper struct to construct atomic commit requests\nAdd a property and value pair for a given handle to the …\nAdd a property and value pair for a given raw resource to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new and empty atomic commit request\nA handle to a connector\nHorizontal BGR\nHorizontal RGB\nInformation about a connector\nA physical interface type.\nNo geometry\nEncountered value not supported by drm-rs\nThe state of a connector.\nSubpixel order of the connected sink\nUnknown geometry\nVertical BGR\nVertical RGB\nGet interface name as string\nReturns the current encoder attached to this connector.\nReturns a list of encoders that can be possibly used by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the handle to this connector.\nReturns the type of <code>Interface</code> of this connector.\nReturns the interface ID of this connector.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of modes this connector reports as …\nReturns the size of the display (in millimeters) if …\nReturns the <code>State</code> of this connector.\nSubpixel order of the connected sink\nA handle to a specific CRTC\nInformation about a specific CRTC\nReturns the framebuffer currently attached to this CRTC.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the size of the gamma LUT.\nReturns the handle to this CRTC.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current mode of the CRTC.\nReturns the position of the CRTC.\nSlow, but generic <code>buffer::Buffer</code> implementation\nMapping of a <code>DumbBuffer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle to an encoder\nInformation about an encoder\nThe type of encoder.\nReturns a handle to the CRTC this encoder is attached to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the handle to this encoder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>Kind</code> of encoder this is.\nReturns a filter for the possible encoders that clones …\nReturns a filter for the possible CRTCs that can use this …\nA handle to a framebuffer\nInformation about a framebuffer\nInformation about a framebuffer (with modifiers)\nReturns the bits-per-pixel of this framebuffer.\nReturns the buffer handle of this framebuffer.\nReturns the buffer handles of this framebuffer.\nReturns the depth of this framebuffer.\nReturns the flags of this framebuffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the handle to this framebuffer.\nReturns the handle to this framebuffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the modifier of this framebuffer.\nReturns the offsets of this framebuffer.\nReturns the pitch of this framebuffer.\nReturns the pitches of this framebuffer.\nReturns the pixel format of this framebuffer.\nReturns the size of this framebuffer.\nReturns the size of this framebuffer.\nA handle to a plane\nInformation about a plane\nReturns the CRTC this plane is attached to.\nReturns the formats this plane supports.\nReturns the framebuffer this plane is attached to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the handle to this plane.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a filter for supported crtcs of this plane.\nA set of values that can be combined\nBitmask value\nA chunk of binary data that must be acquired\nOpaque (blob) value\nA True or False type\nBoolean value\nA CRTC object\nCrtc object value\nA Connector object\nConnector object value\nAn Encoder object\nEncoder object value\nA set of values that are mutually exclusive\nEnum Value\nA single value of <code>ValueType::Enum</code> type\nA set of <code>EnumValue</code>s for a single property\nA Framebuffer object\nFramebuffer object value\nA handle to a property\nInformation about a property\nA non-specific DRM object\nUnknown object value\nA Plane object\nPlane object value\nA Property object\nProperty object value\nA raw property value that does not have a specific …\nA signed integer that has a min and max value\nSigned range value\nA catch-all for any unknown types\nUnknown value\nAn unsigned integer that has a min and max value\nUnsigned range value\nThe value of a property, in a typed format\nDescribes the types of value that a property uses.\nBitmask value\nOpaque (blob) value\nBoolean value\nConnector object value\nCrtc object value\nEncoder object value\nEnum Value\nFramebuffer object value\nUnknown object value\nPlane object value\nProperty object value\nSigned range value\nUnsigned range value\nReturns whether this property can be atomically updated.\nGiven a <code>RawValue</code>, convert it into a specific <code>Value</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an <code>EnumValue</code> for a <code>RawValue</code>, or <code>None</code> if <code>value</code> is …\nReturns the handle to this property.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this property is mutable.\nReturns the name of this property.\nReturns the name of this value\nReturns the <code>RawValue</code> of this value\nReturns the ValueType of this property.\nReturns a tuple containing slices to the <code>RawValue</code>s and the …\nA handle to a specific syncobj\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")