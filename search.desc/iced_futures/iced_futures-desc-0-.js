searchState.loadedDescShard("iced_futures", 0, "Asynchronous tasks for GUI programming, inspired by Elm.\nA boxed static future.\nA boxed static stream.\nAn extension trait that enforces <code>Send</code> only on native …\nAn extension trait that enforces <code>Sync</code> only on native …\nA batteries-included runtime of commands and subscriptions.\nThe underlying implementations of the <code>iced_futures</code> …\nBoxes a stream.\nBroadcasts an event to all the subscriptions currently …\nRuns the given closure inside the <code>Executor</code> of the <code>Runtime</code>.\nListen to runtime events.\nChoose your preferred executor to power a runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nListen to keyboard events.\nCreates a new empty <code>Runtime</code>.\nRuns a <code>Stream</code> in the <code>Runtime</code> until completion.\nSpawns a <code>Future</code> in the <code>Runtime</code>.\nCreate asynchronous streams of data.\nListen to external events in your application.\nTracks a <code>Subscription</code> in the <code>Runtime</code>.\nA default, cross-platform backend.\nBackends that are only available in native platforms: …\nA backend that does nothing!\nA <code>ThreadPool</code> backend.\nA <code>tokio</code> backend.\nA thread pool executor for futures.\nListen and react to time.\nA <code>tokio</code> executor.\nListen and react to time.\nReturns a <code>Subscription</code> that produces messages at a set …\nAn executor that drops all the futures, instead of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nListen and react to time.\nReturns a <code>Subscription</code> to all the ignored runtime events.\nCreates a <code>Subscription</code> that produces a message for every …\nCreates a <code>Subscription</code> that listens and filters all the …\nA type that can run futures.\nRuns the given closure inside the <code>Executor</code>.\nCreates a new <code>Executor</code>.\nSpawns a future in the <code>Executor</code>.\nListens to keyboard key presses and calls the given …\nListens to keyboard key releases and calls the given …\nCreates a new <code>Stream</code> that produces the items sent from a …\nCreates a new <code>Stream</code> that produces the items sent from a …\nA subscription event.\nA stream of runtime events.\nThe hasher used for identifying subscriptions.\nA user interacted with a user interface in a window.\nThe events that will be produced by a <code>Subscription</code> with …\nThe description of a <code>Subscription</code>.\nA request to listen to external events.\nA registry of subscription streams.\nBatches all the provided subscriptions and returns the …\nBroadcasts an event to the subscriptions currently alive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Subscription</code> from a <code>Recipe</code> describing it.\nHashes the <code>Recipe</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the different recipes of the <code>Subscription</code>.\nTransforms the <code>Subscription</code> output with the given function.\nCreates a new empty <code>Tracker</code>.\nReturns an empty <code>Subscription</code> that will not produce any …\nReturns a <code>Subscription</code> that will call the given function …\nReturns a <code>Subscription</code> that will create and asynchronously …\nExecutes the <code>Recipe</code> and produces the stream of events of …\nUpdates the <code>Tracker</code> with the given <code>Subscription</code>.\nAdds a value to the <code>Subscription</code> context.\nThe <code>Event</code> describing the interaction.\nThe <code>event::Status</code> of the interaction.\nThe window holding the interface of the interaction.")