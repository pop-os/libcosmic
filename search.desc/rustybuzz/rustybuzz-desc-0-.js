searchState.loadedDescShard("rustybuzz", 0, "A complete harfbuzz shaping algorithm port to Rust.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA font face handle.\nA feature tag with an accompanying range specifying on …\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA script language.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags for this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new [<code>Face</code>] from <code>ttf_parser::Face</code>.\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>Face</code> from data.\nParses a <code>Feature</code> form a string.\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nCreate a new <code>UnicodeBuffer</code>.\nReturns a plan that can be used for shaping any buffer …\nCreate a new <code>Feature</code> struct.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResets clusters.\nPredefined scripts.\nGet the ISO15924 script tag.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nSets pixels per EM.\nSets point size per EM.\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nSets font variations.\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns script’s tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns face’s units per EM.\nIndicates that if input text is broken at the beginning of …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …")