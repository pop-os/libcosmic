searchState.loadedDescShard("weezl", 0, "LZW decoder and encoder\nThe order of bits in bytes.\nThe result of a coding operation on a pair of buffer.\nNo more data will be produced because an end marker was …\nThe input contained an invalid code.\nThe least significant bit is processed first.\nThe error kind after unsuccessful coding of an LZW stream.\nThe status after successful coding of an LZW stream.\nThe most significant bit is processed first.\nNo bytes were read or written and no internal state …\nEverything went well.\nThe result of coding into an output stream.\nThe total number of bytes consumed from the reader.\nThe total number of bytes written into the writer.\nThe number of bytes consumed from the input buffer.\nThe number of bytes written into the output buffer.\nA module for all decoding needs.\nA module for all encoding needs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe status after returning from the write call.\nThe possible error that occurred.\nDescribes the static parameters for creating a decoder.\nThe state for decoding data with an LZW algorithm.\nA decoding stream sink.\nA decoding sink into a vector.\nCreate a new decoder with the define configuration.\nDecode a single chunk of lzw encoded data.\nDecode data from a reader.\nDecode data from a slice.\nDecode data from a reader, requiring an end marker.\nDecode data from a slice, requiring an end marker.\nDecode some bytes from <code>inp</code> and write result to <code>out</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the decoding has finished.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a decoder into a writer.\nConstruct a decoder into a vector.\nCreate a new decoder with the specified bit order and …\nCreate a configuration to decode with the specified bit …\nReset all internal state.\nUse a particular buffer as an intermediate decode buffer.\nSet the size of the intermediate decode buffer.\nCreate a TIFF compatible decoder with the specified bit …\nCreate a configuration for a TIFF compatible decoder.\nImmediately yield to the caller when the decoder buffer is …\nDescribes the static parameters for creating a decoder.\nThe state for encoding data with an LZW algorithm.\nA encoding stream sink.\nA encoding sink into a vector.\nCreate a new decoder with the define configuration.\nEncode a single chunk of data.\nEncode data from a reader.\nEncode data from a slice.\nEncode data from a reader and an end marker.\nDecode data from a reader, adding an end marker.\nEncode some bytes from <code>inp</code> into <code>out</code>.\nMark the encoding as in the process of finishing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a encoder into a writer.\nConstruct an encoder into a vector.\nCreate a new encoder with the specified bit order and …\nCreate a configuration to decode with the specified bit …\nReset all internal state.\nUse a particular buffer as an intermediate encode buffer.\nSet the size of the intermediate encode buffer.\nCreate a TIFF compatible encoder with the specified bit …\nCreate a configuration for a TIFF compatible decoder.")