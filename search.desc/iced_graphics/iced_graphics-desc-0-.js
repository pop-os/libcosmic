searchState.loadedDescShard("iced_graphics", 0, "A bunch of backend-agnostic types that can be leveraged to …\nAn antialiasing strategy.\nMultisample AA with 16 samples\nMultisample AA with 2 samples\nMultisample AA with 4 samples\nMultisample AA with 8 samples\nThe settings of a renderer.\nA viewing region for displaying computer graphics.\nThe antialiasing strategy that will be used for triangle …\nCache computations and efficiently reuse them.\nManage colors for shaders.\nA compositor is responsible for initializing a renderer …\nCompute the damage between frames.\nThe default <code>Font</code> to use.\nThe default size of text.\nSee what can go wrong when creating graphical backends.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild and draw geometry.\nA gradient that can be used as a fill for some geometry.\nLoad and operate on images.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw and stack layers of graphical primitives.\nReturns the logical size of the <code>Viewport</code>.\nDraw triangles!\nReturns the physical height of the <code>Viewport</code>.\nReturns the physical size of the <code>Viewport</code>.\nReturns the physical width of the <code>Viewport</code>.\nReturns the projection transformation of the <code>Viewport</code>.\nReturns the amount of samples of the <code>Antialiasing</code>.\nReturns the scale factor of the <code>Viewport</code>.\nDraw text.\nCreates a new <code>Viewport</code> with the given logical dimensions …\nCreates a new <code>Viewport</code> with the given physical dimensions …\nA simple cache that stores generated values to avoid …\nThe type of cache produced.\nA piece of data that can be cached.\nThe <code>Cache</code> is empty.\nThe <code>Cache</code> is filled.\nA cache group.\nThe state of a <code>Cache</code>.\nCaches this value, producing its corresponding <code>Cache</code>.\nClears the <code>Cache</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Group</code> of the <code>Cache</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Group</code> can only ever have a single <code>Cache</code>…\nLoads the <code>Cache</code> into a proper instance.\nCreates a new empty <code>Cache</code>.\nPuts the given value in the <code>Cache</code>.\nReturns a reference cell to the internal <code>State</code> of the <code>Cache</code>…\nGenerates a new unique cache <code>Group</code>.\nCreates a new empty <code>Cache</code> with the given <code>Group</code>.\nThe current value of the <code>Cache</code>\nThe previous value of the <code>Cache</code>.\nA flag that indicates whether the renderer should perform …\nA color packed as 4 floats representing RGBA channels.\nReturns the internal components of the <code>Packed</code> color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPacks a <code>Color</code>.\nA graphics compositor that can draw to windows.\nThe compositor of the renderer.\nDefines the default compositor of a renderer.\nContains information about the graphics (e.g. graphics …\nInvalid dimensions\nThe swap chain has been lost and needs to be recreated.\nPresent Error\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the …\nPresent Error\nThe iced renderer of the backend.\nResize Error\nThe surface of the backend.\nResult of an unsuccessful call to <code>Compositor::present</code>.\nA timeout was encountered while trying to acquire the next …\nA window that can be used in a <code>Compositor</code>.\nContains the graphics adapter.\nContains the graphics backend.\nConfigures a new <code>Surface</code> with the given dimensions.\nCreates a <code>Self::Renderer</code> for the <code>Compositor</code>.\nCrates a new <code>Surface</code> for the given window.\nReturns <code>Information</code> used by this <code>Compositor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from its bytes.\nCreates a new <code>Compositor</code>.\nPresents the <code>Renderer</code> primitives to the next frame of the …\nScreenshots the current <code>Renderer</code> primitives to an …\nCreates a new <code>Compositor</code> with a backend preference.\nDiffs the damage regions given some previous and current …\nGroups the given damage regions that are close together …\nComputes the damage regions given some previous and …\nAn error occurred in the context’s internal backend\nThe backend did not match the preference\nAn error that occurred while creating an application’s …\nA suitable graphics adapter or device could not be found.\nMultiple errors occurred\nFailed to find any pixel format that matches the criteria.\nThe reason why a graphics adapter could not be found\nThe request to create the backend failed\nThe requested backend version is not supported.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the backend where the error happened\nThe reason why this backend could not be used\nThe preferred backend\nA simple cache that stores generated geometry to avoid …\nThe kind of <code>Frame</code> this renderer supports.\nThe kind of geometry this renderer can draw.\nA <code>Gradient</code> color.\nA raster image that can be drawn.\nA renderer capable of drawing some <code>Self::Geometry</code>.\nA solid <code>Color</code>.\nThe coloring style of some drawing.\nA raster image that can be drawn.\nA bunch of text that can be drawn to a canvas\nSets the border radius of the <code>Svg</code>\nThe border radii of the image\nThe border radius for the svg\nClears the <code>Cache</code>, forcing a redraw the next time it is …\nSets the <code>Color</code> filter of the <code>Svg</code>.\nThe color of the text\nThe <code>Color</code> filter to be applied to the <code>Svg</code>.\nThe contents of the text\nDraws geometry using the provided closure and stores it in …\nDraws the given <code>Self::Geometry</code>.\nComputes the <code>Path</code>s of the <code>Text</code> and draws them using the …\nFill <code>Geometry</code> with a certain style.\nSets the filter method of the <code>Image</code>.\nThe filter method of the image.\nThe font of the text\nDraw and generate geometry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle of the image.\nThe handle of the <code>Svg</code>.\nThe horizontal alignment of the text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nCreates a new empty <code>Cache</code>.\nCreates a new <code>Image</code> with the given handle.\nCreates a new <code>Svg</code> with the given handle.\nCreates a new <code>Self::Frame</code>.\nSets the opacity of the <code>Image</code>.\nSets the opacity of the <code>Svg</code>.\nThe opacity of the image.\nThe opacity of the <code>Svg</code>.\nBuild different kinds of 2D shapes.\nThe position of the text relative to the alignment …\nSets the rotation of the <code>Image</code>.\nSets the rotation of the <code>Svg</code>.\nThe rotation to be applied to the image; on its center.\nThe rotation to be applied to the image; on its center.\nThe shaping strategy of the text.\nThe size of the text\nSets whether the <code>Image</code> should be snapped to the pixel grid.\nIf set to <code>true</code>, the image will be snapped to the pixel …\nCreate lines from a <code>Path</code> and assigns them various …\nThe vertical alignment of the text\nCreates a new empty <code>Cache</code> with the given <code>Group</code>.\nThe style used to fill geometry.\nThe fill rule defines how to determine what is inside and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fill rule defines how to determine what is inside and …\nThe color or gradient of the fill.\nThe internal implementation of a <code>Frame</code>.\nThe region of a surface that can be used to draw geometry.\nReturns the coordinate of the center of the <code>Frame</code>.\nDraws the given <code>Image</code> on the <code>Frame</code> inside the given bounds.\nDraws the given <code>Svg</code> on the <code>Frame</code> inside the given bounds.\nDraws the given <code>Path</code> on the <code>Frame</code> by filling it with the …\nDraws an axis-aligned rectangle given its top-left corner …\nDraws the characters of the given <code>Text</code> on the <code>Frame</code>, …\nReturns the argument unchanged.\nReturns the height of the <code>Frame</code>.\nCalls <code>U::from(self)</code>.\nTurns the <code>Frame</code> into its underlying geometry.\nCreates a new <code>Frame</code> with the given dimensions.\nPops a transform from the transform stack and sets it as …\nPushes the current transform in the transform stack.\nApplies a rotation in radians to the current transform of …\nApplies a uniform scaling to the current transform of the …\nApplies a non-uniform scaling to the current transform of …\nReturns the dimensions of the <code>Frame</code>.\nDraws the stroke of the given <code>Path</code> on the <code>Frame</code> with the …\nDraws the stroke of an axis-aligned rectangle with the …\nApplies a translation to the current transform of the <code>Frame</code>…\nReturns the width of the <code>Frame</code>.\nExecutes the given drawing operations within a <code>Rectangle</code> …\nStores the current transform of the <code>Frame</code> and executes the …\nA <code>Path</code> builder.\nAn immutable set of points that may or may not be …\nBuild and draw curves.\nAdds an <code>Arc</code> to the <code>Path</code> from <code>start_angle</code> to <code>end_angle</code> in a …\nAdds a circular arc to the <code>Path</code> with the given control …\nAdds a cubic Bézier curve to the <code>Path</code> given its two …\nBuilds the <code>Path</code> of this <code>Builder</code>.\nAdds a circle to the <code>Path</code> given its center coordinate and …\nCreates a new <code>Path</code> representing a circle given its center …\nCloses the current sub-path in the <code>Path</code> with a straight …\nAdds an ellipse to the <code>Path</code> using a clockwise direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Path</code> representing a line segment given its …\nConnects the last point in the <code>Path</code> to the given <code>Point</code> …\nMoves the starting point of a new sub-path to the given …\nCreates a new <code>Builder</code>.\nCreates a new <code>Path</code> with the provided closure.\nAdds a quadratic Bézier curve to the <code>Path</code> given its …\nReturns the internal <code>lyon_path::Path</code>.\nAdds a rectangle to the <code>Path</code> given its top-left corner …\nCreates a new <code>Path</code> representing a rectangle given its …\nAdds a rounded rectangle to the <code>Path</code> given its top-left …\nCreates a new <code>Path</code> representing a rounded rectangle given …\nReturns the current <code>Path</code> with the given transform applied …\nA segment of a differentiable curve.\nAn elliptical <code>Arc</code>.\nThe center of the arc.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe end of the segment’s angle, clockwise rotation from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radii of the arc’s ellipse. The horizontal and …\nThe radius of the arc.\nThe clockwise rotation of the arc’s ellipse.\nThe start of the segment’s angle, clockwise rotation …\nThe start of the segment’s angle, clockwise rotation …\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nSets the color of the <code>Stroke</code>.\nSets the <code>LineCap</code> of the <code>Stroke</code>.\nSets the <code>LineJoin</code> of the <code>Stroke</code>.\nSets the width of the <code>Stroke</code>.\nA fill which linearly interpolates colors along a …\nA linear gradient.\nA linear gradient interpolates colors along a direction …\nPacked <code>Gradient</code> data for use in shader code.\nAdds a new <code>ColorStop</code>, defined by an offset and a color, to …\nAdds multiple <code>ColorStop</code>s to the gradient.\nThe absolute ending position of the gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Linear</code> builder.\nCreates a new <code>Packed</code> gradient for use in shader code.\nPacks the <code>Gradient</code> for use in shader code.\nPacks the <code>Gradient</code> for use in shader code.\nThe absolute starting position of the gradient.\n<code>ColorStop</code>s along the linear gradient direction.\nA raster or vector image.\nA raster image.\nA vector image.\nReturns the bounds of the <code>Image</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to load an image by its <code>Handle</code>.\nThe bounds of the image.\nThe bounds of the image.\nThe image handle\nThe handle of a vector image.\nA layer of graphical primitives.\nA stack of layers used for drawing.\nReturns the slice of layers in the <code>Stack</code>.\nClears the layers of the <code>Stack</code>, allowing reuse.\nReturns a mutable reference to the current <code>Layer</code> of the …\nFlushes and settles any pending group of primitives in the …\nFlushes and settles any primitives in the current layer of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an iterator over immutable references to the …\nReturns an iterator over mutable references to the layers …\nCreates a new empty <code>Stack</code>.\nPops the current clipping region from the <code>Stack</code> and …\nPops the current <code>Transformation</code> in the <code>Stack</code>.\nPushes a new clipping region in the <code>Stack</code>; creating a new …\nPushes a new <code>Transformation</code> in the <code>Stack</code>.\nClears all the layers contents and resets its bounds.\nResizes the <code>Layer</code> to the given bounds.\nReturns the current <code>Transformation</code> of the <code>Stack</code>.\nCreates a new <code>Layer</code> with the given bounds.\nThe result of counting the attributes of a set of meshes.\nA mesh with a gradient.\nA vertex which contains 2D position &amp; packed gradient data.\nA set of vertices and indices representing a list of …\nA low-level primitive to render a mesh of triangles.\nA renderer capable of drawing a <code>Mesh</code>.\nA mesh with a solid color.\nA two-dimensional vertex with a color.\nReturns the number of total vertices &amp; total indices of …\nReturns the clip bounds of the <code>Mesh</code>.\nThe color of the vertex in <strong>linear</strong> RGBA.\nDraws the given <code>Mesh</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe packed vertex data of the gradient.\nThe total amount of gradient vertices.\nThe total amount of gradient meshes.\nReturns the indices of the <code>Mesh</code>.\nThe list of vertex indices that defines the triangles of …\nThe total amount of indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe vertex position in 2D space.\nThe vertex position in 2D space.\nThe total amount of solid vertices.\nThe total amount of solid meshes.\nReturns the <code>Transformation</code> of the <code>Mesh</code>.\nThe vertices of the mesh\nThe vertices and indices of the mesh.\nThe vertices and indices of the mesh.\nThe clip bounds of the <code>Mesh</code>.\nThe clip bounds of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nSome cached text.\nAn editor.\nA set of system fonts.\nA paragraph.\nA weak reference to a [<code>cosmic-text::Buffer</code>] that can be …\nSome raw text.\nA text primitive.\nA version number.\nA weak reference to a <code>cosmic_text::Buffer</code>.\nCache text.\nThe clip bounds of the text.\nThe color of the text.\nDraw and edit text.\nReturns the global <code>FontSystem</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from its bytes.\nMeasures the dimensions of the given <code>cosmic_text::Buffer</code>.\nDraw paragraphs.\nThe position of the text.\nReturns the raw <code>cosmic_text::FontSystem</code>.\nReturns the attributes of the given <code>Font</code>.\nConverts some <code>Color</code> to a <code>cosmic_text::Color</code>.\nConverts some <code>Shaping</code> strategy to a <code>cosmic_text::Shaping</code> …\nConverts some <code>Wrapping</code> strategy to a <code>cosmic_text::Wrap</code> …\nReturns the current <code>Version</code> of the <code>FontSystem</code>.\nReturns the visible bounds of the <code>Text</code>.\nThe bounds of the text.\nThe clip bounds of the text.\nThe color of the text.\nThe contents of the text.\nThe font of the text.\nThe horizontal alignment of the text.\nThe line height of the text.\nThe shaping strategy of the text.\nThe size of the text in logical pixels.\nThe vertical alignment of the text.\nA store of recently used sections of text.\nA cache entry.\nA cache key representing a section of text.\nThe hash of a <code>Key</code>.\nAllocates a text <code>Entry</code> if it is not already present in the …\nThe bounds of the text.\nThe buffer of text, ready for drawing.\nThe content of the text.\nThe <code>Font</code> of the text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the text <code>Entry</code> with the given <code>KeyHash</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nThe minimum bounds of the text.\nCreates a new empty <code>Cache</code>.\nThe shaping strategy of the text.\nThe size of the text.\nTrims the <code>Cache</code>.\nA multi-line text editor.\nA weak reference to an <code>Editor</code>.\nThe bounds of the <code>Editor</code>.\nReturns the buffer of the <code>Editor</code>.\nCreates a <code>Weak</code> reference to the <code>Editor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty <code>Editor</code>.\nTries to update the reference into an <code>Editor</code>.\nA bunch of text.\nA weak reference to a <code>Paragraph</code>.\nReturns the buffer of the <code>Paragraph</code>.\nCreates a <code>Weak</code> reference to the <code>Paragraph</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe horizontal alignment of the <code>Paragraph</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum bounds of the <code>Paragraph</code>.\nCreates a new empty <code>Paragraph</code>.\nTries to update the reference into a <code>Paragraph</code>.\nThe vertical alignment of the <code>Paragraph</code>.")