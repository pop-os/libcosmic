searchState.loadedDescShard("iced_widget", 1, "Updates the <code>Highlighter</code> with some new <code>Self::Settings</code>.\nSets the width of the <code>Rich</code> text boundaries.\nCreates a new <code>Rich</code> text with the given text spans.\nSets the <code>Wrapping</code> strategy of the <code>Rich</code> text.\nAn interaction with an <code>Editor</code>.\nThe <code>TextEditor</code> can be interacted with.\nDelete the previous character.\nDelete the previous character.\nA binding to an action in the <code>TextEditor</code>.\nThe theme catalog of a <code>TextEditor</code>.\nThe item class of the <code>Catalog</code>.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nCopy the selection of the <code>TextEditor</code>.\nProduce the given message.\nCut the selection of the <code>TextEditor</code>.\nDelete the next character.\nDelete the next character.\nThe <code>TextEditor</code> cannot be interacted with.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nBreak the current line.\nThe <code>TextEditor</code> is focused.\nMove to the start of the line.\nThe <code>TextEditor</code> is being hovered.\nThe identifier of a <code>TextEditor</code>.\nInsert the given character.\nInsert the given character.\nA key press.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nPaste the clipboard contents in the <code>TextEditor</code>.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect text with a given <code>Motion</code>.\nSelect the entire buffer.\nSelect the entire buffer.\nSelect the line at the current cursor.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nSelect the word at the current cursor.\nA sequence of bindings to execute.\nThe state of a <code>TextEditor</code>.\nThe possible status of a <code>TextEditor</code>.\nThe appearance of a text input.\nA styling function for a <code>TextEditor</code>.\nA multi-line text input.\nUnfocus the <code>TextEditor</code>.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nSets the style class of the <code>TextEditor</code>.\nReturns the current cursor position of the <code>Content</code>.\nThe default style of a <code>TextEditor</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the <code>Direction</code> of the <code>Motion</code>.\nProduces a <code>Task</code> that focuses the <code>TextEditor</code> with the given …\nSets the <code>Font</code> of the <code>TextEditor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default <code>Binding</code> for the given key press.\nSets the height of the <code>TextEditor</code>.\nHighlights the <code>TextEditor</code> with the given <code>Highlighter</code> and a …\nThe <code>Color</code> of the icon of the text input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Action</code> is an editing action.\nReturns whether the <code>TextEditor</code> is currently focused or not.\nThe key pressed.\nSets the closure to produce key bindings on key presses.\nReturns the text of the line at the given index, if it …\nReturns the amount of lines of the <code>Content</code>.\nSets the <code>text::LineHeight</code> of the <code>TextEditor</code>.\nReturns an iterator of the text of the lines in the <code>Content</code>…\nThe state of the keyboard modifiers.\nCreates new <code>TextEditor</code> with the given <code>Content</code>.\nCreates an empty <code>Content</code>.\nSets the message that should be produced when some action …\nSets the <code>Padding</code> of the <code>TextEditor</code>.\nPerforms an <code>Action</code> on the <code>Content</code>.\nSets the placeholder of the <code>TextEditor</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the selected text of the <code>Content</code>.\nThe <code>Color</code> of the selection of the text input.\nSets the text size of the <code>TextEditor</code>.\nThe current <code>Status</code> of the <code>TextEditor</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>TextEditor</code>.\nReturns the text of the <code>Content</code>.\nThe text produced by the key press.\nThe <code>Color</code> of the value of the text input.\nWidens the <code>Motion</code>, if possible.\nSets the width of the <code>TextEditor</code>.\nCreates a <code>Content</code> with the given text.\nSets the <code>Wrapping</code> strategy of the <code>TextEditor</code>.\nThe amount of pixels to scroll.\nThe <code>TextInput</code> can be interacted with.\nThe theme catalog of a <code>TextInput</code>.\nThe item class of the <code>Catalog</code>.\nThe default <code>Padding</code> of a <code>TextInput</code>.\nThe <code>TextInput</code> cannot be interacted with.\nThe <code>TextInput</code> is focused.\nThe <code>TextInput</code> is being hovered.\nThe content of the <code>Icon</code>.\nThe identifier of a <code>TextInput</code>.\nThe left side of a <code>TextInput</code>.\nThe right side of a <code>TextInput</code>.\nThe side of a <code>TextInput</code>.\nThe state of a <code>TextInput</code>.\nThe possible status of a <code>TextInput</code>.\nThe appearance of a text input.\nA styling function for a <code>TextInput</code>.\nA field that can be filled with text.\nThe value of a <code>TextInput</code>.\nSets the horizontal alignment of the <code>TextInput</code>.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nSets the style class of the <code>TextInput</code>.\nThe unicode code point that will be used as the icon.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nThe default style of a <code>TextInput</code>.\nThe default class produced by the <code>Catalog</code>.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nProduces a <code>Task</code> that focuses the <code>TextInput</code> with the given …\nFocuses the <code>TextInput</code>.\nSets the <code>Font</code> of the <code>TextInput</code>.\nThe font that will be used to display the <code>code_point</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>Icon</code> of the <code>TextInput</code>.\nThe <code>Color</code> of the icon of the text input.\nSets the <code>Id</code> of the <code>TextInput</code>.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns whether the <code>TextInput</code> is currently focused or not.\nLays out the <code>TextInput</code>, overriding its <code>Value</code> if provided.\nReturns the total amount of graphemes in the <code>Value</code>.\nSets the <code>text::LineHeight</code> of the <code>TextInput</code>.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>TextInput</code> with the given placeholder and its …\nCreates a new <code>Value</code> from a string slice.\nCreates a custom <code>Id</code>.\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nReturns the position of the next end of a word from the …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when the <code>TextInput</code>…\nSets the message that should be produced when the <code>TextInput</code>…\nSets the <code>Padding</code> of the <code>TextInput</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nConverts the <code>TextInput</code> into a secure password input.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nProduces a <code>Task</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nThe <code>Color</code> of the selection of the text input.\nThe side of a <code>TextInput</code> where to display the <code>Icon</code>.\nSets the text size of the <code>TextInput</code>.\nThe font size of the content.\nThe spacing between the <code>Icon</code> and the text in a <code>TextInput</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>TextInput</code>.\nUnfocuses the <code>TextInput</code>.\nCreates a unique <code>Id</code>.\nReturns a new <code>Value</code> containing the graphemes until the …\nThe <code>Color</code> of the value of the text input.\nSets the width of the <code>TextInput</code>.\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nReturns the <code>State</code> of the <code>Cursor</code>.\nThe end of the selection\nThe start of the selection\nThe built-in Catppuccin Frappé variant of a <code>Palette</code>.\nThe built-in Catppuccin Latte variant of a <code>Palette</code>.\nThe built-in Catppuccin Macchiato variant of a <code>Palette</code>.\nThe built-in Catppuccin Mocha variant of a <code>Palette</code>.\nThe built-in Catppuccin Frappé variant.\nThe built-in Catppuccin Latte variant.\nThe built-in Catppuccin Macchiato variant.\nThe built-in Catppuccin Mocha variant.\nA <code>Theme</code> with a customized <code>Palette</code>.\nA <code>Theme</code> that uses a <code>Custom</code> palette.\nThe built-in dark variant of a <code>Palette</code>.\nThe built-in Dracula variant of a <code>Palette</code>.\nThe built-in dark variant.\nThe built-in Dracula variant.\nThe built-in Ferra variant of a <code>Palette</code>.\nThe built-in Ferra variant:\nThe built-in Gruvbox Dark variant of a <code>Palette</code>.\nThe built-in Gruvbox Light variant of a <code>Palette</code>.\nThe built-in Gruvbox Dark variant.\nThe built-in Gruvbox Light variant.\nThe built-in Kanagawa Dragon variant of a <code>Palette</code>.\nThe built-in Kanagawa Lotus variant of a <code>Palette</code>.\nThe built-in Kanagawa Wave variant of a <code>Palette</code>.\nThe built-in Kanagawa Dragon variant.\nThe built-in Kanagawa Lotus variant.\nThe built-in Kanagawa Wave variant.\nThe built-in light variant of a <code>Palette</code>.\nThe built-in light variant.\nThe built-in Moonfly variant of a <code>Palette</code>.\nThe built-in Moonfly variant.\nThe built-in Nightfly variant of a <code>Palette</code>.\nThe built-in Nord variant of a <code>Palette</code>.\nThe built-in Nightfly variant.\nThe built-in Nord variant.\nThe built-in Oxocarbon variant of a <code>Palette</code>.\nThe built-in Oxocarbon variant.\nA color palette.\nThe built-in Solarized Dark variant of a <code>Palette</code>.\nThe built-in Solarized Light variant of a <code>Palette</code>.\nThe built-in Solarized Dark variant.\nThe built-in Solarized Light variant.\nThe built-in Tokyo Night variant of a <code>Palette</code>.\nThe built-in Tokyo Night Light variant of a <code>Palette</code>.\nThe built-in Tokyo Night Storm variant of a <code>Palette</code>.\nA built-in theme.\nThe built-in Tokyo Night variant.\nThe built-in Tokyo Night Light variant.\nThe built-in Tokyo Night Storm variant.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe danger <code>Color</code> of the <code>Palette</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Custom</code> theme from the given <code>Palette</code>.\nDefine the colors of a theme.\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe text <code>Color</code> of the <code>Palette</code>.\nCreates a <code>Custom</code> theme from the given <code>Palette</code> with a …\nA set of background colors.\nA set of danger colors.\nThe built-in Catppuccin Frappé variant of an <code>Extended</code> …\nThe built-in Catppuccin Latte variant of an <code>Extended</code> …\nThe built-in Catppuccin Macchiato variant of an <code>Extended</code> …\nThe built-in Catppuccin Mocha variant of an <code>Extended</code> …\nThe built-in dark variant of an <code>Extended</code> palette.\nThe built-in Dracula variant of an <code>Extended</code> palette.\nThe built-in Ferra variant of an <code>Extended</code> palette.\nThe built-in Gruvbox Dark variant of an <code>Extended</code> palette.\nThe built-in Gruvbox Light variant of an <code>Extended</code> palette.\nThe built-in Kanagawa Dragon variant of an <code>Extended</code> …\nThe built-in Kanagawa Lotus variant of an <code>Extended</code> palette.\nThe built-in Kanagawa Wave variant of an <code>Extended</code> palette.\nThe built-in light variant of an <code>Extended</code> palette.\nThe built-in Moonfly variant of an <code>Extended</code> palette.\nThe built-in Nightfly variant of an <code>Extended</code> palette.\nThe built-in Nord variant of an <code>Extended</code> palette.\nThe built-in Oxocarbon variant of an <code>Extended</code> palette.\nThe built-in Solarized Dark variant of an <code>Extended</code> palette.\nThe built-in Solarized Light variant of an <code>Extended</code> …\nThe built-in Tokyo Night variant of an <code>Extended</code> palette.\nThe built-in Tokyo Night variant of an <code>Extended</code> palette.\nThe built-in Tokyo Night Storm variant of an <code>Extended</code> …\nAn extended set of colors generated from a <code>Palette</code>.\nRecommended background, icon, and text <code>Color</code>.\nA color palette.\nA set of primary colors.\nA set of secondary colors.\nA set of success colors.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe set of background colors.\nThe base background color.\nThe base primary color.\nThe base secondary color.\nThe base success color.\nThe base danger color.\nThe background color.\nThe danger <code>Color</code> of the <code>Palette</code>.\nThe set of danger colors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an <code>Extended</code> palette from a simple <code>Palette</code>.\nGenerates a set of <code>Primary</code> colors from the base, …\nGenerates a set of <code>Secondary</code> colors from the base and text …\nGenerates a set of <code>Success</code> colors from the base, …\nGenerates a set of <code>Danger</code> colors from the base, …\nThe icon color, which defaults to the text color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the palette is dark or not.\nCreates a new <code>Pair</code> from a background <code>Color</code> and some text …\nGenerates a set of <code>Background</code> colors from the base and …\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe set of primary colors.\nThe set of secondary colors.\nA stronger version of the base background color.\nA stronger version of the base primary color.\nA stronger version of the base secondary color.\nA stronger version of the base success color.\nA stronger version of the base danger color.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe set of success colors.\nThe text <code>Color</code> of the <code>Palette</code>.\nThe text color.\nA weaker version of the base background color.\nA weaker version of the base primary color.\nA weaker version of the base secondary color.\nA weaker version of the base success color.\nA weaker version of the base danger color.\nThe <code>Toggler</code> can be interacted with.\nThe theme catalog of a <code>Toggler</code>.\nThe item class of the <code>Catalog</code>.\nThe default size of a <code>Toggler</code>.\nThe <code>Toggler</code> is disabled.\nThe <code>Toggler</code> is being hovered.\nThe possible status of a <code>Toggler</code>.\nThe appearance of a toggler.\nA styling function for a <code>Toggler</code>.\nA toggler widget.\nget the a11y nodes for the widget\nThe background <code>Color</code> of the toggler.\nThe <code>Color</code> of the background border of the toggler.\nThe width of the background border of the toggler.\nThe border radius of the toggler.\nSets the style class of the <code>Toggler</code>.\nThe default style of a <code>Toggler</code>.\nThe default class produced by the <code>Catalog</code>.\nSets the description of the <code>Toggler</code>.\nSets the description of the <code>Toggler</code>.\nSets the <code>Renderer::Font</code> of the text of the <code>Toggler</code>\nThe foreground <code>Color</code> of the toggler.\nThe <code>Color</code> of the foreground border of the toggler.\nThe width of the foreground border of the toggler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe space between the handle and the border of the toggler\nthe radius of the handle of the toggler\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the label of the <code>Toggler</code>.\nSets the label of the <code>Toggler</code> using another widget.\nSets the name of the <code>Toggler</code>.\nCreates a new <code>Toggler</code>.\nSets the message that should be produced when a user …\nSets the message that should be produced when a user …\nSets the size of the <code>Toggler</code>.\nSets the spacing between the <code>Toggler</code> and the text.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Toggler</code>.\nSets the horizontal alignment of the text of the <code>Toggler</code>\nSets the text <code>text::LineHeight</code> of the <code>Toggler</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Toggler</code>.\nSets the text size o the <code>Toggler</code>.\nSets the <code>text::Wrapping</code> strategy of the <code>Toggler</code>.\nSets the width of the <code>Toggler</code>.\nIndicates whether the <code>Toggler</code> is toggled.\nIndicates whether the <code>Toggler</code> is toggled.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nAn element to display a widget over another.\nThe tooltip will appear on the top of the widget.\nSets the style class of the <code>Tooltip</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the gap between the content and its <code>Tooltip</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Tooltip</code>.\nSets the padding of the <code>Tooltip</code>.\nSets whether the <code>Tooltip</code> is snapped within the viewport.\nSets the style of the <code>Tooltip</code>.\nThe default width of a <code>VerticalSlider</code>.\nAn vertical bar and a handle that selects a single value …\nSets the style class of the <code>VerticalSlider</code>.\nSets the optional default value for the <code>VerticalSlider</code>.\nReturns the argument unchanged.\nSets the height of the <code>VerticalSlider</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>VerticalSlider</code>.\nSets the release message of the <code>VerticalSlider</code>. This is …\nSets the optional “shift” step for the <code>VerticalSlider</code>.\nSets the step size of the <code>VerticalSlider</code>.\nSets the style of the <code>VerticalSlider</code>.\nSets the width of the <code>VerticalSlider</code>.")