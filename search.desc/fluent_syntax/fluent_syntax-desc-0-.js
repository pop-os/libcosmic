searchState.loadedDescShard("fluent_syntax", 0, "Fluent is a modern localization system designed to improve …\nAbstract Syntax Tree representation of the Fluent …\nFluent Translation List parsing utilities\nFluent Translation List serialization utilities\nA set of helper functions for unescaping Fluent unicode …\nAttribute represents a part of a <code>Message</code> or <code>Term</code>.\nList of arguments for a <code>FunctionReference</code> or a …\nFluent <code>Comment</code>.\nA top-level node representing an entry of a <code>Resource</code>.\nAn expression that is either a select expression or an …\nA function reference.\nIdentifier is part of nodes such as <code>Message</code>, <code>Term</code> and …\nAn inline expression such as <code>${ username }</code>:\nA subset of expressions which can be used as <code>Placeable</code>, …\nMessage node represents the most common <code>Entry</code> in an FTL …\nA reference to another message.\nA key-value pair used in <code>CallArguments</code>.\nA number literal.\nPattern contains a value of a <code>Message</code>, <code>Term</code> or an <code>Attribute</code>…\n<code>PatternElement</code> is an element of a <code>Pattern</code>.\nA placeable which may contain another expression.\nRoot node of a Fluent Translation List.\nA select expression such as:\nSingle line string literal enclosed in <code>&quot;</code>.\nA Fluent <code>Term</code>.\nA reference to a term.\nA reference to a variable.\nVariant is a single branch of a value in a <code>Select</code> …\nA key of a <code>Variant</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nKind of an error associated with the <code>ParserError</code>.\nContains the success value\nError containing information about an error encountered by …\nParser result always returns an AST representation of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of the error that the parser encountered.\nParses an input into a complete Abstract Syntax Tree …\nParses an input into an Abstract Syntax Tree …\nPrecise location of where the parser encountered the error.\nSlice of the input from the end of the last valid entry to …\nOptions for serializing an abstract syntax tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerializes an abstract syntax tree representing a Fluent …\nSerializes an abstract syntax tree representing a Fluent …\nWhether invalid text fragments should be serialized, too.\nUnescapes to a writer without allocating.\nUnescapes to a <code>Cow&lt;str&gt;</code> optionally allocating.")