searchState.loadedDescShard("smithay_clipboard", 0, "Smithay Clipboard\nAccess to a Wayland clipboard.\nEnd the current DnD operation, if there is one\nReturns the argument unchanged.\nSet up DnD operations for the Clipboard\nCalls <code>U::from(self)</code>.\nLoad custom clipboard data.\nLoad clipboard data for sepecific mime types.\nLoad custom primary clipboard data.\nLoad primary clipboard data for specific mime types.\nLoad primary clipboard data.\nLoad clipboard data.\nCreates new clipboard which will be running on its own …\nPeek at the contents of a DnD offer\nRegister a surface for receiving DnD offers Rectangles …\nSet the final action after presenting the user with a …\nStart a DnD operation on the given surface with some data\nStore custom data to a clipboard.\nStore custom data to a primary clipboard.\nStore to a primary clipboard.\nStore to a clipboard.\nDnD action chosen by the compositor.\nArgb8888 or Xrgb8888 encoded image data pre-multiplied by …\nDnD Cancelled.\nEnd an active DnD Source\nAn offer was dropped\nDnD Dropped. The operation is still ongoing until …\nDnD operation ended.\nInit DnD\nThe offer has left the surface.\nThe offer is no longer on a DnD destination.\nMime accepted by destination. If <code>None</code>, no mime types are …\nDnd Offer event with the corresponding destination …\nPeek the data of an active DnD offer\nA rectangle with a logical location and size relative to a …\nIf the selected action is ASK, the user must be presented …\nSet the DnD action chosen by the user.\nDnd Source event.\nStart a Dnd operation with the given source surface and …\nRegister a surface for receiving Dnd events.\nAccepted actions in this rectangle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nA unique ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccepted mime types in this rectangle\nPrefered action in this rectangle\nThe rectangle representing this destination.\nSend an event in the channel\nList of allowed mimes.\nDescribes the mime types which are accepted.\nCan be converted to data with the available mime types.\nMime type supported by clipboard.\nOther mime type.\nText mime type.\ntext/plain mime type.\ntext/plain;charset=utf-8 mime type.\nUTF8_STRING mime type.\nList allowed mime types for the type to convert from a …\nConverts a type to a byte slice for the given mime type if …\nList available mime types for this data to convert to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalize CR and CRLF into LF.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")