searchState.loadedDescShard("find_crate", 0, "Find the crate name from the current <code>Cargo.toml</code>.\nSearch from <code>dependencies</code>, <code>dev-dependencies</code> and …\nSearch from <code>build-dependencies</code>.\nSearch from <code>dependencies</code> and <code>dev-dependencies</code>.\nThe kind of dependencies to be searched.\nSearch from <code>dev-dependencies</code>.\nAn error that occurred when getting manifest.\nThe manifest is invalid for the following reason.\nAn error occurred while to open or to read the manifest …\nThe manifest of cargo.\nThe crate with the specified name not found. This error …\nThe <code>CARGO_MANIFEST_DIR</code> environment variable not found.\nThe package data. This has information on the current …\nSearch from <code>dependencies</code>.\nAn error occurred while to parse the manifest file.\nThe package for the crate that this manifest represents.\nThe kind of dependencies to be searched.\nFind the crate.\nFind the crate.\nFind the crate name from the current <code>Cargo.toml</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Manifest</code> from a toml table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the value of the <code>name</code> field is the …\nThe current name of the package. This is always a valid …\nCreates a new <code>Manifest</code> from the current <code>Cargo.toml</code>.\nReturns the original package name.\nThe version requirement of the package. Returns <code>*</code> if no …")