searchState.loadedDescShard("async_process", 0, "Async interface for working with processes.\nA spawned child process.\nA handle to a child process’s standard error (stderr).\nA handle to a child process’s standard input (stdin).\nA handle to a child process’s standard output (stdout).\nA builder for spawning processes.\nAdds a single argument to pass to the program.\nAdds multiple arguments to pass to the program.\nConfigures the working directory for the new process.\nRuns the driver for the asynchronous processes.\nConfigures an environment variable for the new process.\nRemoves all environment variable mappings.\nRemoves an environment variable mapping.\nConfigures multiple environment variables for the new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an iterator of the arguments that will be passed to …\nGets the working directory for the child process.\nGets an iterator of the environment variables explicitly …\nGets the path to the program that was given to <code>Command::new</code>…\nReturns the OS-assigned process identifier associated with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert async_process::ChildStdin into std::process::Stdio.\nConvert async_process::ChildStdout into …\nConvert async_process::ChildStderr into …\nForces the child process to exit.\nConfigures whether to kill the process when <code>Child</code> is …\nConstructs a new <code>Command</code> for launching <code>program</code>.\nDrops the stdin handle and collects the output of the …\nExecutes the command and collects its output.\nConfigures whether to reap the zombie process when <code>Child</code> …\nExecutes the command and returns the <code>Child</code> handle to it.\nDrops the stdin handle and waits for the process to exit.\nExecutes the command, waits for it to exit, and returns …\nConfigures the standard error (stderr) for the new process.\nThe handle for reading from the child’s standard error …\nConfigures the standard input (stdin) for the new process.\nThe handle for writing to the child’s standard input …\nConfigures the standard output (stdout) for the new …\nThe handle for reading from the child’s standard output …\nReturns the exit status if the process has exited.\nUnix-specific extensions.\nUnix-specific extensions to the <code>Command</code> builder.\nSet executable argument\nPerforms all the required setup by this <code>Command</code>, followed …\nSimilar to <code>uid</code>, but sets the group ID of the child …\nSets the child process’s user ID. This translates to a …")