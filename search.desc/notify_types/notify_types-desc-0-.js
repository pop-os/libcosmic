searchState.loadedDescShard("notify_types", 0, "The <code>Event</code> type and the hierarchical <code>EventKind</code> descriptor.\nA debounced event is emitted after a short delay.\nThe original event.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe time at which the event occurred.\nNo precise events\nEvent but debounce timed out (for example continuous …\nA debounced event.\nA debounced event kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent kind\nEvent path\nAn event describing non-mutating access operations on …\nAn event describing non-mutating access operations on …\nAn event describing open or close operations on files.\nAn event emitted when the access time of the file or …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all event kind, for unsupported/unknown events.\nA single event emitted with both the <code>From</code> and <code>To</code> paths.\nAn event emitted when the file, or a handle to the file, …\nAn event emitted when the content of the data is changed.\nAn event describing creation operations on files.\nAn event describing creation operations on files.\nAn event emitted when the data content of a file is …\nAn event emitted when the data content of a file is …\nNotify event.\nAdditional attributes of the event.\nTop-level event kind.\nAn event emitted when the file is executed, or the folder …\nAn event emitted when an extended attribute of the file or …\nAn event which results in the creation of a file.\nAn event emitted when a file is removed.\nSpecial Notify flag on the event.\nAn event which results in the creation of a folder.\nAn event emitted when a folder is removed.\nAn event emitted on the file or folder that was renamed.\nAn event emitted when the metadata of a file or folder is …\nAn event emitted when the metadata of a file or folder is …\nAn event describing mutation of content, name, or metadata.\nAn event describing mutation of content, name, or metadata.\nAn event emitted when the name of a file or folder is …\nAn event emitted when the file, or a handle to the file, …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event not fitting in any of the above four categories.\nAn event emitted when the ownership of the file or folder …\nAn event emitted when the permissions of the file or …\nAn event emitted when the file is opened for reading.\nAn event emitted when the file is read.\nAn event describing removal operations on files.\nAn event describing removal operations on files.\nAn event emitted when the name of a file or folder is …\nRescan notices are emitted by some platforms (and may also …\nAn event emitted when the size of the data is changed.\nAn event emitted on the file or folder resulting from a …\nAn event emitted when the file is opened for writing.\nAn event emitted when the write or modify time of the file …\nAdds a path to the event.\nAdds a path to the event if the argument is Some.\nAdditional attributes of the event.\nRetrieves the Notify flag for an event directly, if …\nRetrieves the Notify flag for an event directly, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the additional info for an event directly, if …\nRetrieves the additional info for an event directly, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether an event is an Access variant.\nIndicates whether an event is a Create variant.\nIndicates whether an event is a Modify variant.\nIndicates whether an event is an Other variant.\nIndicates whether an event is a Remove variant.\nKind or type of the event.\nReturns whether some events may have been missed. If true, …\nCreates a new <code>Event</code> given a kind.\nCreates a new <code>EventAttributes</code>.\nPaths the event is about, if known.\nThe process ID of the originator of the event.\nSets the Notify flag onto the event.\nSets the Notify flag onto the event.\nSets additional info onto the event.\nSets additional info onto the event.\nSets the kind.\nSets the process id onto the event.\nSets the process id onto the event.\nSets the tracker.\nSets the tracker.\nRetrieves the source for an event directly, if present.\nRetrieves the source for an event directly, if present.\nRetrieves the tracker ID for an event directly, if present.\nRetrieves the tracker ID for an event directly, if present.")