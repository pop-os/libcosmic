searchState.loadedDescShard("xdg", 0, "BaseDirectories allows to look up paths to configuration, …\nLike <code>BaseDirectories::get_cache_home</code>, but without any …\nLike <code>BaseDirectories::get_config_dirs</code>, but without any …\nLike <code>BaseDirectories::get_config_home</code>, but without any …\nLike <code>create_config_directory()</code>, but for a cache directory …\nGiven a relative path <code>path</code>, returns an absolute path to a …\nLike <code>create_config_directory()</code>, but for a data directory …\nLike <code>create_config_directory()</code>, but for a runtime …\nLike <code>create_config_directory()</code>, but for an application …\nLike <code>BaseDirectories::get_data_dirs</code>, but without any …\nLike <code>BaseDirectories::get_data_home</code>, but without any …\nGiven a relative path <code>path</code>, returns an absolute path to an …\nGiven a relative path <code>path</code>, returns an absolute path to an …\nGiven a relative path <code>path</code>, returns an iterator yielding …\nGiven a relative path <code>path</code>, returns an absolute path to an …\nGiven a relative path <code>path</code>, returns an iterator yielding …\nGiven a relative path <code>path</code>, returns an absolute path to an …\nGiven a relative path <code>path</code>, returns an absolute path to an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>place_cache_file()</code>, but does not create any …\nReturns the user-specific directory for non-essential …\nReturns a preference ordered (preferred to less preferred) …\nLike <code>place_config_file()</code>, but does not create any …\nReturns the user-specific configuration directory (set by …\nReturns a preference ordered (preferred to less preferred) …\nLike <code>place_data_file()</code>, but does not create any …\nReturns the user-specific data directory (set by …\nReturns the user-specific runtime directory (set by …\nLike <code>place_runtime_file()</code>, but does not create any …\nLike <code>place_state_file()</code>, but does not create any …\nReturns the user-specific directory for application state …\nReturns <code>true</code> if <code>XDG_RUNTIME_DIR</code> is available, <code>false</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a relative path <code>path</code>, lists absolute paths to all …\nGiven a relative path <code>path</code>, list absolute paths to all …\nLike <code>list_config_files</code>, but only the first occurence of …\nGiven a relative path <code>path</code>, lists absolute paths to all …\nLike <code>list_data_files</code>, but only the first occurence of …\nGiven a relative path <code>path</code>, lists absolute paths to all …\nGiven a relative path <code>path</code>, lists absolute paths to all …\nReads the process environment, determines the XDG base …\nLike <code>place_config_file()</code>, but for a cache file in …\nGiven a relative path <code>path</code>, returns an absolute path in …\nLike <code>place_config_file()</code>, but for a data file in …\nLike <code>place_config_file()</code>, but for a runtime file in …\nLike <code>place_config_file()</code>, but for an application state …\nLike <code>BaseDirectories::get_runtime_directory</code>, but without …\nPrefix path appended to all path lookups in system …\nLike <code>BaseDirectories::get_state_home</code>, but without any …\nPrefix path appended to all path lookups in user …\nSame as <code>new()</code>, but <code>prefix</code> is implicitly prepended to every …\nSame as <code>with_prefix()</code>, with <code>profile</code> also implicitly …")