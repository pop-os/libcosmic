searchState.loadedDescShard("notify", 0, "Cross-platform file system notification library\nAn event describing non-mutating access operations on …\nThe catch-all event kind, for unsupported/unknown events.\nWatcher Backend configuration\nAn event describing creation operations on files.\nContains the error value\nNotify error type.\nError kinds\nNotify event.\nThe set of requirements for watcher event handling …\nTop-level event kind.\nFS-Event backend (mac)\nGeneric error\ninotify backend (linux)\nAn invalid value was passed as runtime configuration.\nI/O errors.\nKQueue backend (bsd,optionally mac)\nCan’t watch (more) files, limit on the total number of …\nAn event describing mutation of content, name, or metadata.\nWatch only the provided directory\nFake watcher for testing\nContains the success value\nAn event not fitting in any of the above four categories.\nA path does not exist.\nProviding methods for adding and removing paths to watch.\nPolling based backend (fallback)\nWindows backend\nThe recommended <code>Watcher</code> implementation for the current …\nWatch all sub-directories as well, including directories …\nIndicates whether only the provided directory or its …\nAn event describing removal operations on files.\nType alias to use this library’s <code>Error</code> type in a Result\nAttempted to remove a watch that does not exist.\nType that can deliver file activity notifications\nWatcher kind enumeration\nAdd a new path to watch. See <code>Watcher::watch</code> for more.\nAdds a path to the event.\nAdds a path to the error.\nAdds a path to the event if the argument is Some.\nAdditional attributes of the event.\nEnsure added/removed paths are applied.\nReturns current setting\nConfigure the watcher at runtime.\nThe <code>Event</code> type and the hierarchical <code>EventKind</code> descriptor.\nRetrieves the Notify flag for an event directly, if …\nReturns current setting\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new generic Error from a message.\nHandles an event.\nRetrieves the additional info for an event directly, if …\nWatcher implementation for the inotify Linux API\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new “invalid config” error from the given …\nCreates a new i/o Error from a stdlib <code>io::Error</code>.\nSimilar to <code>Error::io</code>, but specifically handles …\nIndicates whether an event is an Access variant.\nIndicates whether an event is a Create variant.\nIndicates whether an event is a Modify variant.\nIndicates whether an event is an Other variant.\nIndicates whether an event is a Remove variant.\nReturns the watcher kind, allowing to perform …\nKind or type of the event.\nKind of the error.\nReturns whether some events may have been missed. If true, …\nCreate a new watcher with an initial Config.\nCreates a new <code>Event</code> given a kind.\nCreates a new Error with empty paths given its kind.\nStub Watcher implementation\nCreates a new “path not found” error.\nPaths the event is about, if known.\nRelevant paths to the error, if any.\nAdd/remove paths to watch.\nGeneric Watcher implementation based on polling\nReturns current setting\nConvenience method for creating the <code>RecommendedWatcher</code> for …\nRemove a path from watching. See <code>Watcher::unwatch</code> for more.\nSets the Notify flag onto the event.\nSets additional info onto the event.\nSets the kind.\nReplaces the paths for the error.\nSets the process id onto the event.\nSets the tracker.\nRetrieves the source for an event directly, if present.\nRetrieves the tracker ID for an event directly, if present.\nStop watching a path.\nBegin watching a new path.\nCreates a new “watch not found” error.\nFor the <code>PollWatcher</code> backend.\nFor the INotifyWatcher, KqueueWatcher, and PollWatcher.\nFor the <code>PollWatcher</code> backend.\nFor the <code>PollWatcher</code> backend.\nAn event describing non-mutating access operations on …\nAn event describing non-mutating access operations on …\nAn event describing open or close operations on files.\nAn event emitted when the access time of the file or …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all event kind, for unsupported/unknown events.\nA single event emitted with both the <code>From</code> and <code>To</code> paths.\nAn event emitted when the file, or a handle to the file, …\nAn event emitted when the content of the data is changed.\nAn event describing creation operations on files.\nAn event describing creation operations on files.\nAn event emitted when the data content of a file is …\nAn event emitted when the data content of a file is …\nNotify event.\nAdditional attributes of the event.\nTop-level event kind.\nAn event emitted when the file is executed, or the folder …\nAn event emitted when an extended attribute of the file or …\nAn event which results in the creation of a file.\nAn event emitted when a file is removed.\nSpecial Notify flag on the event.\nAn event which results in the creation of a folder.\nAn event emitted when a folder is removed.\nAn event emitted on the file or folder that was renamed.\nAn event emitted when the metadata of a file or folder is …\nAn event emitted when the metadata of a file or folder is …\nAn event describing mutation of content, name, or metadata.\nAn event describing mutation of content, name, or metadata.\nAn event emitted when the name of a file or folder is …\nAn event emitted when the file, or a handle to the file, …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event not fitting in any of the above four categories.\nAn event emitted when the ownership of the file or folder …\nAn event emitted when the permissions of the file or …\nAn event emitted when the file is opened for reading.\nAn event emitted when the file is read.\nAn event describing removal operations on files.\nAn event describing removal operations on files.\nAn event emitted when the name of a file or folder is …\nRescan notices are emitted by some platforms (and may also …\nAn event emitted when the size of the data is changed.\nAn event emitted on the file or folder resulting from a …\nAn event emitted when the file is opened for writing.\nAn event emitted when the write or modify time of the file …\nAdditional attributes of the event.\nRetrieves the Notify flag for an event directly, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the additional info for an event directly, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind or type of the event.\nCreates a new <code>EventAttributes</code>.\nPaths the event is about, if known.\nThe process ID of the originator of the event.\nSets the Notify flag onto the event.\nSets additional info onto the event.\nSets the process id onto the event.\nSets the tracker.\nRetrieves the source for an event directly, if present.\nRetrieves the tracker ID for an event directly, if present.\nWatcher implementation based on inotify\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new watcher.\nStub <code>Watcher</code> implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nPolling based <code>Watcher</code> implementation.\nEvent sent for registered handlers on initial directory …\nHandler trait for receivers of <code>ScanEvent</code>. Very much the …\nReturns the argument unchanged.\nHandles an event.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PollWatcher</code>, configured as needed.\nCreate a new <code>PollWatcher</code>.\nActively poll for changes. Can be combined with a timeout …\nCreate a new <code>PollWatcher</code> with an scan event handler.")