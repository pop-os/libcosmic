searchState.loadedDescShard("ron", 0, "Rusty Object Notation\nRoundtrip serde Options module.\nValue module.\nThe RON deserializer.\nCheck if the remaining bytes are whitespace only, …\nReturns the argument unchanged.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nSpans select a range of text between two positions. Spans …\nThis type represents all possible errors that can occur …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDuring serialization, this extension emits struct names. …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates an extension flag from an ident.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRoundtrip serde options.\nExtensions that are enabled by default during …\nReturns the argument unchanged.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCalls <code>U::from(self)</code>.\nDefault recursion limit that is checked during …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nEnable <code>default_extension</code> by default during serialization …\nSet a maximum recursion limit during serialization and …\nDo NOT enable <code>default_extension</code> by default during …\nDisable the recursion limit during serialization and …\nPretty serializer configuration.\nThe RON serializer.\nConfigures whether every array should be a single line (…\nEnable compact arrays, which do not insert new lines and …\nConfigures whether every map should be a single line (<code>true</code>)\nEnable compact maps, which do not insert new lines and …\nConfigures whether every struct should be a single line (…\nEnable compact structs, which do not insert new lines and …\nLimits the pretty-formatting based on the number of …\nLimit the pretty-ness up to the given depth.\nConfigures whether a comment shall be added to every array …\nEnumerate array items in comments\nConfigures whether strings should be serialized using …\nWhether to serialize strings as escaped strings, or fall …\nConfigures extensions\nEnable extensions. Only configures <code>implicit_some</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigures the string sequence used for indentation.\nIndentation string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Serializer</code>.\nCreates a default <code>PrettyConfig</code>.\nConfigures the newlines used for serialization.\nNew line string\nConfigures whether numbers should be printed without (<code>false</code>…\nEnable explicit number type suffixes like <code>1u16</code>\nPath-based metadata to serialize with a value.\nAdditional path-based field metadata to serialize\nConfigures whether tuples are single- or multi-line. If …\nSeparate tuple members with indentation\nConfigures the string sequence used to separate items …\nSeparator string\nConfigures whether to emit struct names.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nCreates a new <code>Serializer</code>.\nThe metadata and inner <code>Fields</code> of a field.\nMapping of names to <code>Field</code>s.\nErgonomic shortcut for building some inner fields.\nReturn whether this field map contains a field with the …\nGet a shared reference to the documentation metadata of …\nGet a mutable reference to the documentation metadata of …\nCreate a new empty field metadata.\nGet a mutable reference to the field with the provided <code>name</code>…\nGet a shared reference to the inner fields of this field, …\nGet a mutable reference to the inner fields of this field, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the field with the provided <code>name</code>, if it …\nGet a mutable reference to the field with the provided <code>name</code>…\nReturn whether this field has inner fields.\nInsert a field with the given name into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether this field map contains no fields.\nCreate a new field metadata from parts.\nReturn a new, empty metadata field map.\nRemove a field with the given name from the map.\nSet the documentation metadata of this field.\nSet the inner fields of this field.\nA wrapper for <code>f32</code>, which implements <code>Eq</code>, <code>Hash</code> and <code>Ord</code> using …\nA wrapper for <code>f64</code>, which implements <code>Eq</code>, <code>Hash</code> and <code>Ord</code> using …\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for any numeric primitive type in Rust.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to validate a RON string and turn it into a\nHelper function to validate a RON string and turn it into a\nHelper function to serialize <code>value</code> into a RON string.\nCreates a value from a string reference.\nImmutably looks up an element by its <code>key</code>.\nReturns the wrapped <code>f32</code>.\nReturns the wrapped <code>f64</code>.\nMutably looks up an element by its <code>key</code>.\nGet the inner raw RON string, which is guaranteed to …\nInserts a new element, returning the previous element with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>f64</code> representation of the <code>Number</code> regardless of …\nHelper function to deserialize the inner RON string into <code>T</code>.\nTries to deserialize this <code>Value</code> into <code>T</code>.\nReturns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.\nIterate all key-value pairs.\nIterate all key-value pairs mutably.\nIterate all keys.\nReturns the number of elements in the map.\nCreates a new, empty <code>Map</code>.\nConstruct a new number.\nConstruct a new <code>F32</code>.\nConstruct a new <code>F64</code>.\nRemoves an element by its <code>key</code>.\nRetains only the elements specified by the <code>keep</code> predicate.\nTrims any leadning and trailing whitespace off the raw RON …\nTrims any leadning and trailing whitespace off the boxed …\nIterate all values.\nIterate all values mutably.")