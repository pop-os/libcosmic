(function() {
    var type_impls = Object.fromEntries([["cosmic",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#70\">Source</a><a href=\"#impl-Clone-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#70\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#70\">Source</a><a href=\"#impl-Debug-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#70\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#814-817\">Source</a><a href=\"#impl-Default-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#819\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+%26V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#901-905\">Source</a><a href=\"#impl-Extend%3C(K,+%26V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    V: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#907\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a V</a>)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, &'a V)>","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#888-891\">Source</a><a href=\"#impl-Extend%3C(K,+V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#893\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.90.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, V)>","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#876-879\">Source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#881\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CK%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#824-827\">Source</a><a href=\"#impl-Index%3CK%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;K&gt; for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#829\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#831\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<K>","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CK%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#839-842\">Source</a><a href=\"#impl-IndexMut%3CK%3E-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;K&gt; for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#844\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<K>","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#1493-1496\">Source</a><a href=\"#impl-IntoIterator-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#1498\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#1499\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.IntoIter.html\" title=\"struct slotmap::sparse_secondary::IntoIter\">IntoIter</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#1501\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.90.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#852-856\">Source</a><a href=\"#impl-PartialEq-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#858\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseSecondaryMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#76\">Source</a><a href=\"#impl-SparseSecondaryMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#85\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32&gt; = SparseSecondaryMap::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#102\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a> with the given capacity of slots.</p>\n<p>The secondary map will not reallocate until it holds at least <code>capacity</code>\nslots.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm: SlotMap&lt;<span class=\"kw\">_</span>, i32&gt; = SlotMap::with_capacity(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32&gt; =\n    SparseSecondaryMap::with_capacity(sm.capacity());</code></pre></div>\n</div></details></div></details>",0,"cosmic::widget::segmented_button::SparseSecondaryMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#110\">Source</a><a href=\"#impl-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#126\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.with_hasher\" class=\"fn\">with_hasher</a>(hash_builder: S) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a> which will use the given hash\nbuilder to hash keys.</p>\n<p>The secondary map will not reallocate until it holds at least <code>capacity</code>\nslots.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm: SlotMap&lt;<span class=\"kw\">_</span>, i32&gt; = SlotMap::with_capacity(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32, <span class=\"kw\">_</span>&gt; =\n    SparseSecondaryMap::with_hasher(RandomState::new());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#148\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>,\n    hash_builder: S,\n) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a> with the given capacity of slots,\nusing <code>hash_builder</code> to hash the keys.</p>\n<p>The secondary map will not reallocate until it holds at least <code>capacity</code>\nslots.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm: SlotMap&lt;<span class=\"kw\">_</span>, i32&gt; = SlotMap::with_capacity(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32, <span class=\"kw\">_</span>&gt; =\n    SparseSecondaryMap::with_capacity_and_hasher(<span class=\"number\">10</span>, RandomState::new());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#168\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the secondary map.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>squared = SparseSecondaryMap::new();\n<span class=\"macro\">assert_eq!</span>(squared.len(), <span class=\"number\">0</span>);\nsquared.insert(k, <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(squared.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#181\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns if the secondary map is empty.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32&gt; = SparseSecondaryMap::new();\n<span class=\"macro\">assert!</span>(sec.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a> can hold without\nreallocating.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32&gt; = SparseSecondaryMap::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(sec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#215\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more slots in the\n<a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\"><code>SparseSecondaryMap</code></a>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec: SparseSecondaryMap&lt;DefaultKey, i32&gt; = SparseSecondaryMap::new();\nsec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(sec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#250\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>(&amp;self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\" title=\"primitive bool\"><code>true</code></a> if the secondary map contains <code>key</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>squared = SparseSecondaryMap::new();\n<span class=\"macro\">assert!</span>(!squared.contains_key(k));\nsquared.insert(k, <span class=\"number\">16</span>);\n<span class=\"macro\">assert!</span>(squared.contains_key(k));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#274\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a value into the secondary map at the given <code>key</code>. Can silently\nfail if <code>key</code> was removed from the originating slot map.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if this key was not present in the map, the old value\notherwise.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>squared = SparseSecondaryMap::new();\n<span class=\"macro\">assert_eq!</span>(squared.insert(k, <span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(squared.insert(k, <span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"comment\">// You don't have to use insert if the key is already in the secondary map.\n</span>squared[k] <span class=\"kw-2\">*</span>= squared[k];\n<span class=\"macro\">assert_eq!</span>(squared[k], <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#333\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Removes a key from the secondary map, returning the value at the key if\nthe key was not previously removed. If <code>key</code> was removed from the\noriginating slot map, its corresponding entry in the secondary map may\nor may not already be removed.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>squared = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">4</span>);\nsquared.insert(k, <span class=\"number\">16</span>);\nsquared.remove(k);\n<span class=\"macro\">assert!</span>(!squared.contains_key(k));\n\n<span class=\"comment\">// It's not necessary to remove keys deleted from the primary slot map, they\n// get deleted automatically when their slots are reused on a subsequent insert.\n</span>squared.insert(k, <span class=\"number\">16</span>);\nsm.remove(k); <span class=\"comment\">// Remove k from the slot map, making an empty slot.\n</span><span class=\"kw\">let </span>new_k = sm.insert(<span class=\"number\">2</span>); <span class=\"comment\">// Since sm only has one empty slot, this reuses it.\n</span><span class=\"macro\">assert!</span>(!squared.contains_key(new_k)); <span class=\"comment\">// Space reuse does not mean equal keys.\n</span><span class=\"macro\">assert!</span>(squared.contains_key(k)); <span class=\"comment\">// Slot has not been reused in squared yet.\n</span>squared.insert(new_k, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(!squared.contains_key(k)); <span class=\"comment\">// Old key is no longer available.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#369-371\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all key-value pairs <code>(k, v)</code> such that\n<code>f(k, &amp;mut v)</code> returns false. This method invalidates any removed keys.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n\n<span class=\"kw\">let </span>k1 = sm.insert(<span class=\"number\">0</span>); sec.insert(k1, <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>k2 = sm.insert(<span class=\"number\">1</span>); sec.insert(k2, <span class=\"number\">11</span>);\n<span class=\"kw\">let </span>k3 = sm.insert(<span class=\"number\">2</span>); sec.insert(k3, <span class=\"number\">12</span>);\n\nsec.retain(|key, val| key == k1 || <span class=\"kw-2\">*</span>val == <span class=\"number\">11</span>);\n\n<span class=\"macro\">assert!</span>(sec.contains_key(k1));\n<span class=\"macro\">assert!</span>(sec.contains_key(k2));\n<span class=\"macro\">assert!</span>(!sec.contains_key(k3));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, sec.len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#394\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the secondary map. Keeps the allocated memory for reuse.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    sec.insert(sm.insert(i), i);\n}\n<span class=\"macro\">assert_eq!</span>(sec.len(), <span class=\"number\">10</span>);\nsec.clear();\n<span class=\"macro\">assert_eq!</span>(sec.len(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#419\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.Drain.html\" title=\"struct slotmap::sparse_secondary::Drain\">Drain</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the slot map, returning all key-value pairs in arbitrary order as\nan iterator. Keeps the allocated memory for reuse.</p>\n<p>When the iterator is dropped all elements in the slot map are removed,\neven if the iterator was not fully consumed. If the iterator is not\ndropped (using e.g. <a href=\"https://doc.rust-lang.org/1.90.0/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>std::mem::forget</code></a>), only the elements that were\niterated over are removed.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">0</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(k, <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = sec.drain().collect();\n<span class=\"macro\">assert_eq!</span>(sec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"macro\">vec!</span>[(k, <span class=\"number\">1</span>)]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#440\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>key = sm.insert(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(key, <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(sec.get(key), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"bar\"</span>));\nsec.remove(key);\n<span class=\"macro\">assert_eq!</span>(sec.get(key), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#468\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(&amp;self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key without\nversion or bounds checking.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This should only be used if <code>contains_key(key)</code> is true. Otherwise it is\npotentially unsafe.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>key = sm.insert(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(key, <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ sec.get_unchecked(key) }, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"bar\"</span>);\nsec.remove(key);\n<span class=\"comment\">// sec.get_unchecked(key) is now dangerous!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#488\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>key = sm.insert(<span class=\"string\">\"test\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(key, <span class=\"number\">3.5</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = sec.get_mut(key) {\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">3.0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(sec[key], <span class=\"number\">6.5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#517\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(&amp;mut self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key\nwithout version or bounds checking.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This should only be used if <code>contains_key(key)</code> is true. Otherwise it is\npotentially unsafe.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span>key = sm.insert(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(key, <span class=\"string\">\"bar\"</span>);\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>sec.get_unchecked_mut(key) = <span class=\"string\">\"baz\" </span>};\n<span class=\"macro\">assert_eq!</span>(sec[key], <span class=\"string\">\"baz\"</span>);\nsec.remove(key);\n<span class=\"comment\">// sec.get_unchecked_mut(key) is now dangerous!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_disjoint_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#545\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get_disjoint_mut\" class=\"fn\">get_disjoint_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    keys: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">[K; N]</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns mutable references to the values corresponding to the given\nkeys. All keys must be valid and disjoint, otherwise None is returned.</p>\n<p>Requires at least stable Rust version 1.51.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>ka = sm.insert(()); sec.insert(ka, <span class=\"string\">\"butter\"</span>);\n<span class=\"kw\">let </span>kb = sm.insert(()); sec.insert(kb, <span class=\"string\">\"apples\"</span>);\n<span class=\"kw\">let </span>kc = sm.insert(()); sec.insert(kc, <span class=\"string\">\"charlie\"</span>);\nsec.remove(kc); <span class=\"comment\">// Make key c invalid.\n</span><span class=\"macro\">assert_eq!</span>(sec.get_disjoint_mut([ka, kb, kc]), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// Has invalid key.\n</span><span class=\"macro\">assert_eq!</span>(sec.get_disjoint_mut([ka, ka]), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// Not disjoint.\n</span><span class=\"kw\">let </span>[a, b] = sec.get_disjoint_mut([ka, kb]).unwrap();\nstd::mem::swap(a, b);\n<span class=\"macro\">assert_eq!</span>(sec[ka], <span class=\"string\">\"apples\"</span>);\n<span class=\"macro\">assert_eq!</span>(sec[kb], <span class=\"string\">\"butter\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_disjoint_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#613-616\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.get_disjoint_unchecked_mut\" class=\"fn\">get_disjoint_unchecked_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    keys: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">[K; N]</a>,\n) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut V</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Returns mutable references to the values corresponding to the given\nkeys. All keys must be valid and disjoint.</p>\n<p>Requires at least stable Rust version 1.51.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This should only be used if <code>contains_key(key)</code> is true for every given\nkey and no two keys are equal. Otherwise it is potentially unsafe.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>ka = sm.insert(()); sec.insert(ka, <span class=\"string\">\"butter\"</span>);\n<span class=\"kw\">let </span>kb = sm.insert(()); sec.insert(kb, <span class=\"string\">\"apples\"</span>);\n<span class=\"kw\">let </span>[a, b] = <span class=\"kw\">unsafe </span>{ sec.get_disjoint_unchecked_mut([ka, kb]) };\nstd::mem::swap(a, b);\n<span class=\"macro\">assert_eq!</span>(sec[ka], <span class=\"string\">\"apples\"</span>);\n<span class=\"macro\">assert_eq!</span>(sec[kb], <span class=\"string\">\"butter\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#645\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.Iter.html\" title=\"struct slotmap::sparse_secondary::Iter\">Iter</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The\niterator element type is <code>(K, &amp;'a V)</code>.</p>\n<p>This function must iterate over all slots, empty or not. In the face of\nmany deleted elements it can be inefficient.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k0 = sm.insert(<span class=\"number\">0</span>); sec.insert(k0, <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>k1 = sm.insert(<span class=\"number\">1</span>); sec.insert(k1, <span class=\"number\">11</span>);\n<span class=\"kw\">let </span>k2 = sm.insert(<span class=\"number\">2</span>); sec.insert(k2, <span class=\"number\">12</span>);\n\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>sec.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {:?}, val: {}\"</span>, k, v);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#679\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.IterMut.html\" title=\"struct slotmap::sparse_secondary::IterMut\">IterMut</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order, with\nmutable references to the values. The iterator element type is\n<code>(K, &amp;'a mut V)</code>.</p>\n<p>This function must iterate over all slots, empty or not. In the face of\nmany deleted elements it can be inefficient.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k0 = sm.insert(<span class=\"number\">1</span>); sec.insert(k0, <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>k1 = sm.insert(<span class=\"number\">2</span>); sec.insert(k1, <span class=\"number\">20</span>);\n<span class=\"kw\">let </span>k2 = sm.insert(<span class=\"number\">3</span>); sec.insert(k2, <span class=\"number\">30</span>);\n\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>sec.iter_mut() {\n    <span class=\"kw\">if </span>k != k1 {\n        <span class=\"kw-2\">*</span>v <span class=\"kw-2\">*</span>= -<span class=\"number\">1</span>;\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(sec[k0], -<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(sec[k1], <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(sec[k2], -<span class=\"number\">30</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#706\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.Keys.html\" title=\"struct slotmap::sparse_secondary::Keys\">Keys</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys in arbitrary order. The iterator element\ntype is <code>K</code>.</p>\n<p>This function must iterate over all slots, empty or not. In the face of\nmany deleted elements it can be inefficient.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k0 = sm.insert(<span class=\"number\">1</span>); sec.insert(k0, <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>k1 = sm.insert(<span class=\"number\">2</span>); sec.insert(k1, <span class=\"number\">20</span>);\n<span class=\"kw\">let </span>k2 = sm.insert(<span class=\"number\">3</span>); sec.insert(k2, <span class=\"number\">30</span>);\n<span class=\"kw\">let </span>keys: HashSet&lt;<span class=\"kw\">_</span>&gt; = sec.keys().collect();\n<span class=\"kw\">let </span>check: HashSet&lt;<span class=\"kw\">_</span>&gt; = <span class=\"macro\">vec!</span>[k0, k1, k2].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(keys, check);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#730\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.values\" class=\"fn\">values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.Values.html\" title=\"struct slotmap::sparse_secondary::Values\">Values</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values in arbitrary order. The iterator element\ntype is <code>&amp;'a V</code>.</p>\n<p>This function must iterate over all slots, empty or not. In the face of\nmany deleted elements it can be inefficient.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k0 = sm.insert(<span class=\"number\">1</span>); sec.insert(k0, <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>k1 = sm.insert(<span class=\"number\">2</span>); sec.insert(k1, <span class=\"number\">20</span>);\n<span class=\"kw\">let </span>k2 = sm.insert(<span class=\"number\">3</span>); sec.insert(k2, <span class=\"number\">30</span>);\n<span class=\"kw\">let </span>values: HashSet&lt;<span class=\"kw\">_</span>&gt; = sec.values().collect();\n<span class=\"kw\">let </span>check: HashSet&lt;<span class=\"kw\">_</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">20</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">30</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(values, check);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#755\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.ValuesMut.html\" title=\"struct slotmap::sparse_secondary::ValuesMut\">ValuesMut</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values mutably in arbitrary order. The iterator\nelement type is <code>&amp;'a mut V</code>.</p>\n<p>This function must iterate over all slots, empty or not. In the face of\nmany deleted elements it can be inefficient.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\nsec.insert(sm.insert(<span class=\"number\">1</span>), <span class=\"number\">10</span>);\nsec.insert(sm.insert(<span class=\"number\">2</span>), <span class=\"number\">20</span>);\nsec.insert(sm.insert(<span class=\"number\">3</span>), <span class=\"number\">30</span>);\nsec.values_mut().for_each(|n| { <span class=\"kw-2\">*</span>n <span class=\"kw-2\">*</span>= <span class=\"number\">3 </span>});\n<span class=\"kw\">let </span>values: HashSet&lt;<span class=\"kw\">_</span>&gt; = sec.into_iter().map(|(_k, v)| v).collect();\n<span class=\"kw\">let </span>check: HashSet&lt;<span class=\"kw\">_</span>&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">30</span>, <span class=\"number\">60</span>, <span class=\"number\">90</span>].into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(values, check);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#775\">Source</a><h4 class=\"code-header\">pub fn <a href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html#tymethod.entry\" class=\"fn\">entry</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"slotmap/sparse_secondary/enum.Entry.html\" title=\"enum slotmap::sparse_secondary::Entry\">Entry</a>&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the given key’s corresponding <a href=\"slotmap/sparse_secondary/enum.Entry.html\" title=\"enum slotmap::sparse_secondary::Entry\"><code>Entry</code></a> in the map for in-place\nmanipulation. May return <a href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the key was removed from the\noriginating slot map.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sm = SlotMap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sec = SparseSecondaryMap::new();\n<span class=\"kw\">let </span>k = sm.insert(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>v = sec.entry(k).unwrap().or_insert(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>v, <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"cosmic::widget::segmented_button::SparseSecondaryMap"],["<section id=\"impl-Eq-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/slotmap/sparse_secondary.rs.html#868-872\">Source</a><a href=\"#impl-Eq-for-SparseSecondaryMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"slotmap/sparse_secondary/struct.SparseSecondaryMap.html\" title=\"struct slotmap::sparse_secondary::SparseSecondaryMap\">SparseSecondaryMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"slotmap/trait.Key.html\" title=\"trait slotmap::Key\">Key</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section>","Eq","cosmic::widget::segmented_button::SparseSecondaryMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[77571]}