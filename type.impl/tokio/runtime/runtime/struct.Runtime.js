(function() {
    var type_impls = Object.fromEntries([["cosmic",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#94\">Source</a><a href=\"#impl-Debug-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#94\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#495\">Source</a><a href=\"#impl-Drop-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#496\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Executor-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/iced_futures/backend/native/tokio.rs.html#7\">Source</a><a href=\"#impl-Executor-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cosmic/iced/trait.Executor.html\" title=\"trait cosmic::iced::Executor\">Executor</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iced_futures/backend/native/tokio.rs.html#8\">Source</a><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cosmic/iced/trait.Executor.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a>, <a class=\"struct\" href=\"cosmic/iced_futures/futures/io/struct.Error.html\" title=\"struct cosmic::iced_futures::futures::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Creates a new <a href=\"cosmic/iced/trait.Executor.html\" title=\"trait cosmic::iced::Executor\"><code>Executor</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iced_futures/backend/native/tokio.rs.html#13\">Source</a><a href=\"#method.spawn\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cosmic/iced/trait.Executor.html#tymethod.spawn\" class=\"fn\">spawn</a>(&amp;self, future: impl <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static)</h4></section></summary><div class='docblock'>Spawns a future in the <a href=\"cosmic/iced/trait.Executor.html\" title=\"trait cosmic::iced::Executor\"><code>Executor</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/iced_futures/backend/native/tokio.rs.html#17\">Source</a><a href=\"#method.enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cosmic/iced/trait.Executor.html#method.enter\" class=\"fn\">enter</a>&lt;R&gt;(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Runs the given closure inside the <a href=\"cosmic/iced/trait.Executor.html\" title=\"trait cosmic::iced::Executor\"><code>Executor</code></a>. <a href=\"cosmic/iced/trait.Executor.html#method.enter\">Read more</a></div></details></div></details>","Executor","cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#129\">Source</a><a href=\"#impl-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a>, <a class=\"struct\" href=\"cosmic/iced_futures/futures/io/struct.Error.html\" title=\"struct cosmic::iced_futures::futures::io::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new runtime instance with default configuration values.</p>\n<p>This results in the multi threaded scheduler, I/O driver, and time driver being\ninitialized.</p>\n<p>Most applications will not need to call this function directly. Instead,\nthey will use the  <a href=\"../attr.main.html\"><code>#[tokio::main]</code> attribute</a>. When a more complex\nconfiguration is necessary, the <a href=\"tokio/runtime/builder/struct.Builder.html\" title=\"struct tokio::runtime::builder::Builder\">runtime builder</a> may be used.</p>\n<p>See <a href=\"index.html\">module level</a> documentation for more details.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Creating a new <code>Runtime</code> with default configuration values.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">let </span>rt = Runtime::new()\n    .unwrap();\n\n<span class=\"comment\">// Use the runtime...</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.handle\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#199\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.handle\" class=\"fn\">handle</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"tokio/runtime/handle/struct.Handle.html\" title=\"struct tokio::runtime::handle::Handle\">Handle</a></h4></section></summary><div class=\"docblock\"><p>Returns a handle to the runtime’s spawner.</p>\n<p>The returned handle can be used to spawn tasks that run on this runtime, and can\nbe cloned to allow moving the <code>Handle</code> to other threads.</p>\n<p>Calling <a href=\"tokio/runtime/handle/struct.Handle.html#method.block_on\" title=\"method tokio::runtime::handle::Handle::block_on\"><code>Handle::block_on</code></a> on a handle to a <code>current_thread</code> runtime is error-prone.\nRefer to the documentation of <a href=\"tokio/runtime/handle/struct.Handle.html#method.block_on\" title=\"method tokio::runtime::handle::Handle::block_on\"><code>Handle::block_on</code></a> for more.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">let </span>rt = Runtime::new()\n    .unwrap();\n\n<span class=\"kw\">let </span>handle = rt.handle();\n\n<span class=\"comment\">// Use the handle...</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#236-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;F&gt;(&amp;self, future: F) -&gt; <a class=\"struct\" href=\"tokio/runtime/task/join/struct.JoinHandle.html\" title=\"struct tokio::runtime::task::join::JoinHandle\">JoinHandle</a>&lt;&lt;F as <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"cosmic/iced_futures/futures/trait.Future.html#associatedtype.Output\" title=\"type cosmic::iced_futures::futures::Future::Output\">Output</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"JoinHandle&lt;&lt;F as Future&gt;::Output&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    &lt;F as <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"cosmic/iced_futures/futures/trait.Future.html#associatedtype.Output\" title=\"type cosmic::iced_futures::futures::Future::Output\">Output</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Spawns a future onto the Tokio runtime.</p>\n<p>This spawns the given future onto the runtime’s executor, usually a\nthread pool. The thread pool is then responsible for polling the future\nuntil it completes.</p>\n<p>The provided future will start running in the background immediately\nwhen <code>spawn</code> is called, even if you don’t await the returned\n<code>JoinHandle</code>.</p>\n<p>See <a href=\"index.html\">module level</a> documentation for more details.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n<span class=\"comment\">// Spawn a future onto the runtime\n</span>rt.spawn(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"now running on a worker thread\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#272-275\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.spawn_blocking\" class=\"fn\">spawn_blocking</a>&lt;F, R&gt;(&amp;self, func: F) -&gt; <a class=\"struct\" href=\"tokio/runtime/task/join/struct.JoinHandle.html\" title=\"struct tokio::runtime::task::join::JoinHandle\">JoinHandle</a>&lt;R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"JoinHandle&lt;R&gt;\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Runs the provided function on an executor dedicated to blocking operations.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n<span class=\"comment\">// Spawn a blocking function onto the runtime\n</span>rt.spawn_blocking(|| {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"now running on a worker thread\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_on\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#337\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.block_on\" class=\"fn\">block_on</a>&lt;F&gt;(&amp;self, future: F) -&gt; &lt;F as <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"cosmic/iced_futures/futures/trait.Future.html#associatedtype.Output\" title=\"type cosmic::iced_futures::futures::Future::Output\">Output</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"cosmic/iced_futures/futures/trait.Future.html\" title=\"trait cosmic::iced_futures::futures::Future\">Future</a>,</div></h4></section></summary><div class=\"docblock\"><p>Runs a future to completion on the Tokio runtime. This is the\nruntime’s entry point.</p>\n<p>This runs the given future on the current thread, blocking until it is\ncomplete, and yielding its resolved result. Any tasks or timers\nwhich the future spawns internally will be executed on the runtime.</p>\n<h5 id=\"non-worker-future\"><a class=\"doc-anchor\" href=\"#non-worker-future\">§</a>Non-worker future</h5>\n<p>Note that the future required by this function does not run as a\nworker. The expectation is that other tasks are spawned by the future here.\nAwaiting on other futures from the future provided here will not\nperform as fast as those spawned as workers.</p>\n<h5 id=\"multi-thread-scheduler\"><a class=\"doc-anchor\" href=\"#multi-thread-scheduler\">§</a>Multi thread scheduler</h5>\n<p>When the multi thread scheduler is used this will allow futures\nto run within the io driver and timer context of the overall runtime.</p>\n<p>Any spawned tasks will continue running after <code>block_on</code> returns.</p>\n<h5 id=\"current-thread-scheduler\"><a class=\"doc-anchor\" href=\"#current-thread-scheduler\">§</a>Current thread scheduler</h5>\n<p>When the current thread scheduler is enabled <code>block_on</code>\ncan be called concurrently from multiple threads. The first call\nwill take ownership of the io and timer drivers. This means\nother threads which do not own the drivers will hook into that one.\nWhen the first <code>block_on</code> completes, other threads will be able to\n“steal” the driver to allow continued execution of their futures.</p>\n<p>Any spawned tasks will be suspended after <code>block_on</code> returns. Calling\n<code>block_on</code> again will resume previously spawned tasks.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if the provided future panics, or if called within an\nasynchronous execution context.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt  = Runtime::new().unwrap();\n\n<span class=\"comment\">// Execute the future, blocking the current thread until completion\n</span>rt.block_on(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"hello\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enter\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#413\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.enter\" class=\"fn\">enter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/runtime/handle/struct.EnterGuard.html\" title=\"struct tokio::runtime::handle::EnterGuard\">EnterGuard</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Enters the runtime context.</p>\n<p>This allows you to construct types that must have an executor\navailable on creation such as <a href=\"tokio/time/sleep/struct.Sleep.html\" title=\"struct tokio::time::sleep::Sleep\"><code>Sleep</code></a> or <a href=\"tokio/net/tcp/stream/struct.TcpStream.html\" title=\"struct tokio::net::tcp::stream::TcpStream\"><code>TcpStream</code></a>. It will\nalso allow you to call methods such as <a href=\"tokio/task/spawn/fn.spawn.html\" title=\"fn tokio::task::spawn::spawn\"><code>tokio::spawn</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n<span class=\"kw\">use </span>tokio::task::JoinHandle;\n\n<span class=\"kw\">fn </span>function_that_spawns(msg: String) -&gt; JoinHandle&lt;()&gt; {\n    <span class=\"comment\">// Had we not used `rt.enter` below, this would panic.\n    </span>tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, msg);\n    })\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n    <span class=\"kw\">let </span>s = <span class=\"string\">\"Hello World!\"</span>.to_string();\n\n    <span class=\"comment\">// By entering the context, we tie `tokio::spawn` to this executor.\n    </span><span class=\"kw\">let </span>_guard = rt.enter();\n    <span class=\"kw\">let </span>handle = function_that_spawns(s);\n\n    <span class=\"comment\">// Wait for the task before we end the test.\n    </span>rt.block_on(handle).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#447\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.shutdown_timeout\" class=\"fn\">shutdown_timeout</a>(self, duration: <a class=\"struct\" href=\"cosmic/iced/time/struct.Duration.html\" title=\"struct cosmic::iced::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\"><p>Shuts down the runtime, waiting for at most <code>duration</code> for all spawned\nwork to stop.</p>\n<p>See the <a href=\"tokio/runtime/runtime/struct.Runtime.html#shutdown\" title=\"struct tokio::runtime::runtime::Runtime\">struct level documentation</a> for more details.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n<span class=\"kw\">use </span>tokio::task;\n\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>runtime = Runtime::new().unwrap();\n\n   runtime.block_on(<span class=\"kw\">async move </span>{\n       task::spawn_blocking(<span class=\"kw\">move </span>|| {\n           thread::sleep(Duration::from_secs(<span class=\"number\">10_000</span>));\n       });\n   });\n\n   runtime.shutdown_timeout(Duration::from_millis(<span class=\"number\">100</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown_background\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#484\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.shutdown_background\" class=\"fn\">shutdown_background</a>(self)</h4></section></summary><div class=\"docblock\"><p>Shuts down the runtime, without waiting for any spawned work to stop.</p>\n<p>This can be useful if you want to drop a runtime from within another runtime.\nNormally, dropping a runtime will block indefinitely for spawned blocking tasks\nto complete, which would normally not be permitted within an asynchronous context.\nBy calling <code>shutdown_background()</code>, you can drop the runtime from such a context.</p>\n<p>Note however, that because we do not wait for any blocking tasks to complete, this\nmay result in a resource leak (in that any blocking tasks are still running until they\nreturn.</p>\n<p>See the <a href=\"tokio/runtime/runtime/struct.Runtime.html#shutdown\" title=\"struct tokio::runtime::runtime::Runtime\">struct level documentation</a> for more details.</p>\n<p>This function is equivalent to calling <code>shutdown_timeout(Duration::from_nanos(0))</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>runtime = Runtime::new().unwrap();\n\n   runtime.block_on(<span class=\"kw\">async move </span>{\n       <span class=\"kw\">let </span>inner_runtime = Runtime::new().unwrap();\n       <span class=\"comment\">// ...\n       </span>inner_runtime.shutdown_background();\n   });\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metrics\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#490\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.metrics\" class=\"fn\">metrics</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/runtime/metrics/runtime/struct.RuntimeMetrics.html\" title=\"struct tokio::runtime::metrics::runtime::RuntimeMetrics\">RuntimeMetrics</a></h4></section></summary><div class=\"docblock\"><p>Returns a view that lets you get information about how the runtime\nis performing.</p>\n</div></details></div></details>",0,"cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"],["<section id=\"impl-RefUnwindSafe-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#516\">Source</a><a href=\"#impl-RefUnwindSafe-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section>","RefUnwindSafe","cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"],["<section id=\"impl-UnwindSafe-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#514\">Source</a><a href=\"#impl-UnwindSafe-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section>","UnwindSafe","cosmic::iced_futures::backend::default::Executor","cosmic::iced::executor::Default"]]],["iced_futures",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#94\">Source</a><a href=\"#impl-Debug-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#94\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","iced_futures::backend::native::tokio::Executor"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#495\">Source</a><a href=\"#impl-Drop-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#496\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","iced_futures::backend::native::tokio::Executor"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#129\">Source</a><a href=\"#impl-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new runtime instance with default configuration values.</p>\n<p>This results in the multi threaded scheduler, I/O driver, and time driver being\ninitialized.</p>\n<p>Most applications will not need to call this function directly. Instead,\nthey will use the  <a href=\"../attr.main.html\"><code>#[tokio::main]</code> attribute</a>. When a more complex\nconfiguration is necessary, the <a href=\"tokio/runtime/builder/struct.Builder.html\" title=\"struct tokio::runtime::builder::Builder\">runtime builder</a> may be used.</p>\n<p>See <a href=\"index.html\">module level</a> documentation for more details.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Creating a new <code>Runtime</code> with default configuration values.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">let </span>rt = Runtime::new()\n    .unwrap();\n\n<span class=\"comment\">// Use the runtime...</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.handle\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#199\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.handle\" class=\"fn\">handle</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"tokio/runtime/handle/struct.Handle.html\" title=\"struct tokio::runtime::handle::Handle\">Handle</a></h4></section></summary><div class=\"docblock\"><p>Returns a handle to the runtime’s spawner.</p>\n<p>The returned handle can be used to spawn tasks that run on this runtime, and can\nbe cloned to allow moving the <code>Handle</code> to other threads.</p>\n<p>Calling <a href=\"tokio/runtime/handle/struct.Handle.html#method.block_on\" title=\"method tokio::runtime::handle::Handle::block_on\"><code>Handle::block_on</code></a> on a handle to a <code>current_thread</code> runtime is error-prone.\nRefer to the documentation of <a href=\"tokio/runtime/handle/struct.Handle.html#method.block_on\" title=\"method tokio::runtime::handle::Handle::block_on\"><code>Handle::block_on</code></a> for more.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">let </span>rt = Runtime::new()\n    .unwrap();\n\n<span class=\"kw\">let </span>handle = rt.handle();\n\n<span class=\"comment\">// Use the handle...</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#236-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;F&gt;(&amp;self, future: F) -&gt; <a class=\"struct\" href=\"tokio/runtime/task/join/struct.JoinHandle.html\" title=\"struct tokio::runtime::task::join::JoinHandle\">JoinHandle</a>&lt;&lt;F as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    &lt;F as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Spawns a future onto the Tokio runtime.</p>\n<p>This spawns the given future onto the runtime’s executor, usually a\nthread pool. The thread pool is then responsible for polling the future\nuntil it completes.</p>\n<p>The provided future will start running in the background immediately\nwhen <code>spawn</code> is called, even if you don’t await the returned\n<code>JoinHandle</code>.</p>\n<p>See <a href=\"index.html\">module level</a> documentation for more details.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n<span class=\"comment\">// Spawn a future onto the runtime\n</span>rt.spawn(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"now running on a worker thread\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#272-275\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.spawn_blocking\" class=\"fn\">spawn_blocking</a>&lt;F, R&gt;(&amp;self, func: F) -&gt; <a class=\"struct\" href=\"tokio/runtime/task/join/struct.JoinHandle.html\" title=\"struct tokio::runtime::task::join::JoinHandle\">JoinHandle</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Runs the provided function on an executor dedicated to blocking operations.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n<span class=\"comment\">// Spawn a blocking function onto the runtime\n</span>rt.spawn_blocking(|| {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"now running on a worker thread\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_on\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#337\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.block_on\" class=\"fn\">block_on</a>&lt;F&gt;(&amp;self, future: F) -&gt; &lt;F as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html#associatedtype.Output\" title=\"type core::future::future::Future::Output\">Output</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>,</div></h4></section></summary><div class=\"docblock\"><p>Runs a future to completion on the Tokio runtime. This is the\nruntime’s entry point.</p>\n<p>This runs the given future on the current thread, blocking until it is\ncomplete, and yielding its resolved result. Any tasks or timers\nwhich the future spawns internally will be executed on the runtime.</p>\n<h5 id=\"non-worker-future\"><a class=\"doc-anchor\" href=\"#non-worker-future\">§</a>Non-worker future</h5>\n<p>Note that the future required by this function does not run as a\nworker. The expectation is that other tasks are spawned by the future here.\nAwaiting on other futures from the future provided here will not\nperform as fast as those spawned as workers.</p>\n<h5 id=\"multi-thread-scheduler\"><a class=\"doc-anchor\" href=\"#multi-thread-scheduler\">§</a>Multi thread scheduler</h5>\n<p>When the multi thread scheduler is used this will allow futures\nto run within the io driver and timer context of the overall runtime.</p>\n<p>Any spawned tasks will continue running after <code>block_on</code> returns.</p>\n<h5 id=\"current-thread-scheduler\"><a class=\"doc-anchor\" href=\"#current-thread-scheduler\">§</a>Current thread scheduler</h5>\n<p>When the current thread scheduler is enabled <code>block_on</code>\ncan be called concurrently from multiple threads. The first call\nwill take ownership of the io and timer drivers. This means\nother threads which do not own the drivers will hook into that one.\nWhen the first <code>block_on</code> completes, other threads will be able to\n“steal” the driver to allow continued execution of their futures.</p>\n<p>Any spawned tasks will be suspended after <code>block_on</code> returns. Calling\n<code>block_on</code> again will resume previously spawned tasks.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if the provided future panics, or if called within an\nasynchronous execution context.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"comment\">// Create the runtime\n</span><span class=\"kw\">let </span>rt  = Runtime::new().unwrap();\n\n<span class=\"comment\">// Execute the future, blocking the current thread until completion\n</span>rt.block_on(<span class=\"kw\">async </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"hello\"</span>);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enter\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#413\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.enter\" class=\"fn\">enter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/runtime/handle/struct.EnterGuard.html\" title=\"struct tokio::runtime::handle::EnterGuard\">EnterGuard</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Enters the runtime context.</p>\n<p>This allows you to construct types that must have an executor\navailable on creation such as <a href=\"tokio/time/sleep/struct.Sleep.html\" title=\"struct tokio::time::sleep::Sleep\"><code>Sleep</code></a> or <a href=\"tokio/net/tcp/stream/struct.TcpStream.html\" title=\"struct tokio::net::tcp::stream::TcpStream\"><code>TcpStream</code></a>. It will\nalso allow you to call methods such as <a href=\"tokio/task/spawn/fn.spawn.html\" title=\"fn tokio::task::spawn::spawn\"><code>tokio::spawn</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n<span class=\"kw\">use </span>tokio::task::JoinHandle;\n\n<span class=\"kw\">fn </span>function_that_spawns(msg: String) -&gt; JoinHandle&lt;()&gt; {\n    <span class=\"comment\">// Had we not used `rt.enter` below, this would panic.\n    </span>tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, msg);\n    })\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>rt = Runtime::new().unwrap();\n\n    <span class=\"kw\">let </span>s = <span class=\"string\">\"Hello World!\"</span>.to_string();\n\n    <span class=\"comment\">// By entering the context, we tie `tokio::spawn` to this executor.\n    </span><span class=\"kw\">let </span>_guard = rt.enter();\n    <span class=\"kw\">let </span>handle = function_that_spawns(s);\n\n    <span class=\"comment\">// Wait for the task before we end the test.\n    </span>rt.block_on(handle).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#447\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.shutdown_timeout\" class=\"fn\">shutdown_timeout</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\"><p>Shuts down the runtime, waiting for at most <code>duration</code> for all spawned\nwork to stop.</p>\n<p>See the <a href=\"tokio/runtime/runtime/struct.Runtime.html#shutdown\" title=\"struct tokio::runtime::runtime::Runtime\">struct level documentation</a> for more details.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n<span class=\"kw\">use </span>tokio::task;\n\n<span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>runtime = Runtime::new().unwrap();\n\n   runtime.block_on(<span class=\"kw\">async move </span>{\n       task::spawn_blocking(<span class=\"kw\">move </span>|| {\n           thread::sleep(Duration::from_secs(<span class=\"number\">10_000</span>));\n       });\n   });\n\n   runtime.shutdown_timeout(Duration::from_millis(<span class=\"number\">100</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shutdown_background\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#484\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.shutdown_background\" class=\"fn\">shutdown_background</a>(self)</h4></section></summary><div class=\"docblock\"><p>Shuts down the runtime, without waiting for any spawned work to stop.</p>\n<p>This can be useful if you want to drop a runtime from within another runtime.\nNormally, dropping a runtime will block indefinitely for spawned blocking tasks\nto complete, which would normally not be permitted within an asynchronous context.\nBy calling <code>shutdown_background()</code>, you can drop the runtime from such a context.</p>\n<p>Note however, that because we do not wait for any blocking tasks to complete, this\nmay result in a resource leak (in that any blocking tasks are still running until they\nreturn.</p>\n<p>See the <a href=\"tokio/runtime/runtime/struct.Runtime.html#shutdown\" title=\"struct tokio::runtime::runtime::Runtime\">struct level documentation</a> for more details.</p>\n<p>This function is equivalent to calling <code>shutdown_timeout(Duration::from_nanos(0))</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::runtime::Runtime;\n\n<span class=\"kw\">fn </span>main() {\n   <span class=\"kw\">let </span>runtime = Runtime::new().unwrap();\n\n   runtime.block_on(<span class=\"kw\">async move </span>{\n       <span class=\"kw\">let </span>inner_runtime = Runtime::new().unwrap();\n       <span class=\"comment\">// ...\n       </span>inner_runtime.shutdown_background();\n   });\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metrics\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#490\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/runtime/runtime/struct.Runtime.html#tymethod.metrics\" class=\"fn\">metrics</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/runtime/metrics/runtime/struct.RuntimeMetrics.html\" title=\"struct tokio::runtime::metrics::runtime::RuntimeMetrics\">RuntimeMetrics</a></h4></section></summary><div class=\"docblock\"><p>Returns a view that lets you get information about how the runtime\nis performing.</p>\n</div></details></div></details>",0,"iced_futures::backend::native::tokio::Executor"],["<section id=\"impl-RefUnwindSafe-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#516\">Source</a><a href=\"#impl-RefUnwindSafe-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section>","RefUnwindSafe","iced_futures::backend::native::tokio::Executor"],["<section id=\"impl-UnwindSafe-for-Runtime\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/runtime.rs.html#514\">Source</a><a href=\"#impl-UnwindSafe-for-Runtime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"tokio/runtime/runtime/struct.Runtime.html\" title=\"struct tokio::runtime::runtime::Runtime\">Runtime</a></h3></section>","UnwindSafe","iced_futures::backend::native::tokio::Executor"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[26658,22920]}